<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Verify</name>
    </assembly>
    <members>
        <member name="M:System.Runtime.CompilerServices.CollectionBuilderAttribute.#ctor(System.Type,System.String)">
            <summary>Initialize the attribute to refer to the <paramref name="methodName"/> method on the <paramref name="builderType"/> type.</summary>
            <param name="builderType">The type of the builder to use to construct the collection.</param>
            <param name="methodName">The name of the method on the builder to use to construct the collection.</param>
            <remarks>
            <paramref name="methodName"/> must refer to a static method that accepts a single parameter of
            type <see cref="T:System.ReadOnlySpan`1"/> and returns an instance of the collection being built containing
            a copy of the data from that span.  In future releases of .NET, additional patterns may be supported.
            </remarks>
        </member>
        <member name="P:System.Runtime.CompilerServices.CollectionBuilderAttribute.BuilderType">
            <summary>Gets the type of the builder to use to construct the collection.</summary>
        </member>
        <member name="P:System.Runtime.CompilerServices.CollectionBuilderAttribute.MethodName">
            <summary>Gets the name of the method on the builder to use to construct the collection.</summary>
            <remarks>This should match the metadata name of the target method. For example, this might be ".ctor" if targeting the type's constructor.</remarks>
        </member>
        <member name="T:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute">
            <summary>
            Indicates that compiler support for a particular feature is required for the location where this attribute is applied.
            </summary>
        </member>
        <member name="M:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute.#ctor(System.String)">
            <summary>
            Initialize a new instance of <see cref="T:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute"/>
            </summary>
            <param name="featureName">The name of the required compiler feature.</param>
        </member>
        <member name="P:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute.FeatureName">
            <summary>
            The name of the compiler feature.
            </summary>
        </member>
        <member name="P:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute.IsOptional">
            <summary>
            If true, the compiler can choose to allow access to the location where this attribute is applied if it does not understand <see cref="P:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute.FeatureName"/>.
            </summary>
        </member>
        <member name="F:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute.RefStructs">
            <summary>
            The <see cref="P:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute.FeatureName"/> used for the ref structs C# feature.
            </summary>
        </member>
        <member name="F:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute.RequiredMembers">
            <summary>
            The <see cref="P:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute.FeatureName"/> used for the required members C# feature.
            </summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.DisableRuntimeMarshallingAttribute">
             <summary>
             Disables the built-in runtime managed/unmanaged marshalling subsystem for
             P/Invokes, Delegate types, and unmanaged function pointer invocations.
             </summary>
             <remarks>
             The built-in marshalling subsystem has some behaviors that cannot be changed due to
             backward-compatibility requirements. This attribute allows disabling the built-in
             subsystem and instead uses the following rules for P/Invokes, Delegates,
             and unmanaged function pointer invocations:
            
             - All value types that do not contain reference type fields recursively (<c>unmanaged</c> in C#) are blittable
             - Value types that recursively have any fields that have <c>[StructLayout(LayoutKind.Auto)]</c> are disallowed from interop.
             - All reference types are disallowed from usage in interop scenarios.
             - SetLastError support in P/Invokes is disabled.
             - varargs support is disabled.
             - LCIDConversionAttribute support is disabled.
             </remarks>
        </member>
        <member name="T:System.Runtime.CompilerServices.OverloadResolutionPriorityAttribute">
            <summary>
            Specifies the priority of a member in overload resolution. When unspecified, the default priority is 0.
            </summary>
        </member>
        <member name="M:System.Runtime.CompilerServices.OverloadResolutionPriorityAttribute.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Runtime.CompilerServices.OverloadResolutionPriorityAttribute"/> class.
            </summary>
            <param name="priority">The priority of the attributed member. Higher numbers are prioritized,
            lower numbers are deprioritized. 0 is the default if no attribute is present.</param>
        </member>
        <member name="P:System.Runtime.CompilerServices.OverloadResolutionPriorityAttribute.Priority">
            <summary>
            The priority of the member.
            </summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.RequiredMemberAttribute">
            <summary>
            Specifies that a type has required members or that a member is required.
            </summary>
        </member>
        <member name="T:System.Runtime.Versioning.OSPlatformAttribute">
            <summary>
            Base type for all platform-specific API attributes.
            </summary>
        </member>
        <member name="T:System.Runtime.Versioning.ObsoletedOSPlatformAttribute">
            <summary>
            Marks APIs that were obsoleted in a given operating system version.
            </summary>
            <remarks>
            Primarily used by OS bindings to indicate APIs that should not be used anymore.
            </remarks>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.ConstantExpectedAttribute">
            <summary>
            Indicates that the specified method parameter expects a constant.
            </summary>
            <remarks>
            This can be used to inform tooling that a constant should be used as an argument for the annotated parameter.
            </remarks>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.ConstantExpectedAttribute.Min">
            <summary>
            Indicates the minimum bound of the expected constant, inclusive.
            </summary>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.ConstantExpectedAttribute.Max">
            <summary>
            Indicates the maximum bound of the expected constant, inclusive.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.ExperimentalAttribute">
            <summary>
            Indicates that a parameter captures the expression passed for another parameter as a string.
            </summary>
            <summary>
             Indicates that an API is experimental and it may change in the future.
            </summary>
            <remarks>
              This attribute allows call sites to be flagged with a diagnostic that indicates that an experimental
              feature is used. Authors can use this attribute to ship preview features in their assemblies.
            </remarks>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.ExperimentalAttribute.#ctor(System.String)">
            <summary>
             Initializes a new instance of the <see cref="T:System.Diagnostics.CodeAnalysis.ExperimentalAttribute"/> class, specifying the ID that the compiler will use
             when reporting a use of the API the attribute applies to.
            </summary>
            <param name="diagnosticId">The ID that the compiler will use when reporting a use of the API the attribute applies to.</param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.ExperimentalAttribute.DiagnosticId">
            <summary>
             Gets the ID that the compiler will use when reporting a use of the API the attribute applies to.
            </summary>
            <value>The unique diagnostic ID.</value>
            <remarks>
             The diagnostic ID is shown in build output for warnings and errors.
             <para>This property represents the unique ID that can be used to suppress the warnings or errors, if needed.</para>
            </remarks>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.ExperimentalAttribute.UrlFormat">
            <summary>
             Gets or sets the URL for corresponding documentation.
             The API accepts a format string instead of an actual URL, creating a generic URL that includes the diagnostic ID.
            </summary>
            <value>The format string that represents a URL to corresponding documentation.</value>
            <remarks>An example format string is <c>https://contoso.com/obsoletion-warnings/{0}</c>.</remarks>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.SetsRequiredMembersAttribute">
            <summary>
            Specifies that this constructor sets all required members for the current type, and callers
            do not need to set any required members themselves.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute">
            <summary>
            Specifies the syntax used in a string.</summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.#ctor(System.String)">
            <summary>
            Initializes the <see cref="T:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute"/> with the identifier of the syntax used.</summary>
            <param name="syntax">The syntax identifier.</param>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.#ctor(System.String,System.Object[])">
            <summary>
            Initializes the <see cref="T:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute"/> with the identifier of the syntax used.</summary>
            <param name="syntax">The syntax identifier.</param>
            <param name="arguments">Optional arguments associated with the specific syntax employed.</param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.Syntax">
            <summary>Gets the identifier of the syntax used.</summary>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.Arguments">
            <summary>Optional arguments associated with the specific syntax employed.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.CompositeFormat">
            <summary>The syntax identifier for strings containing composite formats for string formatting.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.DateOnlyFormat">
            <summary>The syntax identifier for strings containing date format specifiers.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.DateTimeFormat">
            <summary>The syntax identifier for strings containing date and time format specifiers.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.EnumFormat">
            <summary>The syntax identifier for strings containing <see cref="T:System.Enum"/> format specifiers.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.GuidFormat">
            <summary>The syntax identifier for strings containing <see cref="T:System.Guid"/> format specifiers.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.Json">
            <summary>The syntax identifier for strings containing JavaScript Object Notation (JSON).</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.NumericFormat">
            <summary>The syntax identifier for strings containing numeric format specifiers.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.Regex">
            <summary>The syntax identifier for strings containing regular expressions.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.TimeOnlyFormat">
            <summary>The syntax identifier for strings containing time format specifiers.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.TimeSpanFormat">
            <summary>The syntax identifier for strings containing <see cref="T:System.TimeSpan"/> format specifiers.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.Uri">
            <summary>The syntax identifier for strings containing URIs.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.Xml">
            <summary>The syntax identifier for strings containing XML.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.RequiresDynamicCodeAttribute">
            <summary>
            Indicates that the specified method requires the ability to generate new code at runtime,
            for example through <see cref="N:System.Reflection"/>.
            </summary>
            <remarks>
            This allows tools to understand which methods are unsafe to call when compiling ahead of time.
            </remarks>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.RequiresDynamicCodeAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Diagnostics.CodeAnalysis.RequiresDynamicCodeAttribute"/> class
            with the specified message.
            </summary>
            <param name="message">
            A message that contains information about the usage of dynamic code.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.RequiresDynamicCodeAttribute.Message">
            <summary>
            Gets a message that contains information about the usage of dynamic code.
            </summary>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.RequiresDynamicCodeAttribute.Url">
            <summary>
            Gets or sets an optional URL that contains more information about the method,
            why it requires dynamic code, and what options a consumer has to deal with it.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.UnscopedRefAttribute">
            <summary>
            Used to indicate a byref escapes and is not scoped.
            </summary>
            <remarks>
            <para>
            There are several cases where the C# compiler treats a <see langword="ref"/> as implicitly
            <see langword="scoped"/> - where the compiler does not allow the <see langword="ref"/> to escape the method.
            </para>
            <para>
            For example:
            <list type="number">
              <item><see langword="this"/> for <see langword="struct"/> instance methods.</item>
              <item><see langword="ref"/> parameters that refer to <see langword="ref"/> <see langword="struct"/> types.</item>
              <item><see langword="out"/> parameters.</item>
            </list>
            </para>
            <para>
            This attribute is used in those instances where the <see langword="ref"/> should be allowed to escape.
            </para>
            <para>
            Applying this attribute, in any form, has impact on consumers of the applicable API. It is necessary for
            API authors to understand the lifetime implications of applying this attribute and how it may impact their users.
            </para>
            </remarks>
        </member>
        <member name="T:System.Diagnostics.UnreachableException">
            <summary>
            Exception thrown when the program executes an instruction that was thought to be unreachable.
            </summary>
            <seealso href="https://learn.microsoft.com/en-us/dotnet/api/system.diagnostics.unreachableexception"/>
            <seealso href="https://source.dot.net/#System.Private.CoreLib/src/libraries/System.Private.CoreLib/src/System/Diagnostics/UnreachableException.cs"/>
        </member>
        <member name="M:System.Diagnostics.UnreachableException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Diagnostics.UnreachableException"/> class with the default error message.
            </summary>
        </member>
        <member name="M:System.Diagnostics.UnreachableException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Diagnostics.UnreachableException"/>
            class with a specified error message.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
        </member>
        <member name="M:System.Diagnostics.UnreachableException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Diagnostics.UnreachableException"/>
            class with a specified error message and a reference to the inner exception that is the cause of
            this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception.</param>
        </member>
        <member name="F:System.Text.RegularExpressions.RegexCache.DefaultMaxCacheSize">
            <summary>The default maximum number of items to store in the cache.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.RegexCache.MaxExamineOnDrop">
            <summary>The maximum number of cached items to examine when we need to replace an existing one in the cache with a new one.</summary>
            <remarks>This is a somewhat arbitrary value, chosen to be small but at least as large as DefaultMaxCacheSize.</remarks>
        </member>
        <member name="F:System.Text.RegularExpressions.RegexCache.s_lastAccessed">
            <summary>A read-through cache of one element, representing the most recently used regular expression.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.RegexCache.s_cacheDictionary">
            <summary>The thread-safe dictionary storing all the items in the cache.</summary>
            <remarks>
            The concurrency level is initialized to 1 as we're using our own global lock for all mutations, so we don't need ConcurrentDictionary's
            striped locking.  Capacity is initialized to 31, which is the same as (the private) ConcurrentDictionary.DefaultCapacity.
            </remarks>
        </member>
        <member name="F:System.Text.RegularExpressions.RegexCache.s_cacheList">
            <summary>A list of all the items in the cache.  Protected by <see cref="P:System.Text.RegularExpressions.RegexCache.SyncObj"/>.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.RegexCache.s_random">
            <summary>Random number generator used to examine a subset of items when we need to drop one from a large list.  Protected by <see cref="P:System.Text.RegularExpressions.RegexCache.SyncObj"/>.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.RegexCache.s_maxCacheSize">
            <summary>The current maximum number of items allowed in the cache.  This rarely changes.  Mostly protected by <see cref="P:System.Text.RegularExpressions.RegexCache.SyncObj"/>.</summary>
        </member>
        <member name="P:System.Text.RegularExpressions.RegexCache.SyncObj">
            <summary>Lock used to protect shared state on mutations.</summary>
        </member>
        <member name="P:System.Text.RegularExpressions.RegexCache.MaxCacheSize">
            <summary>Gets or sets the maximum size of the cache.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.RegexCache.Key">
            <summary>Used as a key for <see cref="T:System.Text.RegularExpressions.RegexCache.Node"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.RegexCache.Node">
            <summary>Node for a cached Regex instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.RegexCache.Node.#ctor(System.Text.RegularExpressions.RegexCache.Key,System.Text.RegularExpressions.Regex)">
            <summary>Node for a cached Regex instance.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.RegexCache.Node.Key">
            <summary>The key associated with this cached instance.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.RegexCache.Node.Regex">
            <summary>The cached Regex instance.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.RegexCache.Node.LastAccessStamp">
            <summary>A "time" stamp representing the approximate last access time for this Regex.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.ValueMatch">
            <summary>
            Represents the results from a single regular expression match.
            </summary>
            <remarks>
            The <see cref="T:System.Text.RegularExpressions.ValueMatch"/> type is immutable and has no public constructor. An instance of the <see cref="T:System.Text.RegularExpressions.ValueMatch"/> struct is returned by the
            <see cref="!:Regex.ValueMatchEnumerator.Current"/> method when iterating over the results from calling <see cref="!:Regex.EnumerateMatches(ReadOnlySpan&lt;char&gt;)"/>.
            </remarks>
        </member>
        <member name="M:System.Text.RegularExpressions.ValueMatch.#ctor(System.Int32,System.Int32)">
            <summary>
            Crates an instance of the <see cref="T:System.Text.RegularExpressions.ValueMatch"/> type based on the passed in <paramref name="index"/> and <paramref name="length"/>.
            </summary>
            <param name="index">The position in the original span where the first character of the captured sliced span is found.</param>
            <param name="length">The length of the captured sliced span.</param>
        </member>
        <member name="P:System.Text.RegularExpressions.ValueMatch.Index">
            <summary>
            Gets the position in the original span where the first character of the captured sliced span is found.
            </summary>
        </member>
        <member name="P:System.Text.RegularExpressions.ValueMatch.Length">
            <summary>
            Gets the length of the captured sliced span.
            </summary>
        </member>
        <member name="T:System.Text.RegularExpressions.ValueMatchEnumerator">
             <summary>
             Represents an enumerator containing the set of successful matches found by iteratively applying a regular expression pattern to the input span.
             </summary>
             <remarks>
             The enumerator has no public constructor. The <see cref="!:Regex.EnumerateMatches(ReadOnlySpan&lt;char&gt;)"/> method returns a <see cref="!:Regex.ValueMatchEnumerator"/>
             object.The enumerator will lazily iterate over zero or more <see cref="T:System.Text.RegularExpressions.ValueMatch"/> objects. If there is at least one successful match in the span, then
             <see cref="M:System.Text.RegularExpressions.ValueMatchEnumerator.MoveNext"/> returns <see langword="true"/> and <see cref="P:System.Text.RegularExpressions.ValueMatchEnumerator.Current"/> will contain the first <see cref="T:System.Text.RegularExpressions.ValueMatch"/>. If there are no successful matches,
             then <see cref="M:System.Text.RegularExpressions.ValueMatchEnumerator.MoveNext"/> returns <see langword="false"/> and <see cref="P:System.Text.RegularExpressions.ValueMatchEnumerator.Current"/> throws an <see cref="T:System.InvalidOperationException"/>.
            
             This type is a ref struct since it stores the input span as a field in order to be able to lazily iterate over it.
             </remarks>
        </member>
        <member name="M:System.Text.RegularExpressions.ValueMatchEnumerator.#ctor(System.Text.RegularExpressions.Regex,System.ReadOnlySpan{System.Char},System.Int32)">
            <summary>
            Creates an instance of the <see cref="T:System.Text.RegularExpressions.ValueMatchEnumerator"/> for the passed in <paramref name="regex"/> which iterates over <paramref name="input"/>.
            </summary>
            <param name="regex">The <see cref="T:System.Text.RegularExpressions.Regex"/> to use for finding matches.</param>
            <param name="input">The input span to iterate over.</param>
            <param name="startAt">The position where the engine should start looking for matches from.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.ValueMatchEnumerator.GetEnumerator">
            <summary>
            Provides an enumerator that iterates through the matches in the input span.
            </summary>
            <returns>A copy of this enumerator.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.ValueMatchEnumerator.MoveNext">
            <summary>
            Advances the enumerator to the next match in the span.
            </summary>
            <returns>
            <see langword="true"/> if the enumerator was successfully advanced to the next element; <see langword="false"/> if the enumerator cannot find additional matches.
            </returns>
        </member>
        <member name="P:System.Text.RegularExpressions.ValueMatchEnumerator.Current">
            <summary>
            Gets the <see cref="T:System.Text.RegularExpressions.ValueMatch"/> element at the current position of the enumerator.
            </summary>
            <exception cref="T:System.InvalidOperationException">Enumeration has either not started or has already finished.</exception>
        </member>
        <member name="M:Polyfills.EnumPolyfill.GetValues``1">
            <summary>
            Retrieves an array of the values of the constants in a specified enumeration type.
            </summary>
            <returns>An array that contains the values of the constants in TEnum.</returns>
        </member>
        <member name="M:Polyfills.EnumPolyfill.IsDefined``1(``0)">
            <summary>Returns a <see cref="T:System.Boolean"/> telling whether a given integral value exists in a specified enumeration.</summary>
            <typeparam name="TEnum">The type of the enumeration.</typeparam>
            <param name="value">The value in <typeparamref name="TEnum"/>.</param>
            <returns><see langword="true"/> if a given integral value exists in a specified enumeration; <see langword="false"/>, otherwise.</returns>
        </member>
        <member name="M:Polyfills.EnumPolyfill.GetNames``1">
            <summary>
            Retrieves an array of the names of the constants in a specified enumeration type.
            </summary>
            <returns>A string array of the names of the constants in TEnum.</returns>
        </member>
        <member name="M:Polyfills.EnumPolyfill.Parse``1(System.String)">
            <summary>
            Converts the string representation of the name or numeric value of one or more enumerated constants specified by TEnum to an equivalent enumerated object.
            </summary>
        </member>
        <member name="M:Polyfills.EnumPolyfill.Parse``1(System.String,System.Boolean)">
            <summary>
            Converts the string representation of the name or numeric value of one or more enumerated constants specified by TEnum to an equivalent enumerated object.
            </summary>
        </member>
        <member name="M:Polyfills.EnumPolyfill.Parse``1(System.ReadOnlySpan{System.Char})">
            <summary>
            Converts the span of characters representation of the name or numeric value of one or more enumerated constants specified by TEnum to an equivalent enumerated object.
            </summary>
        </member>
        <member name="M:Polyfills.EnumPolyfill.Parse``1(System.ReadOnlySpan{System.Char},System.Boolean)">
            <summary>
            Converts the span of characters representation of the name or numeric value of one or more enumerated constants specified by TEnum to an equivalent enumerated object.
            </summary>
        </member>
        <member name="M:Polyfills.EnumPolyfill.TryParse``1(System.ReadOnlySpan{System.Char},``0@)">
            <summary>
            Converts the string representation of the name or numeric value of one or more enumerated constants to an equivalent enumerated object.
            </summary>
        </member>
        <member name="M:Polyfills.EnumPolyfill.TryParse``1(System.ReadOnlySpan{System.Char},System.Boolean,``0@)">
            <summary>
            Converts the string representation of the name or numeric value of one or more enumerated constants to an equivalent enumerated object. A parameter specifies whether the operation is case-sensitive. The return value indicates whether the conversion succeeded.
            </summary>
        </member>
        <member name="M:Polyfills.GuidPolyfill.TryParse(System.String,System.IFormatProvider,System.Guid@)">
            <summary>
            Tries to parse a string into a value.
            </summary>
        </member>
        <member name="M:Polyfills.GuidPolyfill.TryParse(System.ReadOnlySpan{System.Byte},System.IFormatProvider,System.Byte@)">
            <summary>
            Tries to parse a span of UTF-8 characters into a value.
            </summary>
        </member>
        <member name="M:Polyfills.BytePolyfill.TryParse(System.String,System.IFormatProvider,System.Byte@)">
            <summary>
            Tries to parse a string into a value.
            </summary>
        </member>
        <member name="M:Polyfills.BytePolyfill.TryParse(System.ReadOnlySpan{System.Byte},System.IFormatProvider,System.Byte@)">
            <summary>
            Tries to parse a span of UTF-8 characters into a value.
            </summary>
        </member>
        <member name="M:Polyfills.BytePolyfill.TryParse(System.ReadOnlySpan{System.Char},System.Byte@)">
            <summary>
            Converts the span representation of a number in a specified style and culture-specific format to its byte equivalent. A return value indicates whether the conversion succeeded.
            </summary>
        </member>
        <member name="M:Polyfills.BytePolyfill.TryParse(System.ReadOnlySpan{System.Char},System.IFormatProvider,System.Byte@)">
            <summary>
            Tries to parse a span of characters into a value.
            </summary>
        </member>
        <member name="M:Polyfills.BytePolyfill.TryParse(System.ReadOnlySpan{System.Byte},System.Globalization.NumberStyles,System.IFormatProvider,System.Byte@)">
            <summary>
            Tries to parse a span of UTF-8 characters into a value.
            </summary>
        </member>
        <member name="M:Polyfills.BytePolyfill.TryParse(System.ReadOnlySpan{System.Byte},System.Byte@)">
            <summary>
            Tries to convert a UTF-8 character span containing the string representation of a number to its byte equivalent.
            </summary>
        </member>
        <member name="M:Polyfills.BytePolyfill.TryParse(System.ReadOnlySpan{System.Char},System.Globalization.NumberStyles,System.IFormatProvider,System.Byte@)">
            <summary>
            Converts the span representation of a number in a specified style and culture-specific format to its byte equivalent. A return value indicates whether the conversion succeeded.
            </summary>
        </member>
        <member name="M:Polyfills.DoublePolyfill.TryParse(System.String,System.IFormatProvider,System.Double@)">
            <summary>
            Tries to parse a string into a value.
            </summary>
        </member>
        <member name="M:Polyfills.DoublePolyfill.TryParse(System.ReadOnlySpan{System.Byte},System.IFormatProvider,System.Double@)">
            <summary>
            Tries to parse a span of UTF-8 characters into a value.
            </summary>
        </member>
        <member name="M:Polyfills.DoublePolyfill.TryParse(System.ReadOnlySpan{System.Char},System.Double@)">
            <summary>
            Converts the span representation of a number in a specified style and culture-specific format to its double-precision floating-point number equivalent. A return value indicates whether the conversion succeeded or failed.
            </summary>
        </member>
        <member name="M:Polyfills.DoublePolyfill.TryParse(System.ReadOnlySpan{System.Char},System.IFormatProvider,System.Double@)">
            <summary>
            Tries to parse a span of characters into a value.
            </summary>
        </member>
        <member name="M:Polyfills.DoublePolyfill.TryParse(System.ReadOnlySpan{System.Byte},System.Globalization.NumberStyles,System.IFormatProvider,System.Double@)">
            <summary>
            Tries to parse a span of UTF-8 characters into a value.
            </summary>
        </member>
        <member name="M:Polyfills.DoublePolyfill.TryParse(System.ReadOnlySpan{System.Byte},System.Double@)">
            <summary>
            Tries to convert a UTF-8 character span containing the string representation of a number to its double-precision floating-point number equivalent..
            </summary>
        </member>
        <member name="M:Polyfills.DoublePolyfill.TryParse(System.ReadOnlySpan{System.Char},System.Globalization.NumberStyles,System.IFormatProvider,System.Double@)">
            <summary>
            Converts the string representation of a number in a specified style and culture-specific format to its double-precision floating-point number equivalent. A return value indicates whether the conversion succeeded or failed.
            </summary>
        </member>
        <member name="M:Polyfills.IntPolyfill.TryParse(System.String,System.IFormatProvider,System.Int32@)">
            <summary>
            Tries to parse a string into a value.
            </summary>
        </member>
        <member name="M:Polyfills.IntPolyfill.TryParse(System.ReadOnlySpan{System.Byte},System.IFormatProvider,System.Int32@)">
            <summary>
            Tries to parse a span of UTF-8 characters into a value.
            </summary>
        </member>
        <member name="M:Polyfills.IntPolyfill.TryParse(System.ReadOnlySpan{System.Char},System.Int32@)">
            <summary>
            Converts the span representation of a number in a specified style and culture-specific format to its 32-bit signed integer equivalent. A return value indicates whether the conversion succeeded.
            </summary>
        </member>
        <member name="M:Polyfills.IntPolyfill.TryParse(System.ReadOnlySpan{System.Char},System.IFormatProvider,System.Int32@)">
            <summary>
            Tries to parse a span of characters into a value.
            </summary>
        </member>
        <member name="M:Polyfills.IntPolyfill.TryParse(System.ReadOnlySpan{System.Byte},System.Globalization.NumberStyles,System.IFormatProvider,System.Int32@)">
            <summary>
            Tries to parse a span of UTF-8 characters into a value.
            </summary>
        </member>
        <member name="M:Polyfills.IntPolyfill.TryParse(System.ReadOnlySpan{System.Byte},System.Int32@)">
            <summary>
            Tries to convert a UTF-8 character span containing the string representation of a number to its 32-bit signed integer equivalent.
            </summary>
        </member>
        <member name="M:Polyfills.IntPolyfill.TryParse(System.ReadOnlySpan{System.Char},System.Globalization.NumberStyles,System.IFormatProvider,System.Int32@)">
            <summary>
            Converts the span representation of a number in a specified style and culture-specific format to its 32-bit signed integer equivalent. A return value indicates whether the conversion succeeded.
            </summary>
        </member>
        <member name="M:Polyfills.LongPolyfill.TryParse(System.String,System.IFormatProvider,System.Int32@)">
            <summary>
            Tries to parse a string into a value.
            </summary>
        </member>
        <member name="M:Polyfills.LongPolyfill.TryParse(System.ReadOnlySpan{System.Byte},System.IFormatProvider,System.Int32@)">
            <summary>
            Tries to parse a span of UTF-8 characters into a value.
            </summary>
        </member>
        <member name="M:Polyfills.LongPolyfill.TryParse(System.ReadOnlySpan{System.Char},System.Int32@)">
            <summary>
            Converts the span representation of a number in a specified style and culture-specific format to its 32-bit signed integer equivalent. A return value indicates whether the conversion succeeded.
            </summary>
        </member>
        <member name="M:Polyfills.LongPolyfill.TryParse(System.ReadOnlySpan{System.Char},System.IFormatProvider,System.Int32@)">
            <summary>
            Tries to parse a span of characters into a value.
            </summary>
        </member>
        <member name="M:Polyfills.LongPolyfill.TryParse(System.ReadOnlySpan{System.Byte},System.Globalization.NumberStyles,System.IFormatProvider,System.Int32@)">
            <summary>
            Tries to parse a span of UTF-8 characters into a value.
            </summary>
        </member>
        <member name="M:Polyfills.LongPolyfill.TryParse(System.ReadOnlySpan{System.Byte},System.Int32@)">
            <summary>
            Tries to convert a UTF-8 character span containing the string representation of a number to its 64-bit signed integer equivalent.
            </summary>
        </member>
        <member name="M:Polyfills.LongPolyfill.TryParse(System.ReadOnlySpan{System.Char},System.Globalization.NumberStyles,System.IFormatProvider,System.Int32@)">
            <summary>
            Converts the span representation of a number in a specified style and culture-specific format to its 64-bit signed integer equivalent. A return value indicates whether the conversion succeeded.
            </summary>
        </member>
        <member name="M:Polyfills.SBytePolyfill.TryParse(System.String,System.IFormatProvider,System.SByte@)">
            <summary>
            Tries to parse a string into a value.
            </summary>
        </member>
        <member name="M:Polyfills.SBytePolyfill.TryParse(System.ReadOnlySpan{System.Byte},System.IFormatProvider,System.SByte@)">
            <summary>
            Tries to parse a span of UTF-8 characters into a value.
            </summary>
        </member>
        <member name="M:Polyfills.SBytePolyfill.TryParse(System.ReadOnlySpan{System.Char},System.SByte@)">
            <summary>
            Converts the span representation of a number in a specified style and culture-specific format to its sbyte equivalent. A return value indicates whether the conversion succeeded.
            </summary>
        </member>
        <member name="M:Polyfills.SBytePolyfill.TryParse(System.ReadOnlySpan{System.Char},System.IFormatProvider,System.SByte@)">
            <summary>
            Tries to parse a span of characters into a value.
            </summary>
        </member>
        <member name="M:Polyfills.SBytePolyfill.TryParse(System.ReadOnlySpan{System.Byte},System.Globalization.NumberStyles,System.IFormatProvider,System.SByte@)">
            <summary>
            Tries to parse a span of UTF-8 characters into a value.
            </summary>
        </member>
        <member name="M:Polyfills.SBytePolyfill.TryParse(System.ReadOnlySpan{System.Byte},System.SByte@)">
            <summary>
            Tries to convert a UTF-8 character span containing the string representation of a number to its sbyte equivalent.
            </summary>
        </member>
        <member name="M:Polyfills.SBytePolyfill.TryParse(System.ReadOnlySpan{System.Char},System.Globalization.NumberStyles,System.IFormatProvider,System.SByte@)">
            <summary>
            Converts the span representation of a number in a specified style and culture-specific format to its sbyte equivalent. A return value indicates whether the conversion succeeded.
            </summary>
        </member>
        <member name="M:Polyfills.ShortPolyfill.TryParse(System.String,System.IFormatProvider,System.Int16@)">
            <summary>
            Tries to parse a string into a value.
            </summary>
        </member>
        <member name="M:Polyfills.ShortPolyfill.TryParse(System.ReadOnlySpan{System.Byte},System.IFormatProvider,System.Int16@)">
            <summary>
            Tries to parse a span of UTF-8 characters into a value.
            </summary>
        </member>
        <member name="M:Polyfills.ShortPolyfill.TryParse(System.ReadOnlySpan{System.Char},System.Int16@)">
            <summary>
            Converts the span representation of a number in a specified style and culture-specific format to its short equivalent. A return value indicates whether the conversion succeeded.
            </summary>
        </member>
        <member name="M:Polyfills.ShortPolyfill.TryParse(System.ReadOnlySpan{System.Char},System.IFormatProvider,System.Int16@)">
            <summary>
            Tries to parse a span of characters into a value.
            </summary>
        </member>
        <member name="M:Polyfills.ShortPolyfill.TryParse(System.ReadOnlySpan{System.Byte},System.Globalization.NumberStyles,System.IFormatProvider,System.Int16@)">
            <summary>
            Tries to parse a span of UTF-8 characters into a value.
            </summary>
        </member>
        <member name="M:Polyfills.ShortPolyfill.TryParse(System.ReadOnlySpan{System.Byte},System.Int16@)">
            <summary>
            Tries to convert a UTF-8 character span containing the string representation of a number to its short equivalent.
            </summary>
        </member>
        <member name="M:Polyfills.ShortPolyfill.TryParse(System.ReadOnlySpan{System.Char},System.Globalization.NumberStyles,System.IFormatProvider,System.Int16@)">
            <summary>
            Converts the span representation of a number in a specified style and culture-specific format to its short equivalent. A return value indicates whether the conversion succeeded.
            </summary>
        </member>
        <member name="M:Polyfills.UIntPolyfill.TryParse(System.String,System.IFormatProvider,System.UInt32@)">
            <summary>
            Tries to parse a string into a value.
            </summary>
        </member>
        <member name="M:Polyfills.UIntPolyfill.TryParse(System.ReadOnlySpan{System.Byte},System.IFormatProvider,System.UInt32@)">
            <summary>
            Tries to parse a span of UTF-8 characters into a value.
            </summary>
        </member>
        <member name="M:Polyfills.UIntPolyfill.TryParse(System.ReadOnlySpan{System.Char},System.UInt32@)">
            <summary>
            Converts the span representation of a number in a specified style and culture-specific format to its uint equivalent. A return value indicates whether the conversion succeeded.
            </summary>
        </member>
        <member name="M:Polyfills.UIntPolyfill.TryParse(System.ReadOnlySpan{System.Char},System.IFormatProvider,System.UInt32@)">
            <summary>
            Tries to parse a span of characters into a value.
            </summary>
        </member>
        <member name="M:Polyfills.UIntPolyfill.TryParse(System.ReadOnlySpan{System.Byte},System.Globalization.NumberStyles,System.IFormatProvider,System.UInt32@)">
            <summary>
            Tries to parse a span of UTF-8 characters into a value.
            </summary>
        </member>
        <member name="M:Polyfills.UIntPolyfill.TryParse(System.ReadOnlySpan{System.Byte},System.UInt32@)">
            <summary>
            Tries to convert a UTF-8 character span containing the string representation of a number to its uint equivalent.
            </summary>
        </member>
        <member name="M:Polyfills.UIntPolyfill.TryParse(System.ReadOnlySpan{System.Char},System.Globalization.NumberStyles,System.IFormatProvider,System.UInt32@)">
            <summary>
            Converts the span representation of a number in a specified style and culture-specific format to its uint equivalent. A return value indicates whether the conversion succeeded.
            </summary>
        </member>
        <member name="M:Polyfills.ULongPolyfill.TryParse(System.String,System.IFormatProvider,System.UInt64@)">
            <summary>
            Tries to parse a string into a value.
            </summary>
        </member>
        <member name="M:Polyfills.ULongPolyfill.TryParse(System.ReadOnlySpan{System.Byte},System.IFormatProvider,System.UInt64@)">
            <summary>
            Tries to parse a span of UTF-8 characters into a value.
            </summary>
        </member>
        <member name="M:Polyfills.ULongPolyfill.TryParse(System.ReadOnlySpan{System.Char},System.UInt64@)">
            <summary>
            Converts the span representation of a number in a specified style and culture-specific format to its ulong equivalent. A return value indicates whether the conversion succeeded.
            </summary>
        </member>
        <member name="M:Polyfills.ULongPolyfill.TryParse(System.ReadOnlySpan{System.Char},System.IFormatProvider,System.UInt64@)">
            <summary>
            Tries to parse a span of characters into a value.
            </summary>
        </member>
        <member name="M:Polyfills.ULongPolyfill.TryParse(System.ReadOnlySpan{System.Byte},System.Globalization.NumberStyles,System.IFormatProvider,System.UInt64@)">
            <summary>
            Tries to parse a span of UTF-8 characters into a value.
            </summary>
        </member>
        <member name="M:Polyfills.ULongPolyfill.TryParse(System.ReadOnlySpan{System.Byte},System.UInt64@)">
            <summary>
            Tries to convert a UTF-8 character span containing the string representation of a number to its ulong equivalent.
            </summary>
        </member>
        <member name="M:Polyfills.ULongPolyfill.TryParse(System.ReadOnlySpan{System.Char},System.Globalization.NumberStyles,System.IFormatProvider,System.UInt64@)">
            <summary>
            Converts the span representation of a number in a specified style and culture-specific format to its ulong equivalent. A return value indicates whether the conversion succeeded.
            </summary>
        </member>
        <member name="M:Polyfills.UShortPolyfill.TryParse(System.String,System.IFormatProvider,System.UInt16@)">
            <summary>
            Tries to parse a string into a value.
            </summary>
        </member>
        <member name="M:Polyfills.UShortPolyfill.TryParse(System.ReadOnlySpan{System.Byte},System.IFormatProvider,System.UInt16@)">
            <summary>
            Tries to parse a span of UTF-8 characters into a value.
            </summary>
        </member>
        <member name="M:Polyfills.UShortPolyfill.TryParse(System.ReadOnlySpan{System.Char},System.UInt16@)">
            <summary>
            Converts the span representation of a number in a specified style and culture-specific format to its ushort equivalent. A return value indicates whether the conversion succeeded.
            </summary>
        </member>
        <member name="M:Polyfills.UShortPolyfill.TryParse(System.ReadOnlySpan{System.Char},System.IFormatProvider,System.UInt16@)">
            <summary>
            Tries to parse a span of characters into a value.
            </summary>
        </member>
        <member name="M:Polyfills.UShortPolyfill.TryParse(System.ReadOnlySpan{System.Byte},System.Globalization.NumberStyles,System.IFormatProvider,System.UInt16@)">
            <summary>
            Tries to parse a span of UTF-8 characters into a value.
            </summary>
        </member>
        <member name="M:Polyfills.UShortPolyfill.TryParse(System.ReadOnlySpan{System.Byte},System.UInt16@)">
            <summary>
            Tries to convert a UTF-8 character span containing the string representation of a number to its ushort equivalent.
            </summary>
        </member>
        <member name="M:Polyfills.UShortPolyfill.TryParse(System.ReadOnlySpan{System.Char},System.Globalization.NumberStyles,System.IFormatProvider,System.UInt16@)">
            <summary>
            Converts the span representation of a number in a specified style and culture-specific format to its ushort equivalent. A return value indicates whether the conversion succeeded.
            </summary>
        </member>
        <member name="M:Polyfills.Polyfill.CancelAsync(System.Threading.CancellationTokenSource)">
            <summary>Communicates a request for cancellation asynchronously.</summary>
            <remarks>
            <para>
            The associated <see cref="T:System.Threading.CancellationToken" /> will be notified of the cancellation
            and will synchronously transition to a state where <see cref="P:System.Threading.CancellationToken.IsCancellationRequested"/> returns true.
            Any callbacks or cancelable operations registered with the <see cref="T:System.Threading.CancellationToken"/>  will be executed asynchronously,
            with the returned <see cref="T:System.Threading.Tasks.Task"/> representing their eventual completion.
            </para>
            <para>
            Callbacks registered with the token should not throw exceptions.
            However, any such exceptions that are thrown will be aggregated into an <see cref="T:System.AggregateException"/>,
            such that one callback throwing an exception will not prevent other registered callbacks from being executed.
            </para>
            <para>
            The <see cref="T:System.Threading.ExecutionContext"/> that was captured when each callback was registered
            will be reestablished when the callback is invoked.
            </para>
            </remarks>
            <exception cref="T:System.ObjectDisposedException">This <see cref="T:System.Threading.CancellationTokenSource"/> has been disposed.</exception>
        </member>
        <member name="M:Polyfills.Polyfill.AsReadOnly``2(System.Collections.Generic.IDictionary{``0,``1})">
            <summary>
            Returns a read-only <see cref="T:System.Collections.ObjectModel.ReadOnlyDictionary`2"/> wrapper for the current dictionary.
            </summary>
            <typeparam name="TKey">The type of keys in the dictionary.</typeparam>
            <typeparam name="TValue">The type of values in the dictionary.</typeparam>
            <param name="dictionary">The dictionary to wrap.</param>
            <returns>An object that acts as a read-only wrapper around the current <see cref="T:System.Collections.Generic.IDictionary`2"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="dictionary"/> is null.</exception>
        </member>
        <member name="M:Polyfills.Polyfill.Index``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            https://learn.microsoft.com/en-us/dotnet/core/whats-new/dotnet-9/overview#linq
            </summary>
        </member>
        <member name="M:Polyfills.Polyfill.AggregateBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},``2,System.Func{``2,``0,``2},System.Collections.Generic.IEqualityComparer{``1})">
            <summary>
            https://learn.microsoft.com/en-us/dotnet/core/whats-new/dotnet-9/overview#linq
            </summary>
        </member>
        <member name="M:Polyfills.Polyfill.AggregateBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,``2},System.Func{``2,``0,``2},System.Collections.Generic.IEqualityComparer{``1})">
            <summary>
            https://learn.microsoft.com/en-us/dotnet/core/whats-new/dotnet-9/overview#linq
            </summary>
        </member>
        <member name="M:Polyfills.Polyfill.CountBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
            <summary>
            https://learn.microsoft.com/en-us/dotnet/core/whats-new/dotnet-9/overview#linq
            </summary>
        </member>
        <member name="M:Polyfills.Polyfill.Except``1(System.Collections.Generic.IEnumerable{``0},``0)">
            <summary>
            Produces a set items excluding <paramref name="item"/> by using the default equality comparer to compare values.
            </summary>
            <param name="target">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> whose elements that are not equal to <paramref name="item"/> will be returned.</param>
            <param name="item">An <see cref="!:TSource"/> that is elements equal it will cause those elements to be removed from the returned sequence.</param>
            <typeparam name="TSource">The type of the elements of <paramref name="target" />.</typeparam>
            <returns>A sequence that contains the items of <paramref name="target"/> but excluding <paramref name="item"/>.</returns>
        </member>
        <member name="M:Polyfills.Polyfill.Except``1(System.Collections.Generic.IEnumerable{``0},``0[])">
            <summary>
            Produces the set difference of two sequences by using the default equality comparer to compare values.
            </summary>
            <param name="target">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> whose elements that are not equal to <paramref name="item"/> will be returned.</param>
            <param name="item">An <see cref="!:TSource"/> that is elements equal it will cause those elements to be removed from the returned sequence.</param>
            <typeparam name="TSource">The type of the elements of <paramref name="target" />.</typeparam>
            <returns>A sequence that contains the items of <paramref name="target"/> but excluding <paramref name="item"/>.</returns>
        </member>
        <member name="M:Polyfills.Polyfill.Except``1(System.Collections.Generic.IEnumerable{``0},``0,System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Produces a set items excluding <paramref name="item"/> by using <paramref name="comparer"/> to compare values.
            </summary>
            <param name="target">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> whose elements that are not equal to <paramref name="item"/> will be returned.</param>
            <param name="item">An <see cref="!:TSource"/> that is elements equal it will cause those elements to be removed from the returned sequence.</param>
            <param name="comparer">An <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> to compare values.</param>
            <typeparam name="TSource">The type of the elements of <paramref name="target" />.</typeparam>
            <returns>A sequence that contains the items of <paramref name="target"/> but excluding <paramref name="item"/>.</returns>
        </member>
        <member name="M:Polyfills.Polyfill.Except``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0},``0[])">
            <summary>
            Produces the set difference of two sequences by <paramref name="comparer"/> to compare values.
            </summary>
            <param name="target">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> whose elements that are not equal to <paramref name="item"/> will be returned.</param>
            <param name="item">An <see cref="!:TSource"/> that is elements equal it will cause those elements to be removed from the returned sequence.</param>
            <typeparam name="TSource">The type of the elements of <paramref name="target" />.</typeparam>
            <returns>A sequence that contains the items of <paramref name="target"/> but excluding <paramref name="item"/>.</returns>
        </member>
        <member name="M:Polyfills.Polyfill.AsReadOnly``1(System.Collections.Generic.IList{``0})">
            <summary>Returns a read-only <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> wrapper for the current collection.</summary>
            <returns>An object that acts as a read-only wrapper around the current <see cref="T:System.Collections.Generic.IList`1" />.</returns>
        </member>
        <member name="M:Polyfills.Polyfill.AddRange``1(System.Collections.Generic.List{``0},System.ReadOnlySpan{``0})">
            <summary>Adds the elements of the specified span to the end of the <see cref="T:System.Collections.Generic.List`1"/>.</summary>
            <typeparam name="T">The type of elements in the list.</typeparam>
            <param name="list">The list to which the elements should be added.</param>
            <param name="source">The span whose elements should be added to the end of the <see cref="T:System.Collections.Generic.List`1"/>.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="list"/> is null.</exception>
        </member>
        <member name="M:Polyfills.Polyfill.InsertRange``1(System.Collections.Generic.List{``0},System.Int32,System.ReadOnlySpan{``0})">
            <summary>Inserts the elements of a span into the <see cref="T:System.Collections.Generic.List`1"/> at the specified index.</summary>
            <typeparam name="T">The type of elements in the list.</typeparam>
            <param name="list">The list into which the elements should be inserted.</param>
            <param name="index">The zero-based index at which the new elements should be inserted.</param>
            <param name="source">The span whose elements should be added to the <see cref="T:System.Collections.Generic.List`1"/>.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="list"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is less than 0 or greater than <paramref name="list"/>'s <see cref="P:System.Collections.Generic.List`1.Count"/>.</exception>
        </member>
        <member name="M:Polyfills.Polyfill.CopyTo``1(System.Collections.Generic.List{``0},System.Span{``0})">
            <summary>Copies the entire <see cref="T:System.Collections.Generic.List`1"/> to a span.</summary>
            <typeparam name="T">The type of elements in the list.</typeparam>
            <param name="list">The list from which the elements are copied.</param>
            <param name="destination">The span that is the destination of the elements copied from <paramref name="list"/>.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="list"/> is null.</exception>
            <exception cref="T:System.ArgumentException">The number of elements in the source <see cref="T:System.Collections.Generic.List`1"/> is greater than the number of elements that the destination span can contain.</exception>
        </member>
        <member name="M:Polyfills.Polyfill.Split``1(System.ReadOnlySpan{``0},``0)">
            <summary>
            Returns a type that allows for enumeration of each element within a split span
            using the provided separator character.
            </summary>
            <typeparam name="T">The type of the elements.</typeparam>
            <param name="source">The source span to be enumerated.</param>
            <param name="separator">The separator character to be used to split the provided span.</param>
            <returns>Returns a <see cref="T:Polyfills.Polyfill.SpanSplitEnumerator`1"/>.</returns>
        </member>
        <member name="M:Polyfills.Polyfill.Split``1(System.ReadOnlySpan{``0},System.ReadOnlySpan{``0})">
            <summary>
            Returns a type that allows for enumeration of each element within a split span
            using the provided separator span.
            </summary>
            <typeparam name="T">The type of the elements.</typeparam>
            <param name="source">The source span to be enumerated.</param>
            <param name="separator">The separator span to be used to split the provided span.</param>
            <returns>Returns a <see cref="T:Polyfills.Polyfill.SpanSplitEnumerator`1"/>.</returns>
        </member>
        <member name="M:Polyfills.Polyfill.SplitAny``1(System.ReadOnlySpan{``0},System.ReadOnlySpan{``0})">
            <summary>
            Returns a type that allows for enumeration of each element within a split span
            using any of the provided elements.
            </summary>
            <typeparam name="T">The type of the elements.</typeparam>
            <param name="source">The source span to be enumerated.</param>
            <param name="separators">The separators to be used to split the provided span.</param>
            <returns>Returns a <see cref="T:Polyfills.Polyfill.SpanSplitEnumerator`1"/>.</returns>
            <remarks>
            If <typeparamref name="T"/> is <see cref="T:System.Char"/> and if <paramref name="separators"/> is empty,
            all Unicode whitespace characters are used as the separators. This matches the behavior of when
            <see cref="M:System.String.Split(System.Char[])"/> and related overloads are used with an empty separator array,
            or when <see cref="!:SplitAny(ReadOnlySpan&lt;char&gt;, Span&lt;Range&gt;, ReadOnlySpan&lt;char&gt;, StringSplitOptions)"/>
            is used with an empty separator span.
            </remarks>
        </member>
        <member name="T:Polyfills.Polyfill.SpanSplitEnumerator`1">
            <summary>
            Enables enumerating each split within a <see cref="T:System.ReadOnlySpan`1"/> that has been divided using one or more separators.
            </summary>
        </member>
        <member name="F:Polyfills.Polyfill.SpanSplitEnumerator`1._span">
            <summary>The input span being split.</summary>
        </member>
        <member name="F:Polyfills.Polyfill.SpanSplitEnumerator`1._separator">
            <summary>A single separator to use when <see cref="F:Polyfills.Polyfill.SpanSplitEnumerator`1._splitMode"/> is <see cref="F:Polyfills.Polyfill.SpanSplitEnumeratorMode.SingleElement"/>.</summary>
        </member>
        <member name="F:Polyfills.Polyfill.SpanSplitEnumerator`1._separatorBuffer">
            <summary>
            A separator span to use when <see cref="F:Polyfills.Polyfill.SpanSplitEnumerator`1._splitMode"/> is <see cref="F:Polyfills.Polyfill.SpanSplitEnumeratorMode.Sequence"/> (in which case
            it's treated as a single separator) or <see cref="F:Polyfills.Polyfill.SpanSplitEnumeratorMode.Any"/> (in which case it's treated as a set of separators).
            </summary>
        </member>
        <member name="F:Polyfills.Polyfill.SpanSplitEnumerator`1._splitMode">
            <summary>Mode that dictates how the instance was configured and how its fields should be used in <see cref="M:Polyfills.Polyfill.SpanSplitEnumerator`1.MoveNext"/>.</summary>
        </member>
        <member name="F:Polyfills.Polyfill.SpanSplitEnumerator`1._startCurrent">
            <summary>The inclusive starting index in <see cref="F:Polyfills.Polyfill.SpanSplitEnumerator`1._span"/> of the current range.</summary>
        </member>
        <member name="F:Polyfills.Polyfill.SpanSplitEnumerator`1._endCurrent">
            <summary>The exclusive ending index in <see cref="F:Polyfills.Polyfill.SpanSplitEnumerator`1._span"/> of the current range.</summary>
        </member>
        <member name="F:Polyfills.Polyfill.SpanSplitEnumerator`1._startNext">
            <summary>The index in <see cref="F:Polyfills.Polyfill.SpanSplitEnumerator`1._span"/> from which the next separator search should start.</summary>
        </member>
        <member name="M:Polyfills.Polyfill.SpanSplitEnumerator`1.GetEnumerator">
            <summary>Gets an enumerator that allows for iteration over the split span.</summary>
            <returns>Returns a <see cref="T:Polyfills.Polyfill.SpanSplitEnumerator`1"/> that can be used to iterate over the split span.</returns>
        </member>
        <member name="P:Polyfills.Polyfill.SpanSplitEnumerator`1.Current">
            <summary>Gets the current element of the enumeration.</summary>
            <returns>Returns a <see cref="T:System.Range"/> instance that indicates the bounds of the current element withing the source span.</returns>
        </member>
        <member name="M:Polyfills.Polyfill.SpanSplitEnumerator`1.#ctor(System.ReadOnlySpan{`0},System.ReadOnlySpan{`0})">
            <summary>Initializes the enumerator for <see cref="F:Polyfills.Polyfill.SpanSplitEnumeratorMode.Any"/>.</summary>
            <remarks>
            If <paramref name="separators"/> is empty and <typeparamref name="T"/> is <see cref="T:System.Char"/>, as an optimization
            it will instead use <see cref="!:SpanSplitEnumeratorMode.SearchValues"/> with a cached <see cref="!:SearchValues&lt;Char&gt;"/>
            for all whitespace characters.
            </remarks>
        </member>
        <member name="M:Polyfills.Polyfill.SpanSplitEnumerator`1.#ctor(System.ReadOnlySpan{`0},System.ReadOnlySpan{`0},System.Boolean)">
            <summary>Initializes the enumerator for <see cref="F:Polyfills.Polyfill.SpanSplitEnumeratorMode.Sequence"/> (or <see cref="F:Polyfills.Polyfill.SpanSplitEnumeratorMode.EmptySequence"/> if the separator is empty).</summary>
            <remarks><paramref name="treatAsSingleSeparator"/> must be true.</remarks>
        </member>
        <member name="M:Polyfills.Polyfill.SpanSplitEnumerator`1.#ctor(System.ReadOnlySpan{`0},`0)">
            <summary>Initializes the enumerator for <see cref="F:Polyfills.Polyfill.SpanSplitEnumeratorMode.SingleElement"/>.</summary>
        </member>
        <member name="M:Polyfills.Polyfill.SpanSplitEnumerator`1.MoveNext">
            <summary>
            Advances the enumerator to the next element of the enumeration.
            </summary>
            <returns><see langword="true"/> if the enumerator was successfully advanced to the next element; <see langword="false"/> if the enumerator has passed the end of the enumeration.</returns>
        </member>
        <member name="T:Polyfills.Polyfill.SpanSplitEnumeratorMode">
            <summary>Indicates in which mode <see cref="T:Polyfills.Polyfill.SpanSplitEnumerator`1"/> is operating, with regards to how it should interpret its state.</summary>
        </member>
        <member name="F:Polyfills.Polyfill.SpanSplitEnumeratorMode.None">
            <summary>Either a default <see cref="T:Polyfills.Polyfill.SpanSplitEnumerator`1"/> was used, or the enumerator has finished enumerating and there's no more work to do.</summary>
        </member>
        <member name="F:Polyfills.Polyfill.SpanSplitEnumeratorMode.SingleElement">
            <summary>A single T separator was provided.</summary>
        </member>
        <member name="F:Polyfills.Polyfill.SpanSplitEnumeratorMode.Any">
            <summary>A span of separators was provided, each of which should be treated independently.</summary>
        </member>
        <member name="F:Polyfills.Polyfill.SpanSplitEnumeratorMode.Sequence">
            <summary>The separator is a span of elements to be treated as a single sequence.</summary>
        </member>
        <member name="F:Polyfills.Polyfill.SpanSplitEnumeratorMode.EmptySequence">
            <summary>The separator is an empty sequence, such that no splits should be performed.</summary>
        </member>
        <member name="M:Polyfills.Polyfill.Nanoseconds(System.TimeSpan)">
            <summary>
            Gets the nanosecond component of the time represented by the current <see cref="T:System.TimeSpan"/> object.
            </summary>
        </member>
        <member name="M:Polyfills.Polyfill.Nanosecond(System.DateTime)">
            <summary>
            Gets the nanosecond component of the time represented by the current <see cref="T:System.DateTime"/> object.
            </summary>
        </member>
        <member name="M:Polyfills.Polyfill.Nanosecond(System.DateTimeOffset)">
            <summary>
            Gets the nanosecond component of the time represented by the current <see cref="T:System.DateTimeOffset"/> object.
            </summary>
        </member>
        <member name="M:Polyfills.Polyfill.Microseconds(System.TimeSpan)">
            <summary>
            Gets the microsecond component of the time represented by the current <see cref="T:System.TimeSpan"/> object.
            </summary>
        </member>
        <member name="M:Polyfills.Polyfill.Microsecond(System.DateTime)">
            <summary>
            Gets the microsecond component of the time represented by the current <see cref="T:System.DateTime"/> object.
            </summary>
        </member>
        <member name="M:Polyfills.Polyfill.Microsecond(System.DateTimeOffset)">
            <summary>
            Gets the microsecond component of the time represented by the current <see cref="T:System.DateTimeOffset"/> object.
            </summary>
        </member>
        <member name="M:Polyfills.Polyfill.AddMicroseconds(System.DateTime,System.Double)">
            <summary>
            Returns a new <see cref="T:System.DateTime"/> object that adds a specified number of microseconds to the value of this instance..
            </summary>
        </member>
        <member name="M:Polyfills.Polyfill.AddMicroseconds(System.DateTimeOffset,System.Double)">
            <summary>
            Returns a new <see cref="T:System.DateTimeOffset"/> object that adds a specified number of microseconds to the value of this instance..
            </summary>
        </member>
        <member name="M:Polyfills.Polyfill.Shuffle``1(System.Random,``0[])">
            <summary>
            Performs an in-place shuffle of an array.
            </summary>
            <param name="index">The array to shuffle.</param>
            <typeparam name="T">The type of array.</typeparam>
            <remarks>
              This method uses <see cref="!:Next(int, int)" /> to choose values for shuffling.
              This method is an O(n) operation.
            </remarks>
        </member>
        <member name="M:Polyfills.Polyfill.Shuffle``1(System.Random,System.Span{``0})">
            <summary>
            Performs an in-place shuffle of a span.
            </summary>
            <param name="index">The span to shuffle.</param>
            <typeparam name="T">The type of span.</typeparam>
            <remarks>
              This method uses <see cref="!:Next(int, int)" /> to choose values for shuffling.
              This method is an O(n) operation.
            </remarks>
        </member>
        <member name="M:Polyfills.Polyfill.GetKeyAtIndex``2(System.Collections.Generic.SortedList{``0,``1},System.Int32)">
            <summary>
            Gets the key corresponding to the specified index.
            </summary>
            <param name="index">The zero-based index of the key within the entire <see cref="T:System.Collections.Generic.SortedList`2"/>.</param>
            <returns>The key corresponding to the specified index.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">The specified index is out of range.</exception>
        </member>
        <member name="M:Polyfills.Polyfill.GetValueAtIndex``2(System.Collections.Generic.SortedList{``0,``1},System.Int32)">
            <summary>
            Gets the value corresponding to the specified index.
            </summary>
            <param name="index">The zero-based index of the value within the entire <see cref="T:System.Collections.Generic.SortedList`2"/>.</param>
            <returns>The value corresponding to the specified index.</returns>
        </member>
        <member name="M:Polyfills.Polyfill.Append(System.Text.StringBuilder,System.Text.StringBuilder.AppendInterpolatedStringHandler@)">
            <summary>Appends the specified interpolated string to this instance.</summary>
            <param name="handler">The interpolated string to append.</param>
            <returns>A reference to this instance after the append operation has completed.</returns>
        </member>
        <member name="M:Polyfills.Polyfill.Append(System.Text.StringBuilder,System.IFormatProvider,System.Text.StringBuilder.AppendInterpolatedStringHandler@)">
            <summary>Appends the specified interpolated string to this instance.</summary>
            <param name="provider">An object that supplies culture-specific formatting information.</param>
            <param name="handler">The interpolated string to append.</param>
            <returns>A reference to this instance after the append operation has completed.</returns>
        </member>
        <member name="M:Polyfills.Polyfill.AppendLine(System.Text.StringBuilder,System.Text.StringBuilder.AppendInterpolatedStringHandler@)">
            <summary>Appends the specified interpolated string followed by the default line terminator to the end of the current StringBuilder object.</summary>
            <param name="handler">The interpolated string to append.</param>
            <returns>A reference to this instance after the append operation has completed.</returns>
        </member>
        <member name="M:Polyfills.Polyfill.AppendLine(System.Text.StringBuilder,System.IFormatProvider,System.Text.StringBuilder.AppendInterpolatedStringHandler@)">
            <summary>Appends the specified interpolated string followed by the default line terminator to the end of the current StringBuilder object.</summary>
            <param name="provider">An object that supplies culture-specific formatting information.</param>
            <param name="handler">The interpolated string to append.</param>
            <returns>A reference to this instance after the append operation has completed.</returns>
        </member>
        <member name="M:Polyfills.Polyfill.Replace(System.Text.StringBuilder,System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char})">
            <summary>
            Replaces all instances of one string with another in part of this builder.
            </summary>
            <param name="oldValue">The string to replace.</param>
            <param name="newValue">The string to replace <paramref name="oldValue"/> with.</param>
            <param name="startIndex">The index to start in this builder.</param>
            <param name="count">The number of characters to read in this builder.</param>
            <remarks>
            If <paramref name="newValue"/> is <c>null</c>, instances of <paramref name="oldValue"/> are removed from this builder.
            </remarks>
        </member>
        <member name="M:Polyfills.Polyfill.Replace(System.Text.StringBuilder,System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.Int32,System.Int32)">
            <summary>
            Replaces all instances of one read-only character span with another in part of this builder.
            </summary>
            <param name="oldValue">The read-only character span to replace.</param>
            <param name="newValue">The read-only character span to replace <paramref name="oldValue"/> with.</param>
            <param name="startIndex">The index to start in this builder.</param>
            <param name="count">The number of characters to read in this builder.</param>
            <remarks>
            If <paramref name="newValue"/> is empty, instances of <paramref name="oldValue"/> are removed from this builder.
            </remarks>
        </member>
        <member name="M:Polyfills.Polyfill.ReadToEndAsync(System.IO.TextReader,System.Threading.CancellationToken)">
            <summary>
            Reads all characters from the current position to the end of the stream asynchronously and returns them as one string.
            </summary>
            <param name="cancellationToken">The token to monitor for cancellation requests.</param>
            <returns>A task that represents the asynchronous read operation. The value of the <c>TResult</c> parameter contains
            a string with the characters from the current position to the end of the stream.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">The number of characters is larger than <see cref="F:System.Int32.MaxValue"/>.</exception>
            <exception cref="T:System.ObjectDisposedException">The stream reader has been disposed.</exception>
            <exception cref="T:System.InvalidOperationException">The reader is currently in use by a previous read operation.</exception>
        </member>
        <member name="M:Polyfills.Polyfill.ReadLineAsync(System.IO.TextReader,System.Threading.CancellationToken)">
            <summary>
            Reads a line of characters asynchronously and returns the data as a string.
            </summary>
            <param name="cancellationToken">The token to monitor for cancellation requests.</param>
            <returns>A value task that represents the asynchronous read operation. The value of the <c>TResult</c>
            parameter contains the next line from the text reader, or is <see langword="null" /> if all of the characters have been read.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">The number of characters in the next line is larger than <see cref="F:System.Int32.MaxValue"/>.</exception>
            <exception cref="T:System.ObjectDisposedException">The text reader has been disposed.</exception>
            <exception cref="T:System.InvalidOperationException">The reader is currently in use by a previous read operation.</exception>
        </member>
        <member name="M:Polyfills.Polyfill.FlushAsync(System.IO.TextWriter,System.Threading.CancellationToken)">
            <summary>
            Asynchronously clears all buffers for the current writer and causes any buffered data to
            be written to the underlying device.
            </summary>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> to monitor for cancellation requests.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous flush operation.</returns>
            <exception cref="T:System.ObjectDisposedException">The text writer is disposed.</exception>
            <exception cref="T:System.InvalidOperationException">The writer is currently in use by a previous write operation.</exception>
        </member>
        <member name="M:Polyfills.Polyfill.TryFormat(System.DateTimeOffset,System.Span{System.Char},System.Int32@,System.ReadOnlySpan{System.Char},System.IFormatProvider)">
            <summary>
            Tries to format the value of the current instance into the provided span of characters.
            </summary>
        </member>
        <member name="M:Polyfills.Polyfill.TryFormat(System.DateTime,System.Span{System.Char},System.Int32@,System.ReadOnlySpan{System.Char},System.IFormatProvider)">
            <summary>
            Tries to format the value of the current instance into the provided span of characters.
            </summary>
        </member>
        <member name="M:Polyfills.Polyfill.TryFormat(System.DateOnly,System.Span{System.Char},System.Int32@,System.ReadOnlySpan{System.Char},System.IFormatProvider)">
            <summary>
            Tries to format the value of the current instance into the provided span of characters.
            </summary>
        </member>
        <member name="M:Polyfills.Polyfill.TryFormat(System.TimeOnly,System.Span{System.Char},System.Int32@,System.ReadOnlySpan{System.Char},System.IFormatProvider)">
            <summary>
            Tries to format the value of the current instance into the provided span of characters.
            </summary>
        </member>
        <member name="M:Polyfills.Polyfill.IsGenericMethodParameter(System.Type)">
            <summary>
            Gets a value that indicates whether the current Type represents a type parameter in the definition of a generic method.
            </summary>
        </member>
        <member name="M:Polyfills.Polyfill.IsAssignableTo``1(System.Type)">
            <summary>
            Generic version of Type.IsAssignableTo https://learn.microsoft.com/en-us/dotnet/api/system.type.isassignableto.
            </summary>
        </member>
        <member name="M:Polyfills.Polyfill.IsAssignableFrom``1(System.Type)">
            <summary>
            Generic version of Type.IsAssignableFrom https://learn.microsoft.com/en-us/dotnet/api/system.type.isassignablefrom.
            </summary>
        </member>
        <member name="M:Polyfills.Polyfill.IsMatch(System.Text.RegularExpressions.Regex,System.ReadOnlySpan{System.Char},System.Int32)">
            <summary>
            Indicates whether the regular expression specified in the Regex constructor finds a match in a specified input span.
            </summary>
            <returns>true if the regular expression finds a match; otherwise, false.</returns>
        </member>
        <member name="M:Polyfills.Polyfill.IsMatch(System.Text.RegularExpressions.Regex,System.ReadOnlySpan{System.Char})">
            <summary>
            Indicates whether the regular expression specified in the Regex constructor finds a match in a specified input span.
            </summary>
            <returns>true if the regular expression finds a match; otherwise, false.</returns>
        </member>
        <member name="M:Polyfills.Polyfill.EnumerateMatches(System.Text.RegularExpressions.Regex,System.ReadOnlySpan{System.Char})">
            <summary>
            Searches an input span for all occurrences of a regular expression and returns a Regex.ValueMatchEnumerator to iterate over the matches.
            </summary>
            <returns>A Regex.ValueMatchEnumerator to iterate over the matches.</returns>
        </member>
        <member name="M:Polyfills.Polyfill.EnumerateMatches(System.Text.RegularExpressions.Regex,System.ReadOnlySpan{System.Char},System.Int32)">
            <summary>
            Searches an input span for all occurrences of a regular expression and returns a Regex.ValueMatchEnumerator to iterate over the matches.
            </summary>
            <returns>A Regex.ValueMatchEnumerator to iterate over the matches.</returns>
        </member>
        <member name="M:Polyfills.RegexPolyfill.IsMatch(System.ReadOnlySpan{System.Char},System.String,System.Text.RegularExpressions.RegexOptions,System.TimeSpan)">
            <summary>
            Indicates whether the specified regular expression finds a match in the specified input span, using the specified matching options and time-out interval.
            </summary>
            <returns>true if the regular expression finds a match; otherwise, false.</returns>
        </member>
        <member name="M:Polyfills.RegexPolyfill.IsMatch(System.ReadOnlySpan{System.Char},System.String,System.Text.RegularExpressions.RegexOptions)">
            <summary>
            Indicates whether the specified regular expression finds a match in the specified input span, using the specified matching options.
            </summary>
            <returns>true if the regular expression finds a match; otherwise, false.</returns>
        </member>
        <member name="M:Polyfills.RegexPolyfill.IsMatch(System.ReadOnlySpan{System.Char},System.String)">
            <summary>
            Indicates whether the specified regular expression finds a match in the specified input span.
            </summary>
            <returns>true if the regular expression finds a match; otherwise, false.</returns>
        </member>
        <member name="M:Polyfills.RegexPolyfill.EnumerateMatches(System.ReadOnlySpan{System.Char},System.String)">
            <summary>
            Searches an input span for all occurrences of a regular expression and returns a Regex.ValueMatchEnumerator to iterate over the matches.
            </summary>
            <returns>A Regex.ValueMatchEnumerator to iterate over the matches.</returns>
        </member>
        <member name="M:Polyfills.RegexPolyfill.EnumerateMatches(System.ReadOnlySpan{System.Char},System.String,System.Text.RegularExpressions.RegexOptions,System.TimeSpan)">
            <summary>
            Searches an input span for all occurrences of a regular expression and returns a Regex.ValueMatchEnumerator to iterate over the matches.
            </summary>
            <returns>A Regex.ValueMatchEnumerator to iterate over the matches.</returns>
        </member>
        <member name="M:Polyfills.RegexPolyfill.EnumerateMatches(System.ReadOnlySpan{System.Char},System.String,System.Text.RegularExpressions.RegexOptions)">
            <summary>
            Searches an input span for all occurrences of a regular expression and returns a Regex.ValueMatchEnumerator to iterate over the matches.
            </summary>
            <returns>A Regex.ValueMatchEnumerator to iterate over the matches.</returns>
        </member>
        <member name="M:Polyfills.StringPolyfill.Join(System.Char,System.String[])">
            <summary>
            Concatenates an array of strings, using the specified separator between each member.
            </summary>
        </member>
        <member name="M:Polyfills.StringPolyfill.Join(System.Char,System.Object[])">
            <summary>
            Concatenates the string representations of an array of objects, using the specified separator between each member.
            </summary>
        </member>
        <member name="M:Polyfills.StringPolyfill.Join(System.Char,System.String[],System.Int32,System.Int32)">
            <summary>
            Concatenates the specified elements of a string array, using the specified separator between each element.
            </summary>
        </member>
        <member name="M:Polyfills.StringPolyfill.Join``1(System.Char,System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Concatenates the specified elements of a string array, using the specified separator between each element.
            </summary>
        </member>
        <member name="M:VerifyTests.VerifierSettings.UniqueForRuntime">
            <summary>
            Use the current runtime to make the test results unique.
            Used when a test produces different results based on runtime.
            </summary>
        </member>
        <member name="M:VerifyTests.VerifierSettings.UseSplitModeForUniqueDirectory">
            <summary>
            Use the current runtime to make the test results unique.
            Used when a test produces different results based on runtime.
            </summary>
        </member>
        <member name="M:VerifyTests.VerifierSettings.UniqueForTargetFramework">
            <summary>
            Use the current test assembly TargetFrameworkAttribute to make the test results unique.
            Used when a test produces different results based on TargetFramework.
            </summary>
        </member>
        <member name="M:VerifyTests.VerifierSettings.UniqueForTargetFrameworkAndVersion">
            <summary>
            Use the current test assembly TargetFrameworkAttribute name and version to make the test results unique.
            Used when a test produces different results based on TargetFramework and TargetFramework version.
            </summary>
        </member>
        <member name="M:VerifyTests.VerifierSettings.UniqueForAssemblyConfiguration">
            <summary>
            Use the current test assembly configuration (debug/release) to make the test results unique.
            Used when a test produces different results based on assembly configuration.
            </summary>
        </member>
        <member name="M:VerifyTests.VerifierSettings.UniqueForTargetFramework(System.Reflection.Assembly)">
            <summary>
            Use <paramref name="assembly" /> TargetFrameworkAttribute to make the test results unique.
            Used when a test produces different results based on TargetFramework.
            </summary>
        </member>
        <member name="M:VerifyTests.VerifierSettings.UniqueForTargetFrameworkAndVersion(System.Reflection.Assembly)">
            <summary>
            Use the <paramref name="assembly" /> TargetFrameworkAttribute name and version to make the test results unique.
            Used when a test produces different results based on TargetFramework and TargetFramework version.
            </summary>
        </member>
        <member name="M:VerifyTests.VerifierSettings.UniqueForAssemblyConfiguration(System.Reflection.Assembly)">
            <summary>
            Use the <paramref name="assembly" /> configuration (debug/release) to make the test results unique.
            Used when a test produces different results based on assembly configuration.
            </summary>
        </member>
        <member name="M:VerifyTests.VerifierSettings.UniqueForRuntimeAndVersion">
            <summary>
            Use the current runtime and runtime version to make the test results unique.
            Used when a test produces different results based on runtime and runtime version.
            </summary>
        </member>
        <member name="M:VerifyTests.VerifierSettings.UniqueForArchitecture">
            <summary>
            Use the current processor architecture (x86/x64/arm/arm64) to make the test results unique.
            Used when a test produces different results based on processor architecture.
            </summary>
        </member>
        <member name="M:VerifyTests.VerifierSettings.UniqueForOSPlatform">
            <summary>
            Use the operating system family (Linux/Windows/OSX) to make the test results unique.
            Used when a test produces different results based on operating system family.
            </summary>
        </member>
        <member name="M:VerifyTests.VerifierSettings.DisableRequireUniquePrefix">
            <summary>
            Allow multiple tests to map to the same snapshot file prefix.
            </summary>
        </member>
        <member name="M:VerifyTests.VerifierSettings.AddScrubber(System.String,System.Action{System.Text.StringBuilder},VerifyTests.ScrubberLocation)">
            <summary>
            Modify the resulting test content using custom code.
            </summary>
        </member>
        <member name="M:VerifyTests.VerifierSettings.AddScrubber(System.String,System.Action{System.Text.StringBuilder,VerifyTests.Counter},VerifyTests.ScrubberLocation)">
            <summary>
            Modify the resulting test content using custom code.
            </summary>
        </member>
        <member name="M:VerifyTests.VerifierSettings.ScrubLinesContaining(System.String,System.StringComparison,System.String[])">
            <summary>
            Remove any lines containing any of <paramref name="stringToMatch" /> from the test results.
            </summary>
        </member>
        <member name="M:VerifyTests.VerifierSettings.ScrubLinesContaining(System.String,System.StringComparison,VerifyTests.ScrubberLocation,System.String[])">
            <summary>
            Remove any lines containing any of <paramref name="stringToMatch" /> from the test results.
            </summary>
        </member>
        <member name="M:VerifyTests.VerifierSettings.ScrubLines(System.String,System.Func{System.String,System.Boolean},VerifyTests.ScrubberLocation)">
            <summary>
            Remove any lines matching <paramref name="removeLine" /> from the test results.
            </summary>
        </member>
        <member name="M:VerifyTests.VerifierSettings.ScrubEmptyLines(System.String,VerifyTests.ScrubberLocation)">
            <summary>
            Remove any lines containing only whitespace from the test results.
            </summary>
        </member>
        <member name="M:VerifyTests.VerifierSettings.ScrubInlineGuids(System.String,VerifyTests.ScrubberLocation)">
            <summary>
            Replace inline <see cref="T:System.Guid" />s with a placeholder.
            </summary>
        </member>
        <member name="M:VerifyTests.VerifierSettings.ScrubLinesWithReplace(System.String,System.Func{System.String,System.String},VerifyTests.ScrubberLocation)">
            <summary>
            Scrub lines with an optional replace.
            <paramref name="replaceLine" /> can return the input to ignore the line, or return a different string to replace it.
            </summary>
        </member>
        <member name="M:VerifyTests.VerifierSettings.ScrubLinesContaining(System.String,VerifyTests.ScrubberLocation,System.String[])">
            <summary>
            Remove any lines containing any of <paramref name="stringToMatch" /> from the test results.
            </summary>
        </member>
        <member name="M:VerifyTests.VerifierSettings.ScrubMachineName(System.String,VerifyTests.ScrubberLocation)">
            <summary>
            Remove the <see cref="P:System.Environment.MachineName" /> from the test results.
            </summary>
        </member>
        <member name="M:VerifyTests.VerifierSettings.ScrubUserName(System.String,VerifyTests.ScrubberLocation)">
            <summary>
            Remove the <see cref="P:System.Environment.UserName" /> from the test results.
            </summary>
        </member>
        <member name="M:VerifyTests.VerifierSettings.AddScrubber(System.Action{System.Text.StringBuilder},VerifyTests.ScrubberLocation)">
            <summary>
            Modify the resulting test content using custom code.
            </summary>
        </member>
        <member name="M:VerifyTests.VerifierSettings.AddScrubber(System.Action{System.Text.StringBuilder,VerifyTests.Counter},VerifyTests.ScrubberLocation)">
            <summary>
            Modify the resulting test content using custom code.
            </summary>
        </member>
        <member name="M:VerifyTests.VerifierSettings.ScrubLinesContaining(System.StringComparison,System.String[])">
            <summary>
            Remove any lines containing any of <paramref name="stringToMatch" /> from the test results.
            </summary>
        </member>
        <member name="M:VerifyTests.VerifierSettings.ScrubLinesContaining(System.StringComparison,VerifyTests.ScrubberLocation,System.String[])">
            <summary>
            Remove any lines containing any of <paramref name="stringToMatch" /> from the test results.
            </summary>
        </member>
        <member name="M:VerifyTests.VerifierSettings.ScrubLines(System.Func{System.String,System.Boolean},VerifyTests.ScrubberLocation)">
            <summary>
            Remove any lines matching <paramref name="removeLine" /> from the test results.
            </summary>
        </member>
        <member name="M:VerifyTests.VerifierSettings.ScrubEmptyLines(VerifyTests.ScrubberLocation)">
            <summary>
            Remove any lines containing only whitespace from the test results.
            </summary>
        </member>
        <member name="M:VerifyTests.VerifierSettings.DisableDateCounting">
            <summary>
            Disables counting of dates.
            </summary>
        </member>
        <member name="M:VerifyTests.VerifierSettings.ScrubInlineDateTimes(System.String,System.Globalization.CultureInfo,VerifyTests.ScrubberLocation)">
            <summary>
            Replace inline <see cref="T:System.DateTime" />s with a placeholder.
            </summary>
        </member>
        <member name="M:VerifyTests.VerifierSettings.ScrubInlineDateTimeOffsets(System.String,System.Globalization.CultureInfo,VerifyTests.ScrubberLocation)">
            <summary>
            Replace inline <see cref="T:System.DateTime" />s with a placeholder.
            </summary>
        </member>
        <member name="M:VerifyTests.VerifierSettings.ScrubInlineDates(System.String,System.Globalization.CultureInfo,VerifyTests.ScrubberLocation)">
            <summary>
            Replace inline <see cref="T:System.DateOnly" />s with a placeholder.
            </summary>
        </member>
        <member name="M:VerifyTests.VerifierSettings.ScrubInlineGuids(VerifyTests.ScrubberLocation)">
            <summary>
            Replace inline <see cref="T:System.Guid" />s with a placeholder.
            </summary>
        </member>
        <member name="M:VerifyTests.VerifierSettings.ScrubLinesWithReplace(System.Func{System.String,System.String},VerifyTests.ScrubberLocation)">
            <summary>
            Scrub lines with an optional replace.
            <paramref name="replaceLine" /> can return the input to ignore the line, or return a different string to replace it.
            </summary>
        </member>
        <member name="M:VerifyTests.VerifierSettings.ScrubLinesContaining(System.String[])">
            <summary>
            Remove any lines containing any of <paramref name="stringToMatch" /> from the test results.
            </summary>
        </member>
        <member name="M:VerifyTests.VerifierSettings.ScrubLinesContaining(VerifyTests.ScrubberLocation,System.String[])">
            <summary>
            Remove any lines containing any of <paramref name="stringToMatch" /> from the test results.
            </summary>
        </member>
        <member name="M:VerifyTests.VerifierSettings.ScrubMachineName(VerifyTests.ScrubberLocation)">
            <summary>
            Remove the <see cref="P:System.Environment.MachineName" /> from the test results.
            </summary>
        </member>
        <member name="M:VerifyTests.VerifierSettings.ScrubUserName(VerifyTests.ScrubberLocation)">
            <summary>
            Remove the <see cref="P:System.Environment.UserName" /> from the test results.
            </summary>
        </member>
        <member name="M:VerifyTests.VerifierSettings.AutoVerify(System.Boolean)">
            <summary>
            Automatically accept the results of all tests.
            </summary>
        </member>
        <member name="M:VerifyTests.VerifierSettings.AutoVerify(VerifyTests.GlobalAutoVerify,System.Boolean)">
            <summary>
            Automatically accept the results of all tests.
            </summary>
        </member>
        <member name="M:VerifyTests.VerifySettings.DisableDiff">
            <summary>
            Disable using a diff tool for this test
            </summary>
        </member>
        <member name="M:VerifyTests.VerifySettings.UseParameters``1(``0[])">
            <inheritdoc cref="M:VerifyTests.VerifySettings.UseParameters(System.Object[])"/>
        </member>
        <member name="M:VerifyTests.VerifySettings.UseParameters``1(``0)">
            <inheritdoc cref="M:VerifyTests.VerifySettings.UseParameters(System.Object[])"/>
        </member>
        <member name="M:VerifyTests.VerifySettings.UseParameters(System.Object[])">
             <summary>
             Define the parameter values being used by a parameterised (aka data driven) test.
            
             Scenarios:
            
             <list type="bullet">
               <item>Verify.Expecto: Does not currently support `UseParameters()`.</item>
               <item>Verify.Fixie: Automatically detects the method parameters via a custom ITestProject https://github.com/VerifyTests/Verify/blob/main/docs/parameterised.md#fixie.</item>
               <item>Verify.MSTest: Does not detect the parametrised arguments, as such `UseParameters()` is required.</item>
               <item>Verify.NUnit: Automatically detects the method parameters. So `UseParameters()` is not required unless using custom parameters.</item>
               <item>Verify.TUnit: Automatically detects the method parameters. So `UseParameters()` is not required unless using custom parameters.</item>
               <item>Verify.Xunit: Does not detect the parametrised arguments, as such `UseParameters()` is required.</item>
               <item>Verify.XunitV3: Automatically detects the method parameters for built in types (string, int, bool etc), but for complex types `UseParameters()` is required.</item>
             </list>
            
             In the scenarios where parameters are not automatically detected, an exception will be thrown instructing the potential need for <see cref="M:VerifyTests.VerifySettings.UseParameters(System.Object[])" />
             Not compatible with <see cref="M:VerifyTests.VerifySettings.UseTextForParameters(System.String)" />.
             </summary>
        </member>
        <member name="M:VerifyTests.VerifySettings.IgnoreParameters(System.String[])">
            <summary>
            Ignore parameters in 'verified' filename resulting in the same verified file for multiple testcases.
            Note that UseParameters has still been called for test frameworks that don't support automatic parameter detection and the 'received' files still contains the parameters.
            </summary>
            <param name="parameterNames">The names of the parameters to be ignored. When passing an empty list all parameters will be ignored.</param>
        </member>
        <member name="M:VerifyTests.VerifySettings.IgnoreParametersForVerified(System.Object[])">
            <summary>
            Ignore all parameters in 'verified' filename resulting in the same verified file for each testcase.
            Note that the 'received' files still contain the parameters.
            </summary>
            <param name="parameters">The parameters as you would have passed them to the UseParameters function.</param>
        </member>
        <member name="M:VerifyTests.VerifySettings.HashParameters">
            <summary>
            Hash parameters together and pass to <see cref="M:VerifyTests.VerifySettings.UseTextForParameters(System.String)" />.
            Used to get a deterministic file name while avoiding long paths.
            </summary>
        </member>
        <member name="M:VerifyTests.VerifySettings.UseHashedParameters(System.Object[])">
            <summary>
            Provide parameters to hash together and pass to <see cref="M:VerifyTests.VerifySettings.UseTextForParameters(System.String)" />.
            Used to get a deterministic file name while avoiding long paths.
            Combines <see cref="M:VerifyTests.VerifySettings.UseParameters(System.Object[])" /> and <see cref="M:VerifyTests.VerifySettings.HashParameters" />.
            </summary>
        </member>
        <member name="M:VerifyTests.VerifySettings.UniqueForRuntime">
            <summary>
            Use the current runtime to make the test results unique.
            Used when a test produces different results based on runtime.
            </summary>
        </member>
        <member name="M:VerifyTests.VerifySettings.UniqueForTargetFramework">
            <summary>
            Use the current test assembly TargetFrameworkAttribute to make the test results unique.
            Used when a test produces different results based on TargetFramework.
            </summary>
        </member>
        <member name="M:VerifyTests.VerifySettings.UniqueForTargetFrameworkAndVersion">
            <summary>
            Use the current test assembly TargetFrameworkAttribute name and version to make the test results unique.
            Used when a test produces different results based on TargetFramework and TargetFramework version.
            </summary>
        </member>
        <member name="M:VerifyTests.VerifySettings.UniqueForAssemblyConfiguration">
            <summary>
            Use the current test assembly configuration (debug/release) to make the test results unique.
            Used when a test produces different results based on assembly configuration.
            </summary>
        </member>
        <member name="M:VerifyTests.VerifySettings.UniqueForTargetFramework(System.Reflection.Assembly)">
            <summary>
            Use <paramref name="assembly" /> TargetFrameworkAttribute to make the test results unique.
            Used when a test produces different results based on TargetFramework.
            </summary>
        </member>
        <member name="M:VerifyTests.VerifySettings.UniqueForTargetFrameworkAndVersion(System.Reflection.Assembly)">
            <summary>
            Use the <paramref name="assembly" /> TargetFrameworkAttribute name and version to make the test results unique.
            Used when a test produces different results based on TargetFramework and TargetFramework version.
            </summary>
        </member>
        <member name="M:VerifyTests.VerifySettings.UniqueForAssemblyConfiguration(System.Reflection.Assembly)">
            <summary>
            Use the <paramref name="assembly" /> configuration (debug/release) to make the test results unique.
            Used when a test produces different results based on assembly configuration.
            </summary>
        </member>
        <member name="M:VerifyTests.VerifySettings.UseDirectory(System.String)">
            <summary>
            Use a custom directory for the test results.
            </summary>
        </member>
        <member name="M:VerifyTests.VerifySettings.UseTypeName(System.String)">
            <summary>
            Use a custom class name for the test results.
            Where the file format is `{CurrentDirectory}/{TestClassName}.{TestMethodName}_{Parameters}_{UniqueFor1}_{UniqueFor2}_{UniqueForX}.verified.{extension}`.
            </summary>
            <remarks>Not compatible with <see cref="M:VerifyTests.VerifySettings.UseFileName(System.String)" />.</remarks>
        </member>
        <member name="M:VerifyTests.VerifySettings.UseMethodName(System.String)">
            <summary>
            Use a custom method name for the test results.
            Where the file format is `{CurrentDirectory}/{TestClassName}.{TestMethodName}_{Parameters}_{UniqueFor1}_{UniqueFor2}_{UniqueForX}.verified.{extension}`.
            </summary>
            <remarks>Not compatible with <see cref="M:VerifyTests.VerifySettings.UseFileName(System.String)" />.</remarks>
        </member>
        <member name="M:VerifyTests.VerifySettings.UseFileName(System.String)">
            <summary>
            Use a file name for the test results.
            Overrides the `{TestClassName}.{TestMethodName}_{Parameters}` parts of the file naming.
            Where the new file format is `{CurrentDirectory}/{FileName}_{UniqueFor1}_{UniqueFor2}_{UniqueForX}.verified.{extension}`.
            </summary>
            <remarks>Not compatible with <see cref="M:VerifyTests.VerifySettings.UseTypeName(System.String)" />, <see cref="M:VerifyTests.VerifySettings.UseMethodName(System.String)" />, or <see cref="M:VerifyTests.VerifySettings.UseParameters(System.Object[])" />.</remarks>
        </member>
        <member name="M:VerifyTests.VerifySettings.UseUniqueDirectory">
            <summary>
            Use a directory for the test results.
            Where the file format is `{CurrentDirectory}/{TestClassName}.{TestMethodName}_{Parameters}_{UniqueFor1}_{UniqueFor2}_{UniqueForX}/{targetName}.verified.{extension}`.
            </summary>
        </member>
        <member name="M:VerifyTests.VerifySettings.UniqueForRuntimeAndVersion">
            <summary>
            Use the current runtime and runtime version to make the test results unique.
            Used when a test produces different results based on runtime and runtime version.
            </summary>
        </member>
        <member name="M:VerifyTests.VerifySettings.UniqueForArchitecture">
            <summary>
            Use the current processor architecture (x86/x64/arm/arm64) to make the test results unique.
            Used when a test produces different results based on processor architecture.
            </summary>
        </member>
        <member name="M:VerifyTests.VerifySettings.UniqueForOSPlatform">
            <summary>
            Use the operating system family (Linux/Windows/OSX) to make the test results unique.
            Used when a test produces different results based on operating system family.
            </summary>
        </member>
        <member name="M:VerifyTests.VerifySettings.DisableRequireUniquePrefix">
            <summary>
            Allow multiple tests to map to the same snapshot file prefix.
            </summary>
        </member>
        <member name="M:VerifyTests.VerifySettings.UseSplitModeForUniqueDirectory">
            <summary>
            Use the current runtime to make the test results unique.
            Used when a test produces different results based on runtime.
            </summary>
        </member>
        <member name="M:VerifyTests.VerifySettings.DontUseSplitModeForUniqueDirectory">
            <summary>
            Dont use the current runtime to make the test results unique.
            Overrides <see cref="M:VerifyTests.VerifierSettings.UseSplitModeForUniqueDirectory" />.
            </summary>
        </member>
        <member name="M:VerifyTests.VerifySettings.AddScrubber(System.String,System.Action{System.Text.StringBuilder},VerifyTests.ScrubberLocation)">
            <summary>
            Modify the resulting test content using custom code.
            </summary>
        </member>
        <member name="M:VerifyTests.VerifySettings.AddScrubber(System.String,System.Action{System.Text.StringBuilder,VerifyTests.Counter},VerifyTests.ScrubberLocation)">
            <summary>
            Modify the resulting test content using custom code.
            </summary>
        </member>
        <member name="M:VerifyTests.VerifySettings.ScrubMachineName(System.String,VerifyTests.ScrubberLocation)">
            <summary>
            Remove the <see cref="P:System.Environment.MachineName" /> from the test results.
            </summary>
        </member>
        <member name="M:VerifyTests.VerifySettings.ScrubUserName(System.String,VerifyTests.ScrubberLocation)">
            <summary>
            Remove the <see cref="P:System.Environment.UserName" /> from the test results.
            </summary>
        </member>
        <member name="M:VerifyTests.VerifySettings.ScrubLinesContaining(System.String,System.StringComparison,System.String[])">
            <summary>
            Remove any lines containing any of <paramref name="stringToMatch" /> from the test results.
            </summary>
        </member>
        <member name="M:VerifyTests.VerifySettings.ScrubLinesContaining(System.String,System.StringComparison,VerifyTests.ScrubberLocation,System.String[])">
            <summary>
            Remove any lines containing any of <paramref name="stringToMatch" /> from the test results.
            </summary>
        </member>
        <member name="M:VerifyTests.VerifySettings.ScrubInlineGuids(System.String,VerifyTests.ScrubberLocation)">
            <summary>
            Replace inline <see cref="T:System.Guid" />s with a placeholder.
            </summary>
        </member>
        <member name="M:VerifyTests.VerifySettings.ScrubLines(System.String,System.Func{System.String,System.Boolean},VerifyTests.ScrubberLocation)">
            <summary>
            Remove any lines matching <paramref name="removeLine" /> from the test results.
            </summary>
        </member>
        <member name="M:VerifyTests.VerifySettings.ScrubLinesWithReplace(System.String,System.Func{System.String,System.String},VerifyTests.ScrubberLocation)">
            <summary>
            Scrub lines with an optional replace.
            <paramref name="replaceLine" /> can return the input to ignore the line, or return a different string to replace it.
            </summary>
        </member>
        <member name="M:VerifyTests.VerifySettings.ScrubEmptyLines(System.String,VerifyTests.ScrubberLocation)">
            <summary>
            Remove any lines containing only whitespace from the test results.
            </summary>
        </member>
        <member name="M:VerifyTests.VerifySettings.ScrubLinesContaining(System.String,VerifyTests.ScrubberLocation,System.String[])">
            <summary>
            Remove any lines containing any of <paramref name="stringToMatch" /> from the test results.
            </summary>
        </member>
        <member name="M:VerifyTests.VerifySettings.ScrubMachineName(VerifyTests.ScrubberLocation)">
            <summary>
            Remove the <see cref="P:System.Environment.MachineName" /> from the test results.
            </summary>
        </member>
        <member name="M:VerifyTests.VerifySettings.ScrubUserName(VerifyTests.ScrubberLocation)">
            <summary>
            Remove the <see cref="P:System.Environment.UserName" /> from the test results.
            </summary>
        </member>
        <member name="M:VerifyTests.VerifySettings.AddScrubber(System.Action{System.Text.StringBuilder},VerifyTests.ScrubberLocation)">
            <summary>
            Modify the resulting test content using custom code.
            </summary>
        </member>
        <member name="M:VerifyTests.VerifySettings.AddScrubber(System.Action{System.Text.StringBuilder,VerifyTests.Counter},VerifyTests.ScrubberLocation)">
            <summary>
            Modify the resulting test content using custom code.
            </summary>
        </member>
        <member name="M:VerifyTests.VerifySettings.ScrubLinesContaining(System.StringComparison,System.String[])">
            <summary>
            Remove any lines containing any of <paramref name="stringToMatch" /> from the test results.
            </summary>
        </member>
        <member name="M:VerifyTests.VerifySettings.ScrubLinesContaining(System.StringComparison,VerifyTests.ScrubberLocation,System.String[])">
            <summary>
            Remove any lines containing any of <paramref name="stringToMatch" /> from the test results.
            </summary>
        </member>
        <member name="M:VerifyTests.VerifySettings.ScrubInlineGuids(VerifyTests.ScrubberLocation)">
            <summary>
            Replace inline <see cref="T:System.Guid" />s with a placeholder.
            </summary>
        </member>
        <member name="M:VerifyTests.VerifySettings.ScrubInlineDateTimes(System.String,System.Globalization.CultureInfo,VerifyTests.ScrubberLocation)">
            <summary>
            Replace inline <see cref="T:System.DateTime" />s with a placeholder.
            </summary>
        </member>
        <member name="M:VerifyTests.VerifySettings.ScrubInlineDateTimeOffsets(System.String,System.Globalization.CultureInfo,VerifyTests.ScrubberLocation)">
            <summary>
            Replace inline <see cref="T:System.DateTime" />s with a placeholder.
            </summary>
        </member>
        <member name="M:VerifyTests.VerifySettings.ScrubInlineDates(System.String,System.Globalization.CultureInfo,VerifyTests.ScrubberLocation)">
            <summary>
            Replace inline <see cref="T:System.DateOnly" />s with a placeholder.
            </summary>
        </member>
        <member name="M:VerifyTests.VerifySettings.ScrubLines(System.Func{System.String,System.Boolean},VerifyTests.ScrubberLocation)">
            <summary>
            Remove any lines matching <paramref name="removeLine" /> from the test results.
            </summary>
        </member>
        <member name="M:VerifyTests.VerifySettings.ScrubLinesWithReplace(System.Func{System.String,System.String},VerifyTests.ScrubberLocation)">
            <summary>
            Scrub lines with an optional replace.
            <paramref name="replaceLine" /> can return the input to ignore the line, or return a different string to replace it.
            </summary>
        </member>
        <member name="M:VerifyTests.VerifySettings.ScrubEmptyLines(VerifyTests.ScrubberLocation)">
            <summary>
            Remove any lines containing only whitespace from the test results.
            </summary>
        </member>
        <member name="M:VerifyTests.VerifySettings.ScrubLinesContaining(System.String[])">
            <summary>
            Remove any lines containing any of <paramref name="stringToMatch" /> from the test results.
            </summary>
        </member>
        <member name="M:VerifyTests.VerifySettings.ScrubLinesContaining(VerifyTests.ScrubberLocation,System.String[])">
            <summary>
            Remove any lines containing any of <paramref name="stringToMatch" /> from the test results.
            </summary>
        </member>
        <member name="M:VerifyTests.VerifySettings.AppendValue(System.String,System.Object)">
            <summary>
            Append a key-value pair to the serialized target.
            </summary>
        </member>
        <member name="M:VerifyTests.VerifySettings.AppendValues(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}})">
            <summary>
            Append key-value pairs to the serialized target.
            </summary>
        </member>
        <member name="M:VerifyTests.VerifySettings.AppendValues(System.Collections.Generic.KeyValuePair{System.String,System.Object}[])">
            <summary>
            Append key-value pairs to the serialized target.
            </summary>
        </member>
        <member name="P:VerifyTests.VerifySettings.Context">
            <summary>
            Allows extensions to Verify to pass config via <see cref="T:VerifyTests.VerifySettings" />.
            </summary>
        </member>
        <member name="M:VerifyTests.VerifySettings.UseTextForParameters(System.String)">
            <summary>
            Use a custom text for the `Parameters` part of the file name.
            Not compatible with <see cref="M:VerifyTests.VerifySettings.UseParameters(System.Object[])" />.
            Where the file format is `{CurrentDirectory}/{TestClassName}.{TestMethodName}_{Parameters}_{UniqueFor1}_{UniqueFor2}_{UniqueForX}.verified.{extension}`.
            </summary>
        </member>
        <member name="M:VerifyTests.VerifySettings.AutoVerify(System.Boolean)">
            <summary>
            Automatically accept the results of the current test.
            </summary>
        </member>
        <member name="M:VerifyTests.VerifySettings.AutoVerify(VerifyTests.AutoVerify,System.Boolean)">
            <summary>
            Automatically accept the results of the current test.
            </summary>
        </member>
        <member name="M:VerifyTests.SettingsTask.AppendValue(System.String,System.Object)">
            <summary>
            Append a key-value pair to the serialized target.
            </summary>
        </member>
        <member name="M:VerifyTests.SettingsTask.AppendValues(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}})">
            <summary>
            Append key-value pairs to the serialized target.
            </summary>
        </member>
        <member name="M:VerifyTests.SettingsTask.AppendValues(System.Collections.Generic.KeyValuePair{System.String,System.Object}[])">
            <summary>
            Append key-value pairs to the serialized target.
            </summary>
        </member>
        <member name="M:VerifyTests.SettingsTask.IgnoreParameters(System.String[])">
            <summary>
            Ignore parameters in 'verified' filename resulting in the same verified file for multiple testcases.
            Note that UseParameters has still been called for test frameworks that don't support automatic parameter detection and the 'received' files still contains the parameters.
            </summary>
            <param name="parameterNames">The names of the parameters to be ignored. When passing an empty list all parameters will be ignored.</param>
        </member>
        <member name="M:VerifyTests.SettingsTask.IgnoreParametersForVerified(System.Object[])">
            <summary>
            Ignore all parameters in 'verified' filename resulting in the same verified file for each testcase.
            Note that the 'received' files still contain the parameters.
            </summary>
            <param name="parameters">The parameters as you would have passed them to the UseParameters function.</param>
        </member>
        <member name="M:VerifyTests.SettingsTask.UseParameters(System.Object[])">
            <inheritdoc cref="M:VerifyTests.VerifySettings.UseParameters(System.Object[])"/>
        </member>
        <member name="M:VerifyTests.SettingsTask.UseParameters``1(``0)">
            <inheritdoc cref="M:VerifyTests.VerifySettings.UseParameters(System.Object[])"/>
        </member>
        <member name="M:VerifyTests.SettingsTask.UseParameters``1(``0[])">
            <inheritdoc cref="M:VerifyTests.VerifySettings.UseParameters(System.Object[])"/>
        </member>
        <member name="M:VerifyTests.SettingsTask.DisableDiff">
            <summary>
            Disable using a diff toll for this test
            </summary>
        </member>
        <member name="M:VerifyTests.SettingsTask.UniqueForRuntime">
            <summary>
            Use the current runtime to make the test results unique.
            Used when a test produces different results based on runtime.
            </summary>
        </member>
        <member name="M:VerifyTests.SettingsTask.UniqueForTargetFramework">
            <summary>
            Use the current test assembly TargetFrameworkAttribute to make the test results unique.
            Used when a test produces different results based on TargetFramework.
            </summary>
        </member>
        <member name="M:VerifyTests.SettingsTask.UniqueForTargetFrameworkAndVersion">
            <summary>
            Use the current test assembly TargetFrameworkAttribute name and version to make the test results unique.
            Used when a test produces different results based on TargetFramework and TargetFramework version.
            </summary>
        </member>
        <member name="M:VerifyTests.SettingsTask.UniqueForAssemblyConfiguration">
            <summary>
            Use the current test assembly configuration (debug/release) to make the test results unique.
            Used when a test produces different results based on assembly configuration.
            </summary>
        </member>
        <member name="M:VerifyTests.SettingsTask.UniqueForTargetFramework(System.Reflection.Assembly)">
            <summary>
            Use <paramref name="assembly" /> TargetFrameworkAttribute to make the test results unique.
            Used when a test produces different results based on TargetFramework.
            </summary>
        </member>
        <member name="M:VerifyTests.SettingsTask.UniqueForTargetFrameworkAndVersion(System.Reflection.Assembly)">
            <summary>
            Use the <paramref name="assembly" /> TargetFrameworkAttribute name and version to make the test results unique.
            Used when a test produces different results based on TargetFramework and TargetFramework version.
            </summary>
        </member>
        <member name="M:VerifyTests.SettingsTask.UniqueForAssemblyConfiguration(System.Reflection.Assembly)">
            <summary>
            Use the <paramref name="assembly" /> configuration (debug/release) to make the test results unique.
            Used when a test produces different results based on assembly configuration.
            </summary>
        </member>
        <member name="M:VerifyTests.SettingsTask.DisableRequireUniquePrefix">
            <summary>
            Allow multiple tests to map to the same snapshot file prefix.
            </summary>
        </member>
        <member name="M:VerifyTests.SettingsTask.UseMethodName(System.String)">
            <summary>
            Use a custom method name for the test results.
            Where the file format is `{CurrentDirectory}/{TestClassName}.{TestMethodName}_{Parameters}.{UniqueFor1}.{UniqueFor2}.{UniqueForX}.verified.{extension}`.
            </summary>
            <remarks>Not compatible with <see cref="M:VerifyTests.SettingsTask.UseFileName(System.String)" />.</remarks>
        </member>
        <member name="M:VerifyTests.SettingsTask.UseDirectory(System.String)">
            <summary>
            Use a custom directory for the test results.
            </summary>
        </member>
        <member name="M:VerifyTests.SettingsTask.UseFileName(System.String)">
            <summary>
            Use a file name for the test results.
            Overrides the `{TestClassName}.{TestMethodName}_{Parameters}` parts of the file naming.
            Where the new file format is `{CurrentDirectory}/{FileName}_{UniqueFor1}_{UniqueFor2}_{UniqueForX}.verified.{extension}`.
            </summary>
            <remarks>Not compatible with <see cref="M:VerifyTests.SettingsTask.UseTypeName(System.String)" />, <see cref="M:VerifyTests.SettingsTask.UseMethodName(System.String)" />, or <see cref="M:VerifyTests.SettingsTask.UseParameters(System.Object[])" />.</remarks>
        </member>
        <member name="M:VerifyTests.SettingsTask.UseUniqueDirectory">
            <summary>
            Use a directory for the test results.
            Where the file format is `{CurrentDirectory}/{TestClassName}.{TestMethodName}_{Parameters}_{UniqueFor1}_{UniqueFor2}_{UniqueForX}/{targetName}.verified.{extension}`.
            </summary>
        </member>
        <member name="M:VerifyTests.SettingsTask.UseTypeName(System.String)">
            <summary>
            Use a custom class name for the CurrentDirectory results.
            Where the file format is `{CurrentDirectory}/{TestClassName}.{TestMethodName}_{Parameters}.{UniqueFor1}.{UniqueFor2}.{UniqueForX}.verified.{extension}`.
            </summary>
            <remarks>Not compatible with <see cref="M:VerifyTests.SettingsTask.UseFileName(System.String)" />.</remarks>
        </member>
        <member name="M:VerifyTests.SettingsTask.UniqueForRuntimeAndVersion">
            <summary>
            Use the current runtime and runtime version to make the test results unique.
            Used when a test produces different results based on runtime and runtime version.
            </summary>
        </member>
        <member name="M:VerifyTests.SettingsTask.UseHashedParameters(System.Object[])">
            <summary>
            Provide parameters to hash together and pass to <see cref="M:VerifyTests.SettingsTask.UseTextForParameters(System.String)" />.
            Used to get a deterministic file name while avoiding long paths.
            Combines <see cref="M:VerifyTests.SettingsTask.UseParameters(System.Object[])" /> and <see cref="M:VerifyTests.SettingsTask.HashParameters" />.
            </summary>
        </member>
        <member name="M:VerifyTests.SettingsTask.HashParameters">
            <summary>
            Hash parameters together and pass to <see cref="M:VerifyTests.SettingsTask.UseTextForParameters(System.String)" />.
            Used to get a deterministic file name while avoiding long paths.
            </summary>
        </member>
        <member name="M:VerifyTests.SettingsTask.UniqueForArchitecture">
            <summary>
            Use the current processor architecture (x86/x64/arm/arm64) to make the test results unique.
            Used when a test produces different results based on processor architecture.
            </summary>
        </member>
        <member name="M:VerifyTests.SettingsTask.UniqueForOSPlatform">
            <summary>
            Use the operating system family (Linux/Windows/OSX) to make the test results unique.
            Used when a test produces different results based on operating system family.
            </summary>
        </member>
        <member name="M:VerifyTests.SettingsTask.AutoVerify(System.Boolean)">
            <summary>
            Automatically accept the results of the current test.
            </summary>
        </member>
        <member name="M:VerifyTests.SettingsTask.AutoVerify(VerifyTests.AutoVerify,System.Boolean)">
            <summary>
            Automatically accept the results of the current test.
            </summary>
        </member>
        <member name="M:VerifyTests.SettingsTask.UseTextForParameters(System.String)">
            <summary>
            Use a custom text for the `Parameters` part of the file name.
            Not compatible with <see cref="M:VerifyTests.SettingsTask.UseParameters(System.Object[])" />.
            Where the file format is `{CurrentDirectory}/{TestClassName}.{TestMethodName}_{Parameters}_{UniqueFor1}_{UniqueFor2}_{UniqueForX}.verified.{extension}`.
            </summary>
        </member>
        <member name="M:VerifyTests.SettingsTask.UseSplitModeForUniqueDirectory">
            <summary>
            Use the current runtime to make the test results unique.
            Used when a test produces different results based on runtime.
            </summary>
        </member>
        <member name="M:VerifyTests.SettingsTask.DontUseSplitModeForUniqueDirectory">
            <summary>
            Dont use the current runtime to make the test results unique.
            Overrides <see cref="M:VerifyTests.VerifierSettings.UseSplitModeForUniqueDirectory" />.
            </summary>
        </member>
        <member name="M:VerifyTests.SettingsTask.AddScrubber(System.Action{System.Text.StringBuilder},VerifyTests.ScrubberLocation)">
            <summary>
            Modify the resulting test content using custom code.
            </summary>
        </member>
        <member name="M:VerifyTests.SettingsTask.AddScrubber(System.String,System.Action{System.Text.StringBuilder},VerifyTests.ScrubberLocation)">
            <summary>
            Modify the resulting test content using custom code.
            </summary>
        </member>
        <member name="M:VerifyTests.SettingsTask.ScrubInlineGuids(VerifyTests.ScrubberLocation)">
            <summary>
            Replace inline <see cref="T:System.Guid" />s with a placeholder.
            </summary>
        </member>
        <member name="M:VerifyTests.SettingsTask.ScrubInlineGuids(System.String,VerifyTests.ScrubberLocation)">
            <summary>
            Replace inline <see cref="T:System.Guid" />s with a placeholder.
            </summary>
        </member>
        <member name="M:VerifyTests.SettingsTask.DisableDateCounting">
            <summary>
            Disables counting of dates.
            </summary>
        </member>
        <member name="M:VerifyTests.SettingsTask.ScrubInlineDateTimes(System.String,System.Globalization.CultureInfo,VerifyTests.ScrubberLocation)">
            <summary>
            Replace inline <see cref="T:System.DateTime" />s with a placeholder.
            </summary>
        </member>
        <member name="M:VerifyTests.SettingsTask.ScrubInlineDateTimeOffsets(System.String,System.Globalization.CultureInfo,VerifyTests.ScrubberLocation)">
            <summary>
            Replace inline <see cref="T:System.DateTime" />s with a placeholder.
            </summary>
        </member>
        <member name="M:VerifyTests.SettingsTask.ScrubInlineDates(System.String,System.Globalization.CultureInfo,VerifyTests.ScrubberLocation)">
            <summary>
            Replace inline <see cref="T:System.DateOnly" />s with a placeholder.
            </summary>
        </member>
        <member name="M:VerifyTests.SettingsTask.ScrubMachineName(VerifyTests.ScrubberLocation)">
            <summary>
            Remove the <see cref="P:System.Environment.MachineName" /> from the test results.
            </summary>
        </member>
        <member name="M:VerifyTests.SettingsTask.ScrubMachineName(System.String,VerifyTests.ScrubberLocation)">
            <summary>
            Remove the <see cref="P:System.Environment.MachineName" /> from the test results.
            </summary>
        </member>
        <member name="M:VerifyTests.SettingsTask.ScrubUserName(VerifyTests.ScrubberLocation)">
            <summary>
            Remove the <see cref="P:System.Environment.UserName" /> from the test results.
            </summary>
        </member>
        <member name="M:VerifyTests.SettingsTask.ScrubUserName(System.String,VerifyTests.ScrubberLocation)">
            <summary>
            Remove the <see cref="P:System.Environment.UserName" /> from the test results.
            </summary>
        </member>
        <member name="M:VerifyTests.SettingsTask.ScrubLinesContaining(System.StringComparison,System.String[])">
            <summary>
            Remove any lines containing any of <paramref name="stringToMatch" /> from the test results.
            </summary>
        </member>
        <member name="M:VerifyTests.SettingsTask.ScrubLinesContaining(System.String,System.StringComparison,System.String[])">
            <summary>
            Remove any lines containing any of <paramref name="stringToMatch" /> from the test results.
            </summary>
        </member>
        <member name="M:VerifyTests.SettingsTask.ScrubLinesContaining(System.StringComparison,VerifyTests.ScrubberLocation,System.String[])">
            <summary>
            Remove any lines containing any of <paramref name="stringToMatch" /> from the test results.
            </summary>
        </member>
        <member name="M:VerifyTests.SettingsTask.ScrubLinesContaining(System.String,System.StringComparison,VerifyTests.ScrubberLocation,System.String[])">
            <summary>
            Remove any lines containing any of <paramref name="stringToMatch" /> from the test results.
            </summary>
        </member>
        <member name="M:VerifyTests.SettingsTask.ScrubLines(System.Func{System.String,System.Boolean},VerifyTests.ScrubberLocation)">
            <summary>
            Remove any lines matching <paramref name="removeLine" /> from the test results.
            </summary>
        </member>
        <member name="M:VerifyTests.SettingsTask.ScrubLines(System.String,System.Func{System.String,System.Boolean},VerifyTests.ScrubberLocation)">
            <summary>
            Remove any lines matching <paramref name="removeLine" /> from the test results.
            </summary>
        </member>
        <member name="M:VerifyTests.SettingsTask.ScrubLinesWithReplace(System.Func{System.String,System.String},VerifyTests.ScrubberLocation)">
            <summary>
            Scrub lines with an optional replace.
            <paramref name="replaceLine" /> can return the input to ignore the line, or return a different string to replace it.
            </summary>
        </member>
        <member name="M:VerifyTests.SettingsTask.ScrubLinesWithReplace(System.String,System.Func{System.String,System.String},VerifyTests.ScrubberLocation)">
            <summary>
            Scrub lines with an optional replace.
            <paramref name="replaceLine" /> can return the input to ignore the line, or return a different string to replace it.
            </summary>
        </member>
        <member name="M:VerifyTests.SettingsTask.ScrubEmptyLines(VerifyTests.ScrubberLocation)">
            <summary>
            Remove any lines containing only whitespace from the test results.
            </summary>
        </member>
        <member name="M:VerifyTests.SettingsTask.ScrubEmptyLines(System.String,VerifyTests.ScrubberLocation)">
            <summary>
            Remove any lines containing only whitespace from the test results.
            </summary>
        </member>
        <member name="M:VerifyTests.SettingsTask.ScrubLinesContaining(System.String[])">
            <summary>
            Remove any lines containing any of <paramref name="stringToMatch" /> from the test results.
            </summary>
        </member>
        <member name="M:VerifyTests.SettingsTask.ScrubLinesContaining(VerifyTests.ScrubberLocation,System.String[])">
            <summary>
            Remove any lines containing any of <paramref name="stringToMatch" /> from the test results.
            </summary>
        </member>
        <member name="M:VerifyTests.SettingsTask.ScrubLinesContaining(System.String,VerifyTests.ScrubberLocation,System.String[])">
            <summary>
            Remove any lines containing any of <paramref name="stringToMatch" /> from the test results.
            </summary>
        </member>
        <member name="M:VerifyTests.VerifyJsonWriter.WriteMember``1(System.Object,``0,System.String,``0)">
            <summary>
            Writes a property name and value while respecting other custom serialization settings.
            </summary>
        </member>
        <member name="M:VerifyTests.VerifyJsonWriter.WriteMember(System.Object,System.Object,System.String)">
            <summary>
            Writes a property name and value while respecting other custom serialization settings.
            </summary>
        </member>
        <member name="M:VerifyTests.VerifyJsonWriter.Serialize(System.Object)">
            <summary>
            Convenience method that calls <see cref="P:VerifyTests.VerifyJsonWriter.Serializer" />.<see cref="M:Argon.JsonSerializer.Serialize(System.IO.TextWriter,System.Object)" /> passing in the writer instance and <paramref name="value" />
            </summary>
        </member>
        <member name="M:VerifyTests.StringBuilderExtensions.AppendLineN(System.Text.StringBuilder)">
            <summary>
            Appends a line with a `\n` as the newline character.
            </summary>
        </member>
        <member name="M:VerifyTests.StringBuilderExtensions.AppendLineN(System.Text.StringBuilder,System.String)">
            <summary>
            Appends a line with a `\n` as the newline character.
            </summary>
        </member>
        <member name="M:VerifyTests.StringBuilderExtensions.AppendLineN(System.Text.StringBuilder,System.ReadOnlySpan{System.Char})">
            <summary>
            Appends a line with a `\n` as the newline character.
            </summary>
        </member>
        <member name="M:VerifyTests.StringBuilderExtensions.AppendLineN(System.Text.StringBuilder,System.Text.StringBuilder)">
            <summary>
            Appends a line with a `\n` as the newline character.
            </summary>
        </member>
        <member name="M:VerifyTests.InnerVerifier.#ctor(System.String,VerifyTests.VerifySettings)">
            <summary>
            Initialize a new instance of the <see cref="T:VerifyTests.InnerVerifier" /> class for verifying the entire file (not just a specific type)
            </summary>
            <remarks>This constructor is used by 3rd party clients</remarks>
        </member>
        <member name="M:IoHelpers.ResolveDirectoryFromSourceFile(System.String)">
            <summary>
            Resolve directory path from a given source file path, this method will remap the path if the .dll was built on a
            system (e.g. Windows) and the tests are run on another one (e.g. Linux though WSL or docker)
            </summary>
        </member>
    </members>
</doc>
