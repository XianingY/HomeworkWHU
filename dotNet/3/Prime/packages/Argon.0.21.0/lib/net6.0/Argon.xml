<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Argon</name>
    </assembly>
    <members>
        <member name="M:System.Runtime.CompilerServices.CollectionBuilderAttribute.#ctor(System.Type,System.String)">
            <summary>Initialize the attribute to refer to the <paramref name="methodName"/> method on the <paramref name="builderType"/> type.</summary>
            <param name="builderType">The type of the builder to use to construct the collection.</param>
            <param name="methodName">The name of the method on the builder to use to construct the collection.</param>
            <remarks>
            <paramref name="methodName"/> must refer to a static method that accepts a single parameter of
            type <see cref="T:System.ReadOnlySpan`1"/> and returns an instance of the collection being built containing
            a copy of the data from that span.  In future releases of .NET, additional patterns may be supported.
            </remarks>
        </member>
        <member name="P:System.Runtime.CompilerServices.CollectionBuilderAttribute.BuilderType">
            <summary>Gets the type of the builder to use to construct the collection.</summary>
        </member>
        <member name="P:System.Runtime.CompilerServices.CollectionBuilderAttribute.MethodName">
            <summary>Gets the name of the method on the builder to use to construct the collection.</summary>
            <remarks>This should match the metadata name of the target method. For example, this might be ".ctor" if targeting the type's constructor.</remarks>
        </member>
        <member name="T:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute">
            <summary>
            Indicates that compiler support for a particular feature is required for the location where this attribute is applied.
            </summary>
        </member>
        <member name="M:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute.#ctor(System.String)">
            <summary>
            Initialize a new instance of <see cref="T:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute"/>
            </summary>
            <param name="featureName">The name of the required compiler feature.</param>
        </member>
        <member name="P:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute.FeatureName">
            <summary>
            The name of the compiler feature.
            </summary>
        </member>
        <member name="P:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute.IsOptional">
            <summary>
            If true, the compiler can choose to allow access to the location where this attribute is applied if it does not understand <see cref="P:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute.FeatureName"/>.
            </summary>
        </member>
        <member name="F:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute.RefStructs">
            <summary>
            The <see cref="P:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute.FeatureName"/> used for the ref structs C# feature.
            </summary>
        </member>
        <member name="F:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute.RequiredMembers">
            <summary>
            The <see cref="P:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute.FeatureName"/> used for the required members C# feature.
            </summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.DisableRuntimeMarshallingAttribute">
             <summary>
             Disables the built-in runtime managed/unmanaged marshalling subsystem for
             P/Invokes, Delegate types, and unmanaged function pointer invocations.
             </summary>
             <remarks>
             The built-in marshalling subsystem has some behaviors that cannot be changed due to
             backward-compatibility requirements. This attribute allows disabling the built-in
             subsystem and instead uses the following rules for P/Invokes, Delegates,
             and unmanaged function pointer invocations:
            
             - All value types that do not contain reference type fields recursively (<c>unmanaged</c> in C#) are blittable
             - Value types that recursively have any fields that have <c>[StructLayout(LayoutKind.Auto)]</c> are disallowed from interop.
             - All reference types are disallowed from usage in interop scenarios.
             - SetLastError support in P/Invokes is disabled.
             - varargs support is disabled.
             - LCIDConversionAttribute support is disabled.
             </remarks>
        </member>
        <member name="T:System.Runtime.CompilerServices.RequiredMemberAttribute">
            <summary>
            Specifies that a type has required members or that a member is required.
            </summary>
        </member>
        <member name="T:System.Runtime.Versioning.OSPlatformAttribute">
            <summary>
            Base type for all platform-specific API attributes.
            </summary>
        </member>
        <member name="T:System.Runtime.Versioning.ObsoletedOSPlatformAttribute">
            <summary>
            Marks APIs that were obsoleted in a given operating system version.
            </summary>
            <remarks>
            Primarily used by OS bindings to indicate APIs that should not be used anymore.
            </remarks>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.ConstantExpectedAttribute">
            <summary>
            Indicates that the specified method parameter expects a constant.
            </summary>
            <remarks>
            This can be used to inform tooling that a constant should be used as an argument for the annotated parameter.
            </remarks>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.ConstantExpectedAttribute.Min">
            <summary>
            Indicates the minimum bound of the expected constant, inclusive.
            </summary>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.ConstantExpectedAttribute.Max">
            <summary>
            Indicates the maximum bound of the expected constant, inclusive.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.ExperimentalAttribute">
            <summary>
            Indicates that a parameter captures the expression passed for another parameter as a string.
            </summary>
            <summary>
             Indicates that an API is experimental and it may change in the future.
            </summary>
            <remarks>
              This attribute allows call sites to be flagged with a diagnostic that indicates that an experimental
              feature is used. Authors can use this attribute to ship preview features in their assemblies.
            </remarks>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.ExperimentalAttribute.#ctor(System.String)">
            <summary>
             Initializes a new instance of the <see cref="T:System.Diagnostics.CodeAnalysis.ExperimentalAttribute"/> class, specifying the ID that the compiler will use
             when reporting a use of the API the attribute applies to.
            </summary>
            <param name="diagnosticId">The ID that the compiler will use when reporting a use of the API the attribute applies to.</param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.ExperimentalAttribute.DiagnosticId">
            <summary>
             Gets the ID that the compiler will use when reporting a use of the API the attribute applies to.
            </summary>
            <value>The unique diagnostic ID.</value>
            <remarks>
             The diagnostic ID is shown in build output for warnings and errors.
             <para>This property represents the unique ID that can be used to suppress the warnings or errors, if needed.</para>
            </remarks>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.ExperimentalAttribute.UrlFormat">
            <summary>
             Gets or sets the URL for corresponding documentation.
             The API accepts a format string instead of an actual URL, creating a generic URL that includes the diagnostic ID.
            </summary>
            <value>The format string that represents a URL to corresponding documentation.</value>
            <remarks>An example format string is <c>https://contoso.com/obsoletion-warnings/{0}</c>.</remarks>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.SetsRequiredMembersAttribute">
            <summary>
            Specifies that this constructor sets all required members for the current type, and callers
            do not need to set any required members themselves.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute">
            <summary>
            Specifies the syntax used in a string.</summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.#ctor(System.String)">
            <summary>
            Initializes the <see cref="T:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute"/> with the identifier of the syntax used.</summary>
            <param name="syntax">The syntax identifier.</param>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.#ctor(System.String,System.Object[])">
            <summary>
            Initializes the <see cref="T:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute"/> with the identifier of the syntax used.</summary>
            <param name="syntax">The syntax identifier.</param>
            <param name="arguments">Optional arguments associated with the specific syntax employed.</param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.Syntax">
            <summary>Gets the identifier of the syntax used.</summary>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.Arguments">
            <summary>Optional arguments associated with the specific syntax employed.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.CompositeFormat">
            <summary>The syntax identifier for strings containing composite formats for string formatting.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.DateOnlyFormat">
            <summary>The syntax identifier for strings containing date format specifiers.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.DateTimeFormat">
            <summary>The syntax identifier for strings containing date and time format specifiers.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.EnumFormat">
            <summary>The syntax identifier for strings containing <see cref="T:System.Enum"/> format specifiers.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.GuidFormat">
            <summary>The syntax identifier for strings containing <see cref="T:System.Guid"/> format specifiers.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.Json">
            <summary>The syntax identifier for strings containing JavaScript Object Notation (JSON).</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.NumericFormat">
            <summary>The syntax identifier for strings containing numeric format specifiers.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.Regex">
            <summary>The syntax identifier for strings containing regular expressions.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.TimeOnlyFormat">
            <summary>The syntax identifier for strings containing time format specifiers.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.TimeSpanFormat">
            <summary>The syntax identifier for strings containing <see cref="T:System.TimeSpan"/> format specifiers.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.Uri">
            <summary>The syntax identifier for strings containing URIs.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.Xml">
            <summary>The syntax identifier for strings containing XML.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.RequiresDynamicCodeAttribute">
            <summary>
            Indicates that the specified method requires the ability to generate new code at runtime,
            for example through <see cref="N:System.Reflection"/>.
            </summary>
            <remarks>
            This allows tools to understand which methods are unsafe to call when compiling ahead of time.
            </remarks>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.RequiresDynamicCodeAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Diagnostics.CodeAnalysis.RequiresDynamicCodeAttribute"/> class
            with the specified message.
            </summary>
            <param name="message">
            A message that contains information about the usage of dynamic code.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.RequiresDynamicCodeAttribute.Message">
            <summary>
            Gets a message that contains information about the usage of dynamic code.
            </summary>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.RequiresDynamicCodeAttribute.Url">
            <summary>
            Gets or sets an optional URL that contains more information about the method,
            why it requires dynamic code, and what options a consumer has to deal with it.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.UnscopedRefAttribute">
            <summary>
            Used to indicate a byref escapes and is not scoped.
            </summary>
            <remarks>
            <para>
            There are several cases where the C# compiler treats a <see langword="ref"/> as implicitly
            <see langword="scoped"/> - where the compiler does not allow the <see langword="ref"/> to escape the method.
            </para>
            <para>
            For example:
            <list type="number">
              <item><see langword="this"/> for <see langword="struct"/> instance methods.</item>
              <item><see langword="ref"/> parameters that refer to <see langword="ref"/> <see langword="struct"/> types.</item>
              <item><see langword="out"/> parameters.</item>
            </list>
            </para>
            <para>
            This attribute is used in those instances where the <see langword="ref"/> should be allowed to escape.
            </para>
            <para>
            Applying this attribute, in any form, has impact on consumers of the applicable API. It is necessary for
            API authors to understand the lifetime implications of applying this attribute and how it may impact their users.
            </para>
            </remarks>
        </member>
        <member name="T:System.Diagnostics.UnreachableException">
            <summary>
            Exception thrown when the program executes an instruction that was thought to be unreachable.
            </summary>
            <seealso href="https://learn.microsoft.com/en-us/dotnet/api/system.diagnostics.unreachableexception"/>
            <seealso href="https://source.dot.net/#System.Private.CoreLib/src/libraries/System.Private.CoreLib/src/System/Diagnostics/UnreachableException.cs"/>
        </member>
        <member name="M:System.Diagnostics.UnreachableException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Diagnostics.UnreachableException"/> class with the default error message.
            </summary>
        </member>
        <member name="M:System.Diagnostics.UnreachableException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Diagnostics.UnreachableException"/>
            class with a specified error message.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
        </member>
        <member name="M:System.Diagnostics.UnreachableException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Diagnostics.UnreachableException"/>
            class with a specified error message and a reference to the inner exception that is the cause of
            this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception.</param>
        </member>
        <member name="F:System.Text.RegularExpressions.RegexCache.DefaultMaxCacheSize">
            <summary>The default maximum number of items to store in the cache.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.RegexCache.MaxExamineOnDrop">
            <summary>The maximum number of cached items to examine when we need to replace an existing one in the cache with a new one.</summary>
            <remarks>This is a somewhat arbitrary value, chosen to be small but at least as large as DefaultMaxCacheSize.</remarks>
        </member>
        <member name="F:System.Text.RegularExpressions.RegexCache.s_lastAccessed">
            <summary>A read-through cache of one element, representing the most recently used regular expression.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.RegexCache.s_cacheDictionary">
            <summary>The thread-safe dictionary storing all the items in the cache.</summary>
            <remarks>
            The concurrency level is initialized to 1 as we're using our own global lock for all mutations, so we don't need ConcurrentDictionary's
            striped locking.  Capacity is initialized to 31, which is the same as (the private) ConcurrentDictionary.DefaultCapacity.
            </remarks>
        </member>
        <member name="F:System.Text.RegularExpressions.RegexCache.s_cacheList">
            <summary>A list of all the items in the cache.  Protected by <see cref="P:System.Text.RegularExpressions.RegexCache.SyncObj"/>.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.RegexCache.s_random">
            <summary>Random number generator used to examine a subset of items when we need to drop one from a large list.  Protected by <see cref="P:System.Text.RegularExpressions.RegexCache.SyncObj"/>.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.RegexCache.s_maxCacheSize">
            <summary>The current maximum number of items allowed in the cache.  This rarely changes.  Mostly protected by <see cref="P:System.Text.RegularExpressions.RegexCache.SyncObj"/>.</summary>
        </member>
        <member name="P:System.Text.RegularExpressions.RegexCache.SyncObj">
            <summary>Lock used to protect shared state on mutations.</summary>
        </member>
        <member name="P:System.Text.RegularExpressions.RegexCache.MaxCacheSize">
            <summary>Gets or sets the maximum size of the cache.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.RegexCache.Key">
            <summary>Used as a key for <see cref="T:System.Text.RegularExpressions.RegexCache.Node"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.RegexCache.Node">
            <summary>Node for a cached Regex instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.RegexCache.Node.#ctor(System.Text.RegularExpressions.RegexCache.Key,System.Text.RegularExpressions.Regex)">
            <summary>Node for a cached Regex instance.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.RegexCache.Node.Key">
            <summary>The key associated with this cached instance.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.RegexCache.Node.Regex">
            <summary>The cached Regex instance.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.RegexCache.Node.LastAccessStamp">
            <summary>A "time" stamp representing the approximate last access time for this Regex.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.ValueMatch">
            <summary>
            Represents the results from a single regular expression match.
            </summary>
            <remarks>
            The <see cref="T:System.Text.RegularExpressions.ValueMatch"/> type is immutable and has no public constructor. An instance of the <see cref="T:System.Text.RegularExpressions.ValueMatch"/> struct is returned by the
            <see cref="!:Regex.ValueMatchEnumerator.Current"/> method when iterating over the results from calling <see cref="!:Regex.EnumerateMatches(ReadOnlySpan&lt;char&gt;)"/>.
            </remarks>
        </member>
        <member name="M:System.Text.RegularExpressions.ValueMatch.#ctor(System.Int32,System.Int32)">
            <summary>
            Crates an instance of the <see cref="T:System.Text.RegularExpressions.ValueMatch"/> type based on the passed in <paramref name="index"/> and <paramref name="length"/>.
            </summary>
            <param name="index">The position in the original span where the first character of the captured sliced span is found.</param>
            <param name="length">The length of the captured sliced span.</param>
        </member>
        <member name="P:System.Text.RegularExpressions.ValueMatch.Index">
            <summary>
            Gets the position in the original span where the first character of the captured sliced span is found.
            </summary>
        </member>
        <member name="P:System.Text.RegularExpressions.ValueMatch.Length">
            <summary>
            Gets the length of the captured sliced span.
            </summary>
        </member>
        <member name="T:System.Text.RegularExpressions.ValueMatchEnumerator">
             <summary>
             Represents an enumerator containing the set of successful matches found by iteratively applying a regular expression pattern to the input span.
             </summary>
             <remarks>
             The enumerator has no public constructor. The <see cref="!:Regex.EnumerateMatches(ReadOnlySpan&lt;char&gt;)"/> method returns a <see cref="!:Regex.ValueMatchEnumerator"/>
             object.The enumerator will lazily iterate over zero or more <see cref="T:System.Text.RegularExpressions.ValueMatch"/> objects. If there is at least one successful match in the span, then
             <see cref="M:System.Text.RegularExpressions.ValueMatchEnumerator.MoveNext"/> returns <see langword="true"/> and <see cref="P:System.Text.RegularExpressions.ValueMatchEnumerator.Current"/> will contain the first <see cref="T:System.Text.RegularExpressions.ValueMatch"/>. If there are no successful matches,
             then <see cref="M:System.Text.RegularExpressions.ValueMatchEnumerator.MoveNext"/> returns <see langword="false"/> and <see cref="P:System.Text.RegularExpressions.ValueMatchEnumerator.Current"/> throws an <see cref="T:System.InvalidOperationException"/>.
            
             This type is a ref struct since it stores the input span as a field in order to be able to lazily iterate over it.
             </remarks>
        </member>
        <member name="M:System.Text.RegularExpressions.ValueMatchEnumerator.#ctor(System.Text.RegularExpressions.Regex,System.ReadOnlySpan{System.Char},System.Int32)">
            <summary>
            Creates an instance of the <see cref="T:System.Text.RegularExpressions.ValueMatchEnumerator"/> for the passed in <paramref name="regex"/> which iterates over <paramref name="input"/>.
            </summary>
            <param name="regex">The <see cref="T:System.Text.RegularExpressions.Regex"/> to use for finding matches.</param>
            <param name="input">The input span to iterate over.</param>
            <param name="startAt">The position where the engine should start looking for matches from.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.ValueMatchEnumerator.GetEnumerator">
            <summary>
            Provides an enumerator that iterates through the matches in the input span.
            </summary>
            <returns>A copy of this enumerator.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.ValueMatchEnumerator.MoveNext">
            <summary>
            Advances the enumerator to the next match in the span.
            </summary>
            <returns>
            <see langword="true"/> if the enumerator was successfully advanced to the next element; <see langword="false"/> if the enumerator cannot find additional matches.
            </returns>
        </member>
        <member name="P:System.Text.RegularExpressions.ValueMatchEnumerator.Current">
            <summary>
            Gets the <see cref="T:System.Text.RegularExpressions.ValueMatch"/> element at the current position of the enumerator.
            </summary>
            <exception cref="T:System.InvalidOperationException">Enumeration has either not started or has already finished.</exception>
        </member>
        <member name="M:EnumPolyfill.GetValues``1">
            <summary>
            Retrieves an array of the values of the constants in a specified enumeration type.
            </summary>
            <returns>An array that contains the values of the constants in TEnum.</returns>
        </member>
        <member name="M:EnumPolyfill.GetNames``1">
            <summary>
            Retrieves an array of the names of the constants in a specified enumeration type.
            </summary>
            <returns>A string array of the names of the constants in TEnum.</returns>
        </member>
        <member name="M:EnumPolyfill.Parse``1(System.String)">
            <summary>
            Converts the string representation of the name or numeric value of one or more enumerated constants specified by TEnum to an equivalent enumerated object.
            </summary>
        </member>
        <member name="M:EnumPolyfill.Parse``1(System.String,System.Boolean)">
            <summary>
            Converts the string representation of the name or numeric value of one or more enumerated constants specified by TEnum to an equivalent enumerated object.
            </summary>
        </member>
        <member name="M:EnumPolyfill.Parse``1(System.ReadOnlySpan{System.Char})">
            <summary>
            Converts the span of characters representation of the name or numeric value of one or more enumerated constants specified by TEnum to an equivalent enumerated object.
            </summary>
        </member>
        <member name="M:EnumPolyfill.Parse``1(System.ReadOnlySpan{System.Char},System.Boolean)">
            <summary>
            Converts the span of characters representation of the name or numeric value of one or more enumerated constants specified by TEnum to an equivalent enumerated object.
            </summary>
        </member>
        <member name="M:EnumPolyfill.TryParse``1(System.ReadOnlySpan{System.Char},``0@)">
            <summary>
            Converts the string representation of the name or numeric value of one or more enumerated constants to an equivalent enumerated object.
            </summary>
        </member>
        <member name="M:EnumPolyfill.TryParse``1(System.ReadOnlySpan{System.Char},System.Boolean,``0@)">
            <summary>
            Converts the string representation of the name or numeric value of one or more enumerated constants to an equivalent enumerated object. A parameter specifies whether the operation is case-sensitive. The return value indicates whether the conversion succeeded.
            </summary>
        </member>
        <member name="M:GuidPolyfill.TryParse(System.String,System.IFormatProvider,System.Guid@)">
            <summary>
            Tries to parse a string into a value.
            </summary>
        </member>
        <member name="M:GuidPolyfill.TryParse(System.ReadOnlySpan{System.Byte},System.IFormatProvider,System.Byte@)">
            <summary>
            Tries to parse a span of UTF-8 characters into a value.
            </summary>
        </member>
        <member name="M:BytePolyfill.TryParse(System.String,System.IFormatProvider,System.Byte@)">
            <summary>
            Tries to parse a string into a value.
            </summary>
        </member>
        <member name="M:BytePolyfill.TryParse(System.ReadOnlySpan{System.Byte},System.IFormatProvider,System.Byte@)">
            <summary>
            Tries to parse a span of UTF-8 characters into a value.
            </summary>
        </member>
        <member name="M:BytePolyfill.TryParse(System.ReadOnlySpan{System.Char},System.Byte@)">
            <summary>
            Converts the span representation of a number in a specified style and culture-specific format to its byte equivalent. A return value indicates whether the conversion succeeded.
            </summary>
        </member>
        <member name="M:BytePolyfill.TryParse(System.ReadOnlySpan{System.Char},System.IFormatProvider,System.Byte@)">
            <summary>
            Tries to parse a span of characters into a value.
            </summary>
        </member>
        <member name="M:BytePolyfill.TryParse(System.ReadOnlySpan{System.Byte},System.Globalization.NumberStyles,System.IFormatProvider,System.Byte@)">
            <summary>
            Tries to parse a span of UTF-8 characters into a value.
            </summary>
        </member>
        <member name="M:BytePolyfill.TryParse(System.ReadOnlySpan{System.Byte},System.Byte@)">
            <summary>
            Tries to convert a UTF-8 character span containing the string representation of a number to its byte equivalent.
            </summary>
        </member>
        <member name="M:BytePolyfill.TryParse(System.ReadOnlySpan{System.Char},System.Globalization.NumberStyles,System.IFormatProvider,System.Byte@)">
            <summary>
            Converts the span representation of a number in a specified style and culture-specific format to its byte equivalent. A return value indicates whether the conversion succeeded.
            </summary>
        </member>
        <member name="M:DoublePolyfill.TryParse(System.String,System.IFormatProvider,System.Double@)">
            <summary>
            Tries to parse a string into a value.
            </summary>
        </member>
        <member name="M:DoublePolyfill.TryParse(System.ReadOnlySpan{System.Byte},System.IFormatProvider,System.Double@)">
            <summary>
            Tries to parse a span of UTF-8 characters into a value.
            </summary>
        </member>
        <member name="M:DoublePolyfill.TryParse(System.ReadOnlySpan{System.Char},System.Double@)">
            <summary>
            Converts the span representation of a number in a specified style and culture-specific format to its double-precision floating-point number equivalent. A return value indicates whether the conversion succeeded or failed.
            </summary>
        </member>
        <member name="M:DoublePolyfill.TryParse(System.ReadOnlySpan{System.Char},System.IFormatProvider,System.Double@)">
            <summary>
            Tries to parse a span of characters into a value.
            </summary>
        </member>
        <member name="M:DoublePolyfill.TryParse(System.ReadOnlySpan{System.Byte},System.Globalization.NumberStyles,System.IFormatProvider,System.Double@)">
            <summary>
            Tries to parse a span of UTF-8 characters into a value.
            </summary>
        </member>
        <member name="M:DoublePolyfill.TryParse(System.ReadOnlySpan{System.Byte},System.Double@)">
            <summary>
            Tries to convert a UTF-8 character span containing the string representation of a number to its double-precision floating-point number equivalent..
            </summary>
        </member>
        <member name="M:DoublePolyfill.TryParse(System.ReadOnlySpan{System.Char},System.Globalization.NumberStyles,System.IFormatProvider,System.Double@)">
            <summary>
            Converts the string representation of a number in a specified style and culture-specific format to its double-precision floating-point number equivalent. A return value indicates whether the conversion succeeded or failed.
            </summary>
        </member>
        <member name="M:IntPolyfill.TryParse(System.String,System.IFormatProvider,System.Int32@)">
            <summary>
            Tries to parse a string into a value.
            </summary>
        </member>
        <member name="M:IntPolyfill.TryParse(System.ReadOnlySpan{System.Byte},System.IFormatProvider,System.Int32@)">
            <summary>
            Tries to parse a span of UTF-8 characters into a value.
            </summary>
        </member>
        <member name="M:IntPolyfill.TryParse(System.ReadOnlySpan{System.Char},System.Int32@)">
            <summary>
            Converts the span representation of a number in a specified style and culture-specific format to its 32-bit signed integer equivalent. A return value indicates whether the conversion succeeded.
            </summary>
        </member>
        <member name="M:IntPolyfill.TryParse(System.ReadOnlySpan{System.Char},System.IFormatProvider,System.Int32@)">
            <summary>
            Tries to parse a span of characters into a value.
            </summary>
        </member>
        <member name="M:IntPolyfill.TryParse(System.ReadOnlySpan{System.Byte},System.Globalization.NumberStyles,System.IFormatProvider,System.Int32@)">
            <summary>
            Tries to parse a span of UTF-8 characters into a value.
            </summary>
        </member>
        <member name="M:IntPolyfill.TryParse(System.ReadOnlySpan{System.Byte},System.Int32@)">
            <summary>
            Tries to convert a UTF-8 character span containing the string representation of a number to its 32-bit signed integer equivalent.
            </summary>
        </member>
        <member name="M:IntPolyfill.TryParse(System.ReadOnlySpan{System.Char},System.Globalization.NumberStyles,System.IFormatProvider,System.Int32@)">
            <summary>
            Converts the span representation of a number in a specified style and culture-specific format to its 32-bit signed integer equivalent. A return value indicates whether the conversion succeeded.
            </summary>
        </member>
        <member name="M:LongPolyfill.TryParse(System.String,System.IFormatProvider,System.Int32@)">
            <summary>
            Tries to parse a string into a value.
            </summary>
        </member>
        <member name="M:LongPolyfill.TryParse(System.ReadOnlySpan{System.Byte},System.IFormatProvider,System.Int32@)">
            <summary>
            Tries to parse a span of UTF-8 characters into a value.
            </summary>
        </member>
        <member name="M:LongPolyfill.TryParse(System.ReadOnlySpan{System.Char},System.Int32@)">
            <summary>
            Converts the span representation of a number in a specified style and culture-specific format to its 32-bit signed integer equivalent. A return value indicates whether the conversion succeeded.
            </summary>
        </member>
        <member name="M:LongPolyfill.TryParse(System.ReadOnlySpan{System.Char},System.IFormatProvider,System.Int32@)">
            <summary>
            Tries to parse a span of characters into a value.
            </summary>
        </member>
        <member name="M:LongPolyfill.TryParse(System.ReadOnlySpan{System.Byte},System.Globalization.NumberStyles,System.IFormatProvider,System.Int32@)">
            <summary>
            Tries to parse a span of UTF-8 characters into a value.
            </summary>
        </member>
        <member name="M:LongPolyfill.TryParse(System.ReadOnlySpan{System.Byte},System.Int32@)">
            <summary>
            Tries to convert a UTF-8 character span containing the string representation of a number to its 64-bit signed integer equivalent.
            </summary>
        </member>
        <member name="M:LongPolyfill.TryParse(System.ReadOnlySpan{System.Char},System.Globalization.NumberStyles,System.IFormatProvider,System.Int32@)">
            <summary>
            Converts the span representation of a number in a specified style and culture-specific format to its 64-bit signed integer equivalent. A return value indicates whether the conversion succeeded.
            </summary>
        </member>
        <member name="M:SBytePolyfill.TryParse(System.String,System.IFormatProvider,System.SByte@)">
            <summary>
            Tries to parse a string into a value.
            </summary>
        </member>
        <member name="M:SBytePolyfill.TryParse(System.ReadOnlySpan{System.Byte},System.IFormatProvider,System.SByte@)">
            <summary>
            Tries to parse a span of UTF-8 characters into a value.
            </summary>
        </member>
        <member name="M:SBytePolyfill.TryParse(System.ReadOnlySpan{System.Char},System.SByte@)">
            <summary>
            Converts the span representation of a number in a specified style and culture-specific format to its sbyte equivalent. A return value indicates whether the conversion succeeded.
            </summary>
        </member>
        <member name="M:SBytePolyfill.TryParse(System.ReadOnlySpan{System.Char},System.IFormatProvider,System.SByte@)">
            <summary>
            Tries to parse a span of characters into a value.
            </summary>
        </member>
        <member name="M:SBytePolyfill.TryParse(System.ReadOnlySpan{System.Byte},System.Globalization.NumberStyles,System.IFormatProvider,System.SByte@)">
            <summary>
            Tries to parse a span of UTF-8 characters into a value.
            </summary>
        </member>
        <member name="M:SBytePolyfill.TryParse(System.ReadOnlySpan{System.Byte},System.SByte@)">
            <summary>
            Tries to convert a UTF-8 character span containing the string representation of a number to its sbyte equivalent.
            </summary>
        </member>
        <member name="M:SBytePolyfill.TryParse(System.ReadOnlySpan{System.Char},System.Globalization.NumberStyles,System.IFormatProvider,System.SByte@)">
            <summary>
            Converts the span representation of a number in a specified style and culture-specific format to its sbyte equivalent. A return value indicates whether the conversion succeeded.
            </summary>
        </member>
        <member name="M:ShortPolyfill.TryParse(System.String,System.IFormatProvider,System.Int16@)">
            <summary>
            Tries to parse a string into a value.
            </summary>
        </member>
        <member name="M:ShortPolyfill.TryParse(System.ReadOnlySpan{System.Byte},System.IFormatProvider,System.Int16@)">
            <summary>
            Tries to parse a span of UTF-8 characters into a value.
            </summary>
        </member>
        <member name="M:ShortPolyfill.TryParse(System.ReadOnlySpan{System.Char},System.Int16@)">
            <summary>
            Converts the span representation of a number in a specified style and culture-specific format to its short equivalent. A return value indicates whether the conversion succeeded.
            </summary>
        </member>
        <member name="M:ShortPolyfill.TryParse(System.ReadOnlySpan{System.Char},System.IFormatProvider,System.Int16@)">
            <summary>
            Tries to parse a span of characters into a value.
            </summary>
        </member>
        <member name="M:ShortPolyfill.TryParse(System.ReadOnlySpan{System.Byte},System.Globalization.NumberStyles,System.IFormatProvider,System.Int16@)">
            <summary>
            Tries to parse a span of UTF-8 characters into a value.
            </summary>
        </member>
        <member name="M:ShortPolyfill.TryParse(System.ReadOnlySpan{System.Byte},System.Int16@)">
            <summary>
            Tries to convert a UTF-8 character span containing the string representation of a number to its short equivalent.
            </summary>
        </member>
        <member name="M:ShortPolyfill.TryParse(System.ReadOnlySpan{System.Char},System.Globalization.NumberStyles,System.IFormatProvider,System.Int16@)">
            <summary>
            Converts the span representation of a number in a specified style and culture-specific format to its short equivalent. A return value indicates whether the conversion succeeded.
            </summary>
        </member>
        <member name="M:UIntPolyfill.TryParse(System.String,System.IFormatProvider,System.UInt32@)">
            <summary>
            Tries to parse a string into a value.
            </summary>
        </member>
        <member name="M:UIntPolyfill.TryParse(System.ReadOnlySpan{System.Byte},System.IFormatProvider,System.UInt32@)">
            <summary>
            Tries to parse a span of UTF-8 characters into a value.
            </summary>
        </member>
        <member name="M:UIntPolyfill.TryParse(System.ReadOnlySpan{System.Char},System.UInt32@)">
            <summary>
            Converts the span representation of a number in a specified style and culture-specific format to its uint equivalent. A return value indicates whether the conversion succeeded.
            </summary>
        </member>
        <member name="M:UIntPolyfill.TryParse(System.ReadOnlySpan{System.Char},System.IFormatProvider,System.UInt32@)">
            <summary>
            Tries to parse a span of characters into a value.
            </summary>
        </member>
        <member name="M:UIntPolyfill.TryParse(System.ReadOnlySpan{System.Byte},System.Globalization.NumberStyles,System.IFormatProvider,System.UInt32@)">
            <summary>
            Tries to parse a span of UTF-8 characters into a value.
            </summary>
        </member>
        <member name="M:UIntPolyfill.TryParse(System.ReadOnlySpan{System.Byte},System.UInt32@)">
            <summary>
            Tries to convert a UTF-8 character span containing the string representation of a number to its uint equivalent.
            </summary>
        </member>
        <member name="M:UIntPolyfill.TryParse(System.ReadOnlySpan{System.Char},System.Globalization.NumberStyles,System.IFormatProvider,System.UInt32@)">
            <summary>
            Converts the span representation of a number in a specified style and culture-specific format to its uint equivalent. A return value indicates whether the conversion succeeded.
            </summary>
        </member>
        <member name="M:ULongPolyfill.TryParse(System.String,System.IFormatProvider,System.UInt64@)">
            <summary>
            Tries to parse a string into a value.
            </summary>
        </member>
        <member name="M:ULongPolyfill.TryParse(System.ReadOnlySpan{System.Byte},System.IFormatProvider,System.UInt64@)">
            <summary>
            Tries to parse a span of UTF-8 characters into a value.
            </summary>
        </member>
        <member name="M:ULongPolyfill.TryParse(System.ReadOnlySpan{System.Char},System.UInt64@)">
            <summary>
            Converts the span representation of a number in a specified style and culture-specific format to its ulong equivalent. A return value indicates whether the conversion succeeded.
            </summary>
        </member>
        <member name="M:ULongPolyfill.TryParse(System.ReadOnlySpan{System.Char},System.IFormatProvider,System.UInt64@)">
            <summary>
            Tries to parse a span of characters into a value.
            </summary>
        </member>
        <member name="M:ULongPolyfill.TryParse(System.ReadOnlySpan{System.Byte},System.Globalization.NumberStyles,System.IFormatProvider,System.UInt64@)">
            <summary>
            Tries to parse a span of UTF-8 characters into a value.
            </summary>
        </member>
        <member name="M:ULongPolyfill.TryParse(System.ReadOnlySpan{System.Byte},System.UInt64@)">
            <summary>
            Tries to convert a UTF-8 character span containing the string representation of a number to its ulong equivalent.
            </summary>
        </member>
        <member name="M:ULongPolyfill.TryParse(System.ReadOnlySpan{System.Char},System.Globalization.NumberStyles,System.IFormatProvider,System.UInt64@)">
            <summary>
            Converts the span representation of a number in a specified style and culture-specific format to its ulong equivalent. A return value indicates whether the conversion succeeded.
            </summary>
        </member>
        <member name="M:UShortPolyfill.TryParse(System.String,System.IFormatProvider,System.UInt16@)">
            <summary>
            Tries to parse a string into a value.
            </summary>
        </member>
        <member name="M:UShortPolyfill.TryParse(System.ReadOnlySpan{System.Byte},System.IFormatProvider,System.UInt16@)">
            <summary>
            Tries to parse a span of UTF-8 characters into a value.
            </summary>
        </member>
        <member name="M:UShortPolyfill.TryParse(System.ReadOnlySpan{System.Char},System.UInt16@)">
            <summary>
            Converts the span representation of a number in a specified style and culture-specific format to its ushort equivalent. A return value indicates whether the conversion succeeded.
            </summary>
        </member>
        <member name="M:UShortPolyfill.TryParse(System.ReadOnlySpan{System.Char},System.IFormatProvider,System.UInt16@)">
            <summary>
            Tries to parse a span of characters into a value.
            </summary>
        </member>
        <member name="M:UShortPolyfill.TryParse(System.ReadOnlySpan{System.Byte},System.Globalization.NumberStyles,System.IFormatProvider,System.UInt16@)">
            <summary>
            Tries to parse a span of UTF-8 characters into a value.
            </summary>
        </member>
        <member name="M:UShortPolyfill.TryParse(System.ReadOnlySpan{System.Byte},System.UInt16@)">
            <summary>
            Tries to convert a UTF-8 character span containing the string representation of a number to its ushort equivalent.
            </summary>
        </member>
        <member name="M:UShortPolyfill.TryParse(System.ReadOnlySpan{System.Char},System.Globalization.NumberStyles,System.IFormatProvider,System.UInt16@)">
            <summary>
            Converts the span representation of a number in a specified style and culture-specific format to its ushort equivalent. A return value indicates whether the conversion succeeded.
            </summary>
        </member>
        <member name="M:Polyfill.CancelAsync(System.Threading.CancellationTokenSource)">
            <summary>Communicates a request for cancellation asynchronously.</summary>
            <remarks>
            <para>
            The associated <see cref="T:System.Threading.CancellationToken" /> will be notified of the cancellation
            and will synchronously transition to a state where <see cref="P:System.Threading.CancellationToken.IsCancellationRequested"/> returns true.
            Any callbacks or cancelable operations registered with the <see cref="T:System.Threading.CancellationToken"/>  will be executed asynchronously,
            with the returned <see cref="T:System.Threading.Tasks.Task"/> representing their eventual completion.
            </para>
            <para>
            Callbacks registered with the token should not throw exceptions.
            However, any such exceptions that are thrown will be aggregated into an <see cref="T:System.AggregateException"/>,
            such that one callback throwing an exception will not prevent other registered callbacks from being executed.
            </para>
            <para>
            The <see cref="T:System.Threading.ExecutionContext"/> that was captured when each callback was registered
            will be reestablished when the callback is invoked.
            </para>
            </remarks>
            <exception cref="T:System.ObjectDisposedException">This <see cref="T:System.Threading.CancellationTokenSource"/> has been disposed.</exception>
        </member>
        <member name="M:Polyfill.AsReadOnly``2(System.Collections.Generic.IDictionary{``0,``1})">
            <summary>
            Returns a read-only <see cref="T:System.Collections.ObjectModel.ReadOnlyDictionary`2"/> wrapper for the current dictionary.
            </summary>
            <typeparam name="TKey">The type of keys in the dictionary.</typeparam>
            <typeparam name="TValue">The type of values in the dictionary.</typeparam>
            <param name="dictionary">The dictionary to wrap.</param>
            <returns>An object that acts as a read-only wrapper around the current <see cref="T:System.Collections.Generic.IDictionary`2"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="dictionary"/> is null.</exception>
        </member>
        <member name="M:Polyfill.Index``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            https://learn.microsoft.com/en-us/dotnet/core/whats-new/dotnet-9/overview#linq
            </summary>
        </member>
        <member name="M:Polyfill.AggregateBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},``2,System.Func{``2,``0,``2},System.Collections.Generic.IEqualityComparer{``1})">
            <summary>
            https://learn.microsoft.com/en-us/dotnet/core/whats-new/dotnet-9/overview#linq
            </summary>
        </member>
        <member name="M:Polyfill.AggregateBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,``2},System.Func{``2,``0,``2},System.Collections.Generic.IEqualityComparer{``1})">
            <summary>
            https://learn.microsoft.com/en-us/dotnet/core/whats-new/dotnet-9/overview#linq
            </summary>
        </member>
        <member name="M:Polyfill.CountBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
            <summary>
            https://learn.microsoft.com/en-us/dotnet/core/whats-new/dotnet-9/overview#linq
            </summary>
        </member>
        <member name="M:Polyfill.Except``1(System.Collections.Generic.IEnumerable{``0},``0)">
            <summary>
            Produces a set items excluding <paramref name="item"/> by using the default equality comparer to compare values.
            </summary>
            <param name="target">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> whose elements that are not equal to <paramref name="item"/> will be returned.</param>
            <param name="item">An <see cref="!:TSource"/> that is elements equal it will cause those elements to be removed from the returned sequence.</param>
            <typeparam name="TSource">The type of the elements of <paramref name="target" />.</typeparam>
            <returns>A sequence that contains the items of <paramref name="target"/> but excluding <paramref name="item"/>.</returns>
        </member>
        <member name="M:Polyfill.Except``1(System.Collections.Generic.IEnumerable{``0},``0[])">
            <summary>
            Produces the set difference of two sequences by using the default equality comparer to compare values.
            </summary>
            <param name="target">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> whose elements that are not equal to <paramref name="item"/> will be returned.</param>
            <param name="item">An <see cref="!:TSource"/> that is elements equal it will cause those elements to be removed from the returned sequence.</param>
            <typeparam name="TSource">The type of the elements of <paramref name="target" />.</typeparam>
            <returns>A sequence that contains the items of <paramref name="target"/> but excluding <paramref name="item"/>.</returns>
        </member>
        <member name="M:Polyfill.Except``1(System.Collections.Generic.IEnumerable{``0},``0,System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Produces a set items excluding <paramref name="item"/> by using <paramref name="comparer"/> to compare values.
            </summary>
            <param name="target">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> whose elements that are not equal to <paramref name="item"/> will be returned.</param>
            <param name="item">An <see cref="!:TSource"/> that is elements equal it will cause those elements to be removed from the returned sequence.</param>
            <param name="comparer">An <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> to compare values.</param>
            <typeparam name="TSource">The type of the elements of <paramref name="target" />.</typeparam>
            <returns>A sequence that contains the items of <paramref name="target"/> but excluding <paramref name="item"/>.</returns>
        </member>
        <member name="M:Polyfill.Except``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0},``0[])">
            <summary>
            Produces the set difference of two sequences by <paramref name="comparer"/> to compare values.
            </summary>
            <param name="target">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> whose elements that are not equal to <paramref name="item"/> will be returned.</param>
            <param name="item">An <see cref="!:TSource"/> that is elements equal it will cause those elements to be removed from the returned sequence.</param>
            <typeparam name="TSource">The type of the elements of <paramref name="target" />.</typeparam>
            <returns>A sequence that contains the items of <paramref name="target"/> but excluding <paramref name="item"/>.</returns>
        </member>
        <member name="M:Polyfill.AsReadOnly``1(System.Collections.Generic.IList{``0})">
            <summary>Returns a read-only <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> wrapper for the current collection.</summary>
            <returns>An object that acts as a read-only wrapper around the current <see cref="T:System.Collections.Generic.IList`1" />.</returns>
        </member>
        <member name="M:Polyfill.AddRange``1(System.Collections.Generic.List{``0},System.ReadOnlySpan{``0})">
            <summary>Adds the elements of the specified span to the end of the <see cref="T:System.Collections.Generic.List`1"/>.</summary>
            <typeparam name="T">The type of elements in the list.</typeparam>
            <param name="list">The list to which the elements should be added.</param>
            <param name="source">The span whose elements should be added to the end of the <see cref="T:System.Collections.Generic.List`1"/>.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="list"/> is null.</exception>
        </member>
        <member name="M:Polyfill.InsertRange``1(System.Collections.Generic.List{``0},System.Int32,System.ReadOnlySpan{``0})">
            <summary>Inserts the elements of a span into the <see cref="T:System.Collections.Generic.List`1"/> at the specified index.</summary>
            <typeparam name="T">The type of elements in the list.</typeparam>
            <param name="list">The list into which the elements should be inserted.</param>
            <param name="index">The zero-based index at which the new elements should be inserted.</param>
            <param name="source">The span whose elements should be added to the <see cref="T:System.Collections.Generic.List`1"/>.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="list"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is less than 0 or greater than <paramref name="list"/>'s <see cref="P:System.Collections.Generic.List`1.Count"/>.</exception>
        </member>
        <member name="M:Polyfill.CopyTo``1(System.Collections.Generic.List{``0},System.Span{``0})">
            <summary>Copies the entire <see cref="T:System.Collections.Generic.List`1"/> to a span.</summary>
            <typeparam name="T">The type of elements in the list.</typeparam>
            <param name="list">The list from which the elements are copied.</param>
            <param name="destination">The span that is the destination of the elements copied from <paramref name="list"/>.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="list"/> is null.</exception>
            <exception cref="T:System.ArgumentException">The number of elements in the source <see cref="T:System.Collections.Generic.List`1"/> is greater than the number of elements that the destination span can contain.</exception>
        </member>
        <member name="M:Polyfill.Nanoseconds(System.TimeSpan)">
            <summary>
            Gets the nanosecond component of the time represented by the current <see cref="T:System.TimeSpan"/> object.
            </summary>
        </member>
        <member name="M:Polyfill.Nanosecond(System.DateTime)">
            <summary>
            Gets the nanosecond component of the time represented by the current <see cref="T:System.DateTime"/> object.
            </summary>
        </member>
        <member name="M:Polyfill.Nanosecond(System.DateTimeOffset)">
            <summary>
            Gets the nanosecond component of the time represented by the current <see cref="T:System.DateTimeOffset"/> object.
            </summary>
        </member>
        <member name="M:Polyfill.Microseconds(System.TimeSpan)">
            <summary>
            Gets the microsecond component of the time represented by the current <see cref="T:System.TimeSpan"/> object.
            </summary>
        </member>
        <member name="M:Polyfill.Microsecond(System.DateTime)">
            <summary>
            Gets the microsecond component of the time represented by the current <see cref="T:System.DateTime"/> object.
            </summary>
        </member>
        <member name="M:Polyfill.Microsecond(System.DateTimeOffset)">
            <summary>
            Gets the microsecond component of the time represented by the current <see cref="T:System.DateTimeOffset"/> object.
            </summary>
        </member>
        <member name="M:Polyfill.AddMicroseconds(System.DateTime,System.Double)">
            <summary>
            Returns a new <see cref="T:System.DateTime"/> object that adds a specified number of microseconds to the value of this instance..
            </summary>
        </member>
        <member name="M:Polyfill.AddMicroseconds(System.DateTimeOffset,System.Double)">
            <summary>
            Returns a new <see cref="T:System.DateTimeOffset"/> object that adds a specified number of microseconds to the value of this instance..
            </summary>
        </member>
        <member name="M:Polyfill.Shuffle``1(System.Random,``0[])">
            <summary>
            Performs an in-place shuffle of an array.
            </summary>
            <param name="index">The array to shuffle.</param>
            <typeparam name="T">The type of array.</typeparam>
            <remarks>
              This method uses <see cref="!:Next(int, int)" /> to choose values for shuffling.
              This method is an O(n) operation.
            </remarks>
        </member>
        <member name="M:Polyfill.Shuffle``1(System.Random,System.Span{``0})">
            <summary>
            Performs an in-place shuffle of a span.
            </summary>
            <param name="index">The span to shuffle.</param>
            <typeparam name="T">The type of span.</typeparam>
            <remarks>
              This method uses <see cref="!:Next(int, int)" /> to choose values for shuffling.
              This method is an O(n) operation.
            </remarks>
        </member>
        <member name="M:Polyfill.GetKeyAtIndex``2(System.Collections.Generic.SortedList{``0,``1},System.Int32)">
            <summary>
            Gets the key corresponding to the specified index.
            </summary>
            <param name="index">The zero-based index of the key within the entire <see cref="T:System.Collections.Generic.SortedList`2"/>.</param>
            <returns>The key corresponding to the specified index.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">The specified index is out of range.</exception>
        </member>
        <member name="M:Polyfill.GetValueAtIndex``2(System.Collections.Generic.SortedList{``0,``1},System.Int32)">
            <summary>
            Gets the value corresponding to the specified index.
            </summary>
            <param name="index">The zero-based index of the value within the entire <see cref="T:System.Collections.Generic.SortedList`2"/>.</param>
            <returns>The value corresponding to the specified index.</returns>
        </member>
        <member name="M:Polyfill.Append(System.Text.StringBuilder,System.Text.StringBuilder.AppendInterpolatedStringHandler@)">
            <summary>Appends the specified interpolated string to this instance.</summary>
            <param name="handler">The interpolated string to append.</param>
            <returns>A reference to this instance after the append operation has completed.</returns>
        </member>
        <member name="M:Polyfill.Append(System.Text.StringBuilder,System.IFormatProvider,System.Text.StringBuilder.AppendInterpolatedStringHandler@)">
            <summary>Appends the specified interpolated string to this instance.</summary>
            <param name="provider">An object that supplies culture-specific formatting information.</param>
            <param name="handler">The interpolated string to append.</param>
            <returns>A reference to this instance after the append operation has completed.</returns>
        </member>
        <member name="M:Polyfill.AppendLine(System.Text.StringBuilder,System.Text.StringBuilder.AppendInterpolatedStringHandler@)">
            <summary>Appends the specified interpolated string followed by the default line terminator to the end of the current StringBuilder object.</summary>
            <param name="handler">The interpolated string to append.</param>
            <returns>A reference to this instance after the append operation has completed.</returns>
        </member>
        <member name="M:Polyfill.AppendLine(System.Text.StringBuilder,System.IFormatProvider,System.Text.StringBuilder.AppendInterpolatedStringHandler@)">
            <summary>Appends the specified interpolated string followed by the default line terminator to the end of the current StringBuilder object.</summary>
            <param name="provider">An object that supplies culture-specific formatting information.</param>
            <param name="handler">The interpolated string to append.</param>
            <returns>A reference to this instance after the append operation has completed.</returns>
        </member>
        <member name="M:Polyfill.Replace(System.Text.StringBuilder,System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char})">
            <summary>
            Replaces all instances of one string with another in part of this builder.
            </summary>
            <param name="oldValue">The string to replace.</param>
            <param name="newValue">The string to replace <paramref name="oldValue"/> with.</param>
            <param name="startIndex">The index to start in this builder.</param>
            <param name="count">The number of characters to read in this builder.</param>
            <remarks>
            If <paramref name="newValue"/> is <c>null</c>, instances of <paramref name="oldValue"/> are removed from this builder.
            </remarks>
        </member>
        <member name="M:Polyfill.Replace(System.Text.StringBuilder,System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.Int32,System.Int32)">
            <summary>
            Replaces all instances of one read-only character span with another in part of this builder.
            </summary>
            <param name="oldValue">The read-only character span to replace.</param>
            <param name="newValue">The read-only character span to replace <paramref name="oldValue"/> with.</param>
            <param name="startIndex">The index to start in this builder.</param>
            <param name="count">The number of characters to read in this builder.</param>
            <remarks>
            If <paramref name="newValue"/> is empty, instances of <paramref name="oldValue"/> are removed from this builder.
            </remarks>
        </member>
        <member name="M:Polyfill.ReadToEndAsync(System.IO.TextReader,System.Threading.CancellationToken)">
            <summary>
            Reads all characters from the current position to the end of the stream asynchronously and returns them as one string.
            </summary>
            <param name="cancellationToken">The token to monitor for cancellation requests.</param>
            <returns>A task that represents the asynchronous read operation. The value of the <c>TResult</c> parameter contains
            a string with the characters from the current position to the end of the stream.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">The number of characters is larger than <see cref="F:System.Int32.MaxValue"/>.</exception>
            <exception cref="T:System.ObjectDisposedException">The stream reader has been disposed.</exception>
            <exception cref="T:System.InvalidOperationException">The reader is currently in use by a previous read operation.</exception>
        </member>
        <member name="M:Polyfill.ReadLineAsync(System.IO.TextReader,System.Threading.CancellationToken)">
            <summary>
            Reads a line of characters asynchronously and returns the data as a string.
            </summary>
            <param name="cancellationToken">The token to monitor for cancellation requests.</param>
            <returns>A value task that represents the asynchronous read operation. The value of the <c>TResult</c>
            parameter contains the next line from the text reader, or is <see langword="null" /> if all of the characters have been read.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">The number of characters in the next line is larger than <see cref="F:System.Int32.MaxValue"/>.</exception>
            <exception cref="T:System.ObjectDisposedException">The text reader has been disposed.</exception>
            <exception cref="T:System.InvalidOperationException">The reader is currently in use by a previous read operation.</exception>
        </member>
        <member name="M:Polyfill.TryFormat(System.DateTimeOffset,System.Span{System.Char},System.Int32@,System.ReadOnlySpan{System.Char},System.IFormatProvider)">
            <summary>
            Tries to format the value of the current instance into the provided span of characters.
            </summary>
        </member>
        <member name="M:Polyfill.TryFormat(System.DateTime,System.Span{System.Char},System.Int32@,System.ReadOnlySpan{System.Char},System.IFormatProvider)">
            <summary>
            Tries to format the value of the current instance into the provided span of characters.
            </summary>
        </member>
        <member name="M:Polyfill.TryFormat(System.DateOnly,System.Span{System.Char},System.Int32@,System.ReadOnlySpan{System.Char},System.IFormatProvider)">
            <summary>
            Tries to format the value of the current instance into the provided span of characters.
            </summary>
        </member>
        <member name="M:Polyfill.TryFormat(System.TimeOnly,System.Span{System.Char},System.Int32@,System.ReadOnlySpan{System.Char},System.IFormatProvider)">
            <summary>
            Tries to format the value of the current instance into the provided span of characters.
            </summary>
        </member>
        <member name="M:Polyfill.IsGenericMethodParameter(System.Type)">
            <summary>
            Gets a value that indicates whether the current Type represents a type parameter in the definition of a generic method.
            </summary>
        </member>
        <member name="M:Polyfill.IsAssignableTo``1(System.Type)">
            <summary>
            Generic version of Type.IsAssignableTo https://learn.microsoft.com/en-us/dotnet/api/system.type.isassignableto.
            </summary>
        </member>
        <member name="M:Polyfill.IsAssignableFrom``1(System.Type)">
            <summary>
            Generic version of Type.IsAssignableFrom https://learn.microsoft.com/en-us/dotnet/api/system.type.isassignablefrom.
            </summary>
        </member>
        <member name="M:Polyfill.IsMatch(System.Text.RegularExpressions.Regex,System.ReadOnlySpan{System.Char},System.Int32)">
            <summary>
            Indicates whether the regular expression specified in the Regex constructor finds a match in a specified input span.
            </summary>
            <returns>true if the regular expression finds a match; otherwise, false.</returns>
        </member>
        <member name="M:Polyfill.IsMatch(System.Text.RegularExpressions.Regex,System.ReadOnlySpan{System.Char})">
            <summary>
            Indicates whether the regular expression specified in the Regex constructor finds a match in a specified input span.
            </summary>
            <returns>true if the regular expression finds a match; otherwise, false.</returns>
        </member>
        <member name="M:Polyfill.EnumerateMatches(System.Text.RegularExpressions.Regex,System.ReadOnlySpan{System.Char})">
            <summary>
            Searches an input span for all occurrences of a regular expression and returns a Regex.ValueMatchEnumerator to iterate over the matches.
            </summary>
            <returns>A Regex.ValueMatchEnumerator to iterate over the matches.</returns>
        </member>
        <member name="M:Polyfill.EnumerateMatches(System.Text.RegularExpressions.Regex,System.ReadOnlySpan{System.Char},System.Int32)">
            <summary>
            Searches an input span for all occurrences of a regular expression and returns a Regex.ValueMatchEnumerator to iterate over the matches.
            </summary>
            <returns>A Regex.ValueMatchEnumerator to iterate over the matches.</returns>
        </member>
        <member name="M:RegexPolyfill.IsMatch(System.ReadOnlySpan{System.Char},System.String,System.Text.RegularExpressions.RegexOptions,System.TimeSpan)">
            <summary>
            Indicates whether the specified regular expression finds a match in the specified input span, using the specified matching options and time-out interval.
            </summary>
            <returns>true if the regular expression finds a match; otherwise, false.</returns>
        </member>
        <member name="M:RegexPolyfill.IsMatch(System.ReadOnlySpan{System.Char},System.String,System.Text.RegularExpressions.RegexOptions)">
            <summary>
            Indicates whether the specified regular expression finds a match in the specified input span, using the specified matching options.
            </summary>
            <returns>true if the regular expression finds a match; otherwise, false.</returns>
        </member>
        <member name="M:RegexPolyfill.IsMatch(System.ReadOnlySpan{System.Char},System.String)">
            <summary>
            Indicates whether the specified regular expression finds a match in the specified input span.
            </summary>
            <returns>true if the regular expression finds a match; otherwise, false.</returns>
        </member>
        <member name="M:RegexPolyfill.EnumerateMatches(System.ReadOnlySpan{System.Char},System.String)">
            <summary>
            Searches an input span for all occurrences of a regular expression and returns a Regex.ValueMatchEnumerator to iterate over the matches.
            </summary>
            <returns>A Regex.ValueMatchEnumerator to iterate over the matches.</returns>
        </member>
        <member name="M:RegexPolyfill.EnumerateMatches(System.ReadOnlySpan{System.Char},System.String,System.Text.RegularExpressions.RegexOptions,System.TimeSpan)">
            <summary>
            Searches an input span for all occurrences of a regular expression and returns a Regex.ValueMatchEnumerator to iterate over the matches.
            </summary>
            <returns>A Regex.ValueMatchEnumerator to iterate over the matches.</returns>
        </member>
        <member name="M:RegexPolyfill.EnumerateMatches(System.ReadOnlySpan{System.Char},System.String,System.Text.RegularExpressions.RegexOptions)">
            <summary>
            Searches an input span for all occurrences of a regular expression and returns a Regex.ValueMatchEnumerator to iterate over the matches.
            </summary>
            <returns>A Regex.ValueMatchEnumerator to iterate over the matches.</returns>
        </member>
        <member name="M:StringPolyfill.Join(System.Char,System.String[])">
            <summary>
            Concatenates an array of strings, using the specified separator between each member.
            </summary>
        </member>
        <member name="M:StringPolyfill.Join(System.Char,System.Object[])">
            <summary>
            Concatenates the string representations of an array of objects, using the specified separator between each member.
            </summary>
        </member>
        <member name="M:StringPolyfill.Join(System.Char,System.String[],System.Int32,System.Int32)">
            <summary>
            Concatenates the specified elements of a string array, using the specified separator between each element.
            </summary>
        </member>
        <member name="M:StringPolyfill.Join``1(System.Char,System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Concatenates the specified elements of a string array, using the specified separator between each element.
            </summary>
        </member>
        <member name="T:Argon.OnDeserializeError">
            <summary>
            Handles <see cref="T:Argon.JsonSerializer" /> deserialization error callback events.
            </summary>
        </member>
        <member name="T:Argon.OnSerializeError">
            <summary>
            Handles <see cref="T:Argon.JsonSerializer" /> serialization error callback events.
            </summary>
        </member>
        <member name="T:Argon.ConstructorHandling">
            <summary>
            Specifies how constructors are used when initializing objects during deserialization by the <see cref="T:Argon.JsonSerializer" />.
            </summary>
        </member>
        <member name="F:Argon.ConstructorHandling.Default">
            <summary>
            First attempt to use the public default constructor, then fall back to a single parameterized constructor, then to the non-public default constructor.
            </summary>
        </member>
        <member name="F:Argon.ConstructorHandling.AllowNonPublicDefaultConstructor">
            <summary>
            Json.NET will use a non-public default constructor before falling back to a parameterized constructor.
            </summary>
        </member>
        <member name="T:Argon.DateTimeConverterBase">
            <summary>
            Provides a base class for converting a <see cref="T:System.DateTime"/> to and from JSON.
            </summary>
        </member>
        <member name="M:Argon.DateTimeConverterBase.CanConvert(System.Type)">
            <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
            <returns>
            <c>true</c> if this instance can convert the specified object type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Argon.ExpandoObjectConverter">
            <summary>
            Converts an <see cref="T:System.Dynamic.ExpandoObject"/> to and from JSON.
            </summary>
        </member>
        <member name="M:Argon.ExpandoObjectConverter.WriteJson(Argon.JsonWriter,System.Object,Argon.JsonSerializer)">
            <summary>
            Writes the JSON representation of the object.
            </summary>
        </member>
        <member name="M:Argon.ExpandoObjectConverter.ReadJson(Argon.JsonReader,System.Type,System.Object,Argon.JsonSerializer)">
            <summary>
            Reads the JSON representation of the object.
            </summary>
        </member>
        <member name="M:Argon.ExpandoObjectConverter.CanConvert(System.Type)">
            <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
            <returns>
            <c>true</c> if this instance can convert the specified object type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:Argon.ExpandoObjectConverter.CanWrite">
            <summary>
            Gets a value indicating whether this <see cref="T:Argon.JsonConverter"/> can write JSON.
            </summary>
        </member>
        <member name="T:Argon.IsoDateTimeConverter">
            <summary>
            Converts a <see cref="T:System.DateTime"/> to and from the ISO 8601 date format (e.g. <c>"2008-04-12T12:53Z"</c>).
            </summary>
        </member>
        <member name="P:Argon.IsoDateTimeConverter.DateTimeStyles">
            <summary>
            Gets or sets the date time styles used when converting a date to and from JSON.
            </summary>
        </member>
        <member name="P:Argon.IsoDateTimeConverter.DateTimeFormat">
            <summary>
            Gets or sets the date time format used when converting a date to and from JSON.
            </summary>
        </member>
        <member name="M:Argon.IsoDateTimeConverter.WriteJson(Argon.JsonWriter,System.Object,Argon.JsonSerializer)">
            <summary>
            Writes the JSON representation of the object.
            </summary>
        </member>
        <member name="M:Argon.IsoDateTimeConverter.ReadJson(Argon.JsonReader,System.Type,System.Object,Argon.JsonSerializer)">
            <summary>
            Reads the JSON representation of the object.
            </summary>
        </member>
        <member name="T:Argon.KeyValuePairConverter">
            <summary>
            Converts a <see cref="T:System.Collections.Generic.KeyValuePair`2"/> to and from JSON.
            </summary>
        </member>
        <member name="M:Argon.KeyValuePairConverter.WriteJson(Argon.JsonWriter,System.Object,Argon.JsonSerializer)">
            <summary>
            Writes the JSON representation of the object.
            </summary>
        </member>
        <member name="M:Argon.KeyValuePairConverter.ReadJson(Argon.JsonReader,System.Type,System.Object,Argon.JsonSerializer)">
            <summary>
            Reads the JSON representation of the object.
            </summary>
        </member>
        <member name="M:Argon.KeyValuePairConverter.CanConvert(System.Type)">
            <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
            <returns>
            <c>true</c> if this instance can convert the specified object type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Argon.RegexConverter">
            <summary>
            Converts a <see cref="T:System.Text.RegularExpressions.Regex"/> to and from JSON.
            </summary>
        </member>
        <member name="M:Argon.RegexConverter.WriteJson(Argon.JsonWriter,System.Object,Argon.JsonSerializer)">
            <summary>
            Writes the JSON representation of the object.
            </summary>
        </member>
        <member name="M:Argon.RegexConverter.ReadJson(Argon.JsonReader,System.Type,System.Object,Argon.JsonSerializer)">
            <summary>
            Reads the JSON representation of the object.
            </summary>
        </member>
        <member name="M:Argon.RegexConverter.CanConvert(System.Type)">
            <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
            <returns>
            <c>true</c> if this instance can convert the specified object type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Argon.StringEnumConverter">
            <summary>
            Converts an <see cref="T:System.Enum"/> to and from its name string value.
            </summary>
        </member>
        <member name="P:Argon.StringEnumConverter.NamingStrategy">
            <summary>
            Gets or sets the naming strategy used to resolve how enum text is written.
            </summary>
        </member>
        <member name="P:Argon.StringEnumConverter.AllowIntegerValues">
            <summary>
            Gets or sets a value indicating whether integer values are allowed when serializing and deserializing.
            The default value is <c>true</c>.
            </summary>
        </member>
        <member name="M:Argon.StringEnumConverter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Argon.StringEnumConverter"/> class.
            </summary>
        </member>
        <member name="M:Argon.StringEnumConverter.#ctor(Argon.NamingStrategy,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Argon.StringEnumConverter"/> class.
            </summary>
        </member>
        <member name="M:Argon.StringEnumConverter.WriteJson(Argon.JsonWriter,System.Object,Argon.JsonSerializer)">
            <summary>
            Writes the JSON representation of the object.
            </summary>
        </member>
        <member name="M:Argon.StringEnumConverter.ReadJson(Argon.JsonReader,System.Type,System.Object,Argon.JsonSerializer)">
            <summary>
            Reads the JSON representation of the object.
            </summary>
        </member>
        <member name="M:Argon.StringEnumConverter.CanConvert(System.Type)">
            <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
            <returns>
            <c>true</c> if this instance can convert the specified object type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Argon.VersionConverter">
            <summary>
            Converts a <see cref="T:System.Version"/> to and from a string (e.g. <c>"1.2.3.4"</c>).
            </summary>
        </member>
        <member name="T:Argon.DefaultJsonNameTable">
            <summary>
            The default JSON name table implementation.
            </summary>
        </member>
        <member name="M:Argon.DefaultJsonNameTable.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Argon.DefaultJsonNameTable" /> class.
            </summary>
        </member>
        <member name="M:Argon.DefaultJsonNameTable.Get(System.Char[],System.Int32,System.Int32)">
            <summary>
            Gets a string containing the same characters as the specified range of characters in the given array.
            </summary>
            <param name="key">The character array containing the name to find.</param>
            <param name="start">The zero-based index into the array specifying the first character of the name.</param>
            <param name="length">The number of characters in the name.</param>
            <returns>A string containing the same characters as the specified range of characters in the given array.</returns>
        </member>
        <member name="M:Argon.DefaultJsonNameTable.Add(System.String)">
            <summary>
            Adds the specified string into name table.
            </summary>
            <remarks>This method is not thread-safe.</remarks>
            <returns>The resolved string.</returns>
        </member>
        <member name="T:Argon.DefaultValueHandling">
            <summary>
            Specifies default value handling options for the <see cref="T:Argon.JsonSerializer" />.
            </summary>
            <example>
            <code lang="cs" source="..\src\Tests\Documentation\SerializationTests.cs" region="ReducingSerializedJsonSizeDefaultValueHandlingObject" title="DefaultValueHandling Class" />
            <code lang="cs" source="..\src\Tests\Documentation\SerializationTests.cs" region="ReducingSerializedJsonSizeDefaultValueHandlingExample" title="DefaultValueHandling Ignore Example" />
            </example>
        </member>
        <member name="F:Argon.DefaultValueHandling.Include">
            <summary>
            Include members where the member value is the same as the member's default value when serializing objects.
            Included members are written to JSON. Has no effect when deserializing.
            </summary>
        </member>
        <member name="F:Argon.DefaultValueHandling.Ignore">
            <summary>
            Ignore members where the member value is the same as the member's default value when serializing objects
            so that it is not written to JSON.
            This option will ignore all default values (e.g. <c>null</c> for objects and nullable types; <c>0</c> for integers,
            decimals and floating point numbers; and <c>false</c> for booleans). The default value ignored can be changed by
            placing the <see cref="T:System.ComponentModel.DefaultValueAttribute" /> on the property.
            </summary>
        </member>
        <member name="F:Argon.DefaultValueHandling.Populate">
            <summary>
            Members with a default value but no JSON will be set to their default value when deserializing.
            </summary>
        </member>
        <member name="F:Argon.DefaultValueHandling.IgnoreAndPopulate">
            <summary>
            Ignore members where the member value is the same as the member's default value when serializing objects
            and set members to their default value when deserializing.
            </summary>
        </member>
        <member name="T:Argon.EscapeHandling">
            <summary>
            Specifies how strings are escaped when writing JSON text.
            </summary>
        </member>
        <member name="F:Argon.EscapeHandling.Default">
            <summary>
            Only control characters (e.g. newline) are escaped.
            </summary>
        </member>
        <member name="F:Argon.EscapeHandling.EscapeNonAscii">
            <summary>
            All non-ASCII and control characters (e.g. newline) are escaped.
            </summary>
        </member>
        <member name="F:Argon.EscapeHandling.EscapeHtml">
            <summary>
            HTML (&lt;, &gt;, &amp;, &apos;, &quot;) and control characters (e.g. newline) are escaped.
            </summary>
        </member>
        <member name="F:Argon.EscapeHandling.None">
            <summary>
            Don't escape any characters.
            </summary>
        </member>
        <member name="T:Argon.FloatFormatHandling">
            <summary>
            Specifies float format handling options when writing special floating point numbers, e.g. <see cref="F:System.Double.NaN" />,
            <see cref="F:System.Double.PositiveInfinity" /> and <see cref="F:System.Double.NegativeInfinity" /> with <see cref="T:Argon.JsonWriter" />.
            </summary>
        </member>
        <member name="F:Argon.FloatFormatHandling.String">
            <summary>
            Write special floating point values as strings in JSON, e.g. <c>"NaN"</c>, <c>"Infinity"</c>, <c>"-Infinity"</c>.
            </summary>
        </member>
        <member name="F:Argon.FloatFormatHandling.Symbol">
            <summary>
            Write special floating point values as symbols in JSON, e.g. <c>NaN</c>, <c>Infinity</c>, <c>-Infinity</c>.
            Note that this will produce non-valid JSON.
            </summary>
        </member>
        <member name="F:Argon.FloatFormatHandling.DefaultValue">
            <summary>
            Write special floating point values as the property's default value in JSON, e.g. 0.0 for a <see cref="T:System.Double" /> property, <c>null</c> for a <see cref="T:System.Nullable`1" /> of <see cref="T:System.Double" /> property.
            </summary>
        </member>
        <member name="T:Argon.FloatParseHandling">
            <summary>
            Specifies how floating point numbers, e.g. 1.0 and 9.9, are parsed when reading JSON text.
            </summary>
        </member>
        <member name="F:Argon.FloatParseHandling.Double">
            <summary>
            Floating point numbers are parsed to <see cref="F:Argon.FloatParseHandling.Double" />.
            </summary>
        </member>
        <member name="F:Argon.FloatParseHandling.Decimal">
            <summary>
            Floating point numbers are parsed to <see cref="F:Argon.FloatParseHandling.Decimal" />.
            </summary>
        </member>
        <member name="T:Argon.Formatting">
            <summary>
            Specifies formatting options for the <see cref="T:Argon.JsonTextWriter" />.
            </summary>
        </member>
        <member name="F:Argon.Formatting.None">
            <summary>
            No special formatting is applied. This is the default.
            </summary>
        </member>
        <member name="F:Argon.Formatting.Indented">
            <summary>
            Causes child objects to be indented.
            </summary>
        </member>
        <member name="T:Argon.IJsonLineInfo">
            <summary>
            Provides an interface to enable a class to return line and position information.
            </summary>
        </member>
        <member name="M:Argon.IJsonLineInfo.HasLineInfo">
            <summary>
            Gets a value indicating whether the class can return line information.
            </summary>
            <returns>
            <c>true</c> if <see cref="P:Argon.IJsonLineInfo.LineNumber" /> and <see cref="P:Argon.IJsonLineInfo.LinePosition" /> can be provided; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:Argon.IJsonLineInfo.LineNumber">
            <summary>
            Gets the current line number.
            </summary>
        </member>
        <member name="P:Argon.IJsonLineInfo.LinePosition">
            <summary>
            Gets the current line position.
            </summary>
        </member>
        <member name="T:Argon.JsonArrayAttribute">
            <summary>
            Instructs the <see cref="T:Argon.JsonSerializer" /> how to serialize the collection.
            </summary>
        </member>
        <member name="P:Argon.JsonArrayAttribute.AllowNullItems">
            <summary>
            Gets or sets a value indicating whether null items are allowed in the collection.
            </summary>
        </member>
        <member name="M:Argon.JsonArrayAttribute.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Argon.JsonObjectAttribute" /> class with a flag indicating whether the array can contain null items.
            </summary>
            <param name="allowNullItems">A flag indicating whether the array can contain null items.</param>
        </member>
        <member name="T:Argon.JsonConstructorAttribute">
            <summary>
            Instructs the <see cref="T:Argon.JsonSerializer" /> to use the specified constructor when deserializing that object.
            </summary>
        </member>
        <member name="T:Argon.JsonContainerAttribute">
            <summary>
            Instructs the <see cref="T:Argon.JsonSerializer" /> how to serialize the object.
            </summary>
        </member>
        <member name="P:Argon.JsonContainerAttribute.ItemConverterType">
            <summary>
            Gets or sets the collection's items converter.
            </summary>
        </member>
        <member name="P:Argon.JsonContainerAttribute.IsReference">
            <summary>
            Gets or sets a value that indicates whether to preserve object references.
            </summary>
        </member>
        <member name="P:Argon.JsonContainerAttribute.ItemIsReference">
            <summary>
            Gets or sets a value that indicates whether to preserve collection's items references.
            </summary>
        </member>
        <member name="P:Argon.JsonContainerAttribute.ItemReferenceLoopHandling">
            <summary>
            Gets or sets the reference loop handling used when serializing the collection's items.
            </summary>
        </member>
        <member name="P:Argon.JsonContainerAttribute.ItemTypeNameHandling">
            <summary>
            Gets or sets the type name handling used when serializing the collection's items.
            </summary>
        </member>
        <member name="M:Argon.JsonContainerAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Argon.JsonContainerAttribute" /> class.
            </summary>
        </member>
        <member name="T:Argon.JsonConvert">
            <summary>
            Provides methods for converting between .NET types and JSON types.
            </summary>
            <example>
            <code lang="cs" source="..\src\Tests\Documentation\SerializationTests.cs" region="SerializeObject" title="Serializing and Deserializing JSON with JsonConvert" />
            </example>
        </member>
        <member name="P:Argon.JsonConvert.DefaultSettings">
            <summary>
            Gets or sets a function that creates default <see cref="T:Argon.JsonSerializerSettings" />.
            Default settings are automatically used by serialization methods on <see cref="T:Argon.JsonConvert" />,
            and <see cref="M:Argon.JToken.ToObject``1" /> and <see cref="M:Argon.JToken.FromObject(System.Object)" /> on <see cref="T:Argon.JToken" />.
            To serialize without using any default settings create a <see cref="T:Argon.JsonSerializer" /> with
            <see cref="M:Argon.JsonSerializer.Create" />.
            </summary>
        </member>
        <member name="F:Argon.JsonConvert.True">
            <summary>
            Represents JavaScript's boolean value <c>true</c> as a string. This field is read-only.
            </summary>
        </member>
        <member name="F:Argon.JsonConvert.False">
            <summary>
            Represents JavaScript's boolean value <c>false</c> as a string. This field is read-only.
            </summary>
        </member>
        <member name="F:Argon.JsonConvert.Null">
            <summary>
            Represents JavaScript's <c>null</c> as a string. This field is read-only.
            </summary>
        </member>
        <member name="F:Argon.JsonConvert.Undefined">
            <summary>
            Represents JavaScript's <c>undefined</c> as a string. This field is read-only.
            </summary>
        </member>
        <member name="F:Argon.JsonConvert.PositiveInfinity">
            <summary>
            Represents JavaScript's positive infinity as a string. This field is read-only.
            </summary>
        </member>
        <member name="F:Argon.JsonConvert.NegativeInfinity">
            <summary>
            Represents JavaScript's negative infinity as a string. This field is read-only.
            </summary>
        </member>
        <member name="F:Argon.JsonConvert.NaN">
            <summary>
            Represents JavaScript's <c>NaN</c> as a string. This field is read-only.
            </summary>
        </member>
        <member name="M:Argon.JsonConvert.ToString(System.DateTime)">
            <summary>
            Converts the <see cref="T:System.DateTime" /> to its JSON string representation.
            </summary>
        </member>
        <member name="M:Argon.JsonConvert.ToString(System.DateTimeOffset)">
            <summary>
            Converts the <see cref="T:System.DateTimeOffset" /> to its JSON string representation.
            </summary>
        </member>
        <member name="M:Argon.JsonConvert.ToString(System.Boolean)">
            <summary>
            Converts the <see cref="T:System.Boolean" /> to its JSON string representation.
            </summary>
        </member>
        <member name="M:Argon.JsonConvert.ToString(System.Char)">
            <summary>
            Converts the <see cref="T:System.Char" /> to its JSON string representation.
            </summary>
        </member>
        <member name="M:Argon.JsonConvert.ToString(System.Enum)">
            <summary>
            Converts the <see cref="T:System.Enum" /> to its JSON string representation.
            </summary>
        </member>
        <member name="M:Argon.JsonConvert.ToString(System.Int32)">
            <summary>
            Converts the <see cref="T:System.Int32" /> to its JSON string representation.
            </summary>
        </member>
        <member name="M:Argon.JsonConvert.ToString(System.Int16)">
            <summary>
            Converts the <see cref="T:System.Int16" /> to its JSON string representation.
            </summary>
        </member>
        <member name="M:Argon.JsonConvert.ToString(System.UInt16)">
            <summary>
            Converts the <see cref="T:System.UInt16" /> to its JSON string representation.
            </summary>
        </member>
        <member name="M:Argon.JsonConvert.ToString(System.UInt32)">
            <summary>
            Converts the <see cref="T:System.UInt32" /> to its JSON string representation.
            </summary>
        </member>
        <member name="M:Argon.JsonConvert.ToString(System.Int64)">
            <summary>
            Converts the <see cref="T:System.Int64" />  to its JSON string representation.
            </summary>
        </member>
        <member name="M:Argon.JsonConvert.ToString(System.UInt64)">
            <summary>
            Converts the <see cref="T:System.UInt64" /> to its JSON string representation.
            </summary>
        </member>
        <member name="M:Argon.JsonConvert.ToString(System.Single)">
            <summary>
            Converts the <see cref="T:System.Single" /> to its JSON string representation.
            </summary>
        </member>
        <member name="M:Argon.JsonConvert.ToString(System.Double)">
            <summary>
            Converts the <see cref="T:System.Double" /> to its JSON string representation.
            </summary>
            <returns>A JSON string representation of the <see cref="T:System.Double" />.</returns>
        </member>
        <member name="M:Argon.JsonConvert.ToString(System.Byte)">
            <summary>
            Converts the <see cref="T:System.Byte" /> to its JSON string representation.
            </summary>
            <returns>A JSON string representation of the <see cref="T:System.Byte" />.</returns>
        </member>
        <member name="M:Argon.JsonConvert.ToString(System.SByte)">
            <summary>
            Converts the <see cref="T:System.SByte" /> to its JSON string representation.
            </summary>
            <returns>A JSON string representation of the <see cref="T:System.SByte" />.</returns>
        </member>
        <member name="M:Argon.JsonConvert.ToString(System.Decimal)">
            <summary>
            Converts the <see cref="T:System.Decimal" /> to its JSON string representation.
            </summary>
            <returns>A JSON string representation of the <see cref="T:System.Decimal" />.</returns>
        </member>
        <member name="M:Argon.JsonConvert.ToString(System.Guid)">
            <summary>
            Converts the <see cref="T:System.Guid" /> to its JSON string representation.
            </summary>
            <returns>A JSON string representation of the <see cref="T:System.Guid" />.</returns>
        </member>
        <member name="M:Argon.JsonConvert.ToString(System.TimeSpan)">
            <summary>
            Converts the <see cref="T:System.TimeSpan" /> to its JSON string representation.
            </summary>
            <returns>A JSON string representation of the <see cref="T:System.TimeSpan" />.</returns>
        </member>
        <member name="M:Argon.JsonConvert.ToString(System.Uri)">
            <summary>
            Converts the <see cref="T:System.Uri" /> to its JSON string representation.
            </summary>
            <returns>A JSON string representation of the <see cref="T:System.Uri" />.</returns>
        </member>
        <member name="M:Argon.JsonConvert.ToString(System.String)">
            <summary>
            Converts the <see cref="T:System.String" /> to its JSON string representation.
            </summary>
            <returns>A JSON string representation of the <see cref="T:System.String" />.</returns>
        </member>
        <member name="M:Argon.JsonConvert.ToString(System.String,System.Char)">
            <param name="delimiter">The string delimiter character.</param>
            <returns>A JSON string representation of the <see cref="T:System.String" />.</returns>
        </member>
        <member name="M:Argon.JsonConvert.ToString(System.String,System.Char,Argon.EscapeHandling)">
            <summary>
            Converts the <see cref="T:System.String" /> to its JSON string representation.
            </summary>
            <returns>A JSON string representation of the <see cref="T:System.String" />.</returns>
        </member>
        <member name="M:Argon.JsonConvert.ToString(System.ReadOnlySpan{System.Char})">
            <summary>
            Converts the <see cref="T:System.String" /> to its JSON string representation.
            </summary>
            <returns>A JSON string representation of the <see cref="T:System.String" />.</returns>
        </member>
        <member name="M:Argon.JsonConvert.ToString(System.ReadOnlySpan{System.Char},System.Char)">
            <summary>
            Converts the <see cref="T:System.String" /> to its JSON string representation.
            </summary>
            <param name="delimiter">The string delimiter character.</param>
            <returns>A JSON string representation of the <see cref="T:System.String" />.</returns>
        </member>
        <member name="M:Argon.JsonConvert.ToString(System.ReadOnlySpan{System.Char},System.Char,Argon.EscapeHandling)">
            <summary>
            Converts the <see cref="T:System.String" /> to its JSON string representation.
            </summary>
            <returns>A JSON string representation of the <see cref="T:System.String" />.</returns>
        </member>
        <member name="M:Argon.JsonConvert.ToString(System.Object)">
            <summary>
            Converts the <see cref="T:System.Object" /> to its JSON string representation.
            </summary>
            <returns>A JSON string representation of the <see cref="T:System.Object" />.</returns>
        </member>
        <member name="M:Argon.JsonConvert.SerializeObject(System.Object)">
            <summary>
            Serializes the specified object to a JSON string.
            </summary>
        </member>
        <member name="M:Argon.JsonConvert.SerializeObject(System.Object,Argon.Formatting)">
            <summary>
            Serializes the specified object to a JSON string using formatting.
            </summary>
        </member>
        <member name="M:Argon.JsonConvert.SerializeObject(System.Object,Argon.JsonConverter[])">
            <summary>
            Serializes the specified object to a JSON string using a collection of <see cref="T:Argon.JsonConverter" />.
            </summary>
        </member>
        <member name="M:Argon.JsonConvert.SerializeObject(System.Object,Argon.Formatting,Argon.JsonConverter[])">
            <summary>
            Serializes the specified object to a JSON string using formatting and a collection of <see cref="T:Argon.JsonConverter" />.
            </summary>
        </member>
        <member name="M:Argon.JsonConvert.SerializeObject(System.Object,Argon.JsonSerializerSettings)">
            <summary>
            Serializes the specified object to a JSON string using <see cref="T:Argon.JsonSerializerSettings" />.
            </summary>
            <param name="settings">
            The <see cref="T:Argon.JsonSerializerSettings" /> used to serialize the object.
            If this is <c>null</c>, default serialization settings will be used.
            </param>
        </member>
        <member name="M:Argon.JsonConvert.SerializeObject(System.Object,System.Type,Argon.JsonSerializerSettings)">
            <summary>
            Serializes the specified object to a JSON string using a type, formatting and <see cref="T:Argon.JsonSerializerSettings" />.
            </summary>
            <param name="settings">
            The <see cref="T:Argon.JsonSerializerSettings" /> used to serialize the object.
            If this is <c>null</c>, default serialization settings will be used.
            </param>
            <param name="type">
            The type of the value being serialized.
            This parameter is used when <see cref="P:Argon.JsonSerializer.TypeNameHandling" /> is <see cref="F:Argon.TypeNameHandling.Auto" />
            to write out the type name if the type of the value does not match.
            Specifying the type is optional.
            </param>
        </member>
        <member name="M:Argon.JsonConvert.SerializeObject(System.Object,Argon.Formatting,Argon.JsonSerializerSettings)">
            <summary>
            Serializes the specified object to a JSON string using formatting and <see cref="T:Argon.JsonSerializerSettings" />.
            </summary>
            <param name="settings">
            The <see cref="T:Argon.JsonSerializerSettings" /> used to serialize the object.
            If this is <c>null</c>, default serialization settings will be used.
            </param>
        </member>
        <member name="M:Argon.JsonConvert.SerializeObject(System.Object,System.Type,Argon.Formatting,Argon.JsonSerializerSettings)">
            <summary>
            Serializes the specified object to a JSON string using a type, formatting and <see cref="T:Argon.JsonSerializerSettings" />.
            </summary>
            <param name="settings">
            The <see cref="T:Argon.JsonSerializerSettings" /> used to serialize the object.
            If this is <c>null</c>, default serialization settings will be used.
            </param>
            <param name="type">
            The type of the value being serialized.
            This parameter is used when <see cref="P:Argon.JsonSerializer.TypeNameHandling" /> is <see cref="F:Argon.TypeNameHandling.Auto" />
            to write out the type name if the type of the value does not match.
            Specifying the type is optional.
            </param>
        </member>
        <member name="M:Argon.JsonConvert.DeserializeObject(System.String)">
            <summary>
            Deserializes the JSON to a .NET object.
            </summary>
        </member>
        <member name="M:Argon.JsonConvert.TryDeserializeObject(System.String)">
            <summary>
            Deserializes the JSON to a .NET object.
            </summary>
        </member>
        <member name="M:Argon.JsonConvert.DeserializeObject(System.String,Argon.JsonSerializerSettings)">
            <summary>
            Deserializes the JSON to a .NET object using <see cref="T:Argon.JsonSerializerSettings" />.
            </summary>
            <param name="settings">
            The <see cref="T:Argon.JsonSerializerSettings" /> used to deserialize the object.
            If this is <c>null</c>, default serialization settings will be used.
            </param>
        </member>
        <member name="M:Argon.JsonConvert.TryDeserializeObject(System.String,Argon.JsonSerializerSettings)">
            <summary>
            Deserializes the JSON to a .NET object using <see cref="T:Argon.JsonSerializerSettings" />.
            </summary>
            <param name="settings">
            The <see cref="T:Argon.JsonSerializerSettings" /> used to deserialize the object.
            If this is <c>null</c>, default serialization settings will be used.
            </param>
        </member>
        <member name="M:Argon.JsonConvert.DeserializeObject(System.String,System.Type)">
            <summary>
            Deserializes the JSON to the specified .NET type.
            </summary>
        </member>
        <member name="M:Argon.JsonConvert.TryDeserializeObject(System.String,System.Type)">
            <summary>
            Deserializes the JSON to the specified .NET type.
            </summary>
        </member>
        <member name="M:Argon.JsonConvert.DeserializeObject``1(System.String)">
            <summary>
            Deserializes the JSON to the specified .NET type.
            </summary>
        </member>
        <member name="M:Argon.JsonConvert.TryDeserializeObject``1(System.String)">
            <summary>
            Deserializes the JSON to the specified .NET type.
            </summary>
        </member>
        <member name="M:Argon.JsonConvert.DeserializeAnonymousType``1(System.String,``0)">
            <summary>
            Deserializes the JSON to the given anonymous type.
            </summary>
            <typeparam name="T">
            The anonymous type to deserialize to. This can't be specified
            traditionally and must be inferred from the anonymous type passed
            as a parameter.
            </typeparam>
        </member>
        <member name="M:Argon.JsonConvert.TryDeserializeAnonymousType``1(System.String,``0)">
            <summary>
            Deserializes the JSON to the given anonymous type.
            </summary>
            <typeparam name="T">
            The anonymous type to deserialize to. This can't be specified
            traditionally and must be inferred from the anonymous type passed
            as a parameter.
            </typeparam>
        </member>
        <member name="M:Argon.JsonConvert.DeserializeAnonymousType``1(System.String,``0,Argon.JsonSerializerSettings)">
            <summary>
            Deserializes the JSON to the given anonymous type using <see cref="T:Argon.JsonSerializerSettings" />.
            </summary>
            <typeparam name="T">
            The anonymous type to deserialize to. This can't be specified
            traditionally and must be inferred from the anonymous type passed
            as a parameter.
            </typeparam>
            <param name="settings">
            The <see cref="T:Argon.JsonSerializerSettings" /> used to deserialize the object.
            If this is <c>null</c>, default serialization settings will be used.
            </param>
        </member>
        <member name="M:Argon.JsonConvert.TryDeserializeAnonymousType``1(System.String,``0,Argon.JsonSerializerSettings)">
            <summary>
            Deserializes the JSON to the given anonymous type using <see cref="T:Argon.JsonSerializerSettings" />.
            </summary>
            <typeparam name="T">
            The anonymous type to deserialize to. This can't be specified
            traditionally and must be inferred from the anonymous type passed
            as a parameter.
            </typeparam>
            <param name="settings">
            The <see cref="T:Argon.JsonSerializerSettings" /> used to deserialize the object.
            If this is <c>null</c>, default serialization settings will be used.
            </param>
        </member>
        <member name="M:Argon.JsonConvert.DeserializeObject``1(System.String,Argon.JsonConverter[])">
            <summary>
            Deserializes the JSON to the specified .NET type using a collection of <see cref="T:Argon.JsonConverter" />.
            </summary>
        </member>
        <member name="M:Argon.JsonConvert.TryDeserializeObject``1(System.String,Argon.JsonConverter[])">
            <summary>
            Deserializes the JSON to the specified .NET type using a collection of <see cref="T:Argon.JsonConverter" />.
            </summary>
        </member>
        <member name="M:Argon.JsonConvert.DeserializeObject``1(System.String,Argon.JsonSerializerSettings)">
            <summary>
            Deserializes the JSON to the specified .NET type using <see cref="T:Argon.JsonSerializerSettings" />.
            </summary>
            <param name="settings">
            The <see cref="T:Argon.JsonSerializerSettings" /> used to deserialize the object.
            If this is <c>null</c>, default serialization settings will be used.
            </param>
        </member>
        <member name="M:Argon.JsonConvert.TryDeserializeObject``1(System.String,Argon.JsonSerializerSettings)">
            <summary>
            Deserializes the JSON to the specified .NET type using <see cref="T:Argon.JsonSerializerSettings" />.
            </summary>
            <param name="settings">
            The <see cref="T:Argon.JsonSerializerSettings" /> used to deserialize the object.
            If this is <c>null</c>, default serialization settings will be used.
            </param>
        </member>
        <member name="M:Argon.JsonConvert.DeserializeObject(System.String,System.Type,Argon.JsonConverter[])">
            <summary>
            Deserializes the JSON to the specified .NET type using a collection of <see cref="T:Argon.JsonConverter" />.
            </summary>
        </member>
        <member name="M:Argon.JsonConvert.TryDeserializeObject(System.String,System.Type,Argon.JsonConverter[])">
            <summary>
            Deserializes the JSON to the specified .NET type using a collection of <see cref="T:Argon.JsonConverter" />.
            </summary>
        </member>
        <member name="M:Argon.JsonConvert.DeserializeObject(System.String,System.Type,Argon.JsonSerializerSettings)">
            <summary>
            Deserializes the JSON to the specified .NET type using <see cref="T:Argon.JsonSerializerSettings" />.
            </summary>
            <param name="settings">
            The <see cref="T:Argon.JsonSerializerSettings" /> used to deserialize the object.
            If this is <c>null</c>, default serialization settings will be used.
            </param>
        </member>
        <member name="M:Argon.JsonConvert.TryDeserializeObject(System.String,System.Type,Argon.JsonSerializerSettings)">
            <summary>
            Deserializes the JSON to the specified .NET type using <see cref="T:Argon.JsonSerializerSettings" />.
            </summary>
            <param name="settings">
            The <see cref="T:Argon.JsonSerializerSettings" /> used to deserialize the object.
            If this is <c>null</c>, default serialization settings will be used.
            </param>
        </member>
        <member name="T:Argon.JsonConverter">
            <summary>
            Converts an object to and from JSON.
            </summary>
        </member>
        <member name="M:Argon.JsonConverter.WriteJson(Argon.JsonWriter,System.Object,Argon.JsonSerializer)">
            <summary>
            Writes the JSON representation of the object.
            </summary>
        </member>
        <member name="M:Argon.JsonConverter.ReadJson(Argon.JsonReader,System.Type,System.Object,Argon.JsonSerializer)">
            <summary>
            Reads the JSON representation of the object.
            </summary>
        </member>
        <member name="M:Argon.JsonConverter.CanConvert(System.Type)">
            <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
            <returns>
            <c>true</c> if this instance can convert the specified object type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:Argon.JsonConverter.CanRead">
            <summary>
            Gets a value indicating whether this <see cref="T:Argon.JsonConverter" /> can read JSON.
            </summary>
        </member>
        <member name="P:Argon.JsonConverter.CanWrite">
            <summary>
            Gets a value indicating whether this <see cref="T:Argon.JsonConverter" /> can write JSON.
            </summary>
        </member>
        <member name="T:Argon.JsonConverter`1">
            <summary>
            Converts an object to and from JSON.
            </summary>
        </member>
        <member name="M:Argon.JsonConverter`1.WriteJson(Argon.JsonWriter,System.Object,Argon.JsonSerializer)">
            <summary>
            Writes the JSON representation of the object.
            </summary>
        </member>
        <member name="M:Argon.JsonConverter`1.WriteJson(Argon.JsonWriter,`0,Argon.JsonSerializer)">
            <summary>
            Writes the JSON representation of the object.
            </summary>
        </member>
        <member name="M:Argon.JsonConverter`1.ReadJson(Argon.JsonReader,System.Type,System.Object,Argon.JsonSerializer)">
            <summary>
            Reads the JSON representation of the object.
            </summary>
        </member>
        <member name="M:Argon.JsonConverter`1.ReadJson(Argon.JsonReader,System.Type,`0,System.Boolean,Argon.JsonSerializer)">
            <summary>
            Reads the JSON representation of the object.
            </summary>
        </member>
        <member name="M:Argon.JsonConverter`1.CanConvert(System.Type)">
            <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
            <returns>
            <c>true</c> if this instance can convert the specified object type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Argon.JsonConverterAttribute">
            <summary>
            Instructs the <see cref="T:Argon.JsonSerializer" /> to use the specified <see cref="T:Argon.JsonConverter" /> when serializing the member or class.
            </summary>
        </member>
        <member name="P:Argon.JsonConverterAttribute.ConverterType">
            <summary>
            Gets the <see cref="T:System.Type" /> of the <see cref="T:Argon.JsonConverter" />.
            </summary>
        </member>
        <member name="M:Argon.JsonConverterAttribute.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Argon.JsonConverterAttribute" /> class.
            </summary>
            <param name="converterType">Type of the <see cref="T:Argon.JsonConverter" />.</param>
        </member>
        <member name="T:Argon.JsonDictionaryAttribute">
            <summary>
            Instructs the <see cref="T:Argon.JsonSerializer" /> how to serialize the collection.
            </summary>
        </member>
        <member name="M:Argon.JsonDictionaryAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Argon.JsonDictionaryAttribute" /> class.
            </summary>
        </member>
        <member name="T:Argon.JsonException">
            <summary>
            The exception thrown when an error occurs during JSON serialization or deserialization.
            </summary>
        </member>
        <member name="M:Argon.JsonException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Argon.JsonException" /> class
            with a specified error message.
            </summary>
        </member>
        <member name="M:Argon.JsonException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Argon.JsonException" /> class
            with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
        </member>
        <member name="T:Argon.JsonIgnoreAttribute">
            <summary>
            Instructs the <see cref="T:Argon.JsonSerializer" /> not to serialize the public field or public read/write property value.
            </summary>
        </member>
        <member name="T:Argon.JsonNameTable">
            <summary>
            Base class for a table of atomized string objects.
            </summary>
        </member>
        <member name="M:Argon.JsonNameTable.Get(System.Char[],System.Int32,System.Int32)">
            <summary>
            Gets a string containing the same characters as the specified range of characters in the given array.
            </summary>
            <param name="key">The character array containing the name to find.</param>
            <param name="start">The zero-based index into the array specifying the first character of the name.</param>
            <param name="length">The number of characters in the name.</param>
            <returns>A string containing the same characters as the specified range of characters in the given array.</returns>
        </member>
        <member name="T:Argon.JsonObjectAttribute">
            <summary>
            Instructs the <see cref="T:Argon.JsonSerializer" /> how to serialize the object.
            </summary>
        </member>
        <member name="P:Argon.JsonObjectAttribute.MemberSerialization">
            <summary>
            Gets or sets the member serialization.
            </summary>
        </member>
        <member name="P:Argon.JsonObjectAttribute.ItemNullValueHandling">
            <summary>
            Gets or sets how the object's properties with null values are handled during serialization and deserialization.
            </summary>
        </member>
        <member name="P:Argon.JsonObjectAttribute.ItemRequired">
            <summary>
            Gets or sets a value that indicates whether the object's properties are required.
            </summary>
        </member>
        <member name="M:Argon.JsonObjectAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Argon.JsonObjectAttribute" /> class.
            </summary>
        </member>
        <member name="M:Argon.JsonObjectAttribute.#ctor(Argon.MemberSerialization)">
            <summary>
            Initializes a new instance of the <see cref="T:Argon.JsonObjectAttribute" /> class with the specified member serialization.
            </summary>
        </member>
        <member name="T:Argon.JsonPropertyAttribute">
            <summary>
            Instructs the <see cref="T:Argon.JsonSerializer" /> to always serialize the member with the specified name.
            </summary>
        </member>
        <member name="P:Argon.JsonPropertyAttribute.ItemConverterType">
            <summary>
            Gets or sets the <see cref="T:Argon.JsonConverter" /> type used when serializing the property's collection items.
            </summary>
        </member>
        <member name="P:Argon.JsonPropertyAttribute.NullValueHandling">
            <summary>
            Gets or sets the null value handling used when serializing this property.
            </summary>
        </member>
        <member name="P:Argon.JsonPropertyAttribute.DefaultValueHandling">
            <summary>
            Gets or sets the default value handling used when serializing this property.
            </summary>
        </member>
        <member name="P:Argon.JsonPropertyAttribute.ReferenceLoopHandling">
            <summary>
            Gets or sets the reference loop handling used when serializing this property.
            </summary>
        </member>
        <member name="P:Argon.JsonPropertyAttribute.ObjectCreationHandling">
            <summary>
            Gets or sets the object creation handling used when deserializing this property.
            </summary>
        </member>
        <member name="P:Argon.JsonPropertyAttribute.TypeNameHandling">
            <summary>
            Gets or sets the type name handling used when serializing this property.
            </summary>
        </member>
        <member name="P:Argon.JsonPropertyAttribute.IsReference">
            <summary>
            Gets or sets whether this property's value is serialized as a reference.
            </summary>
        </member>
        <member name="P:Argon.JsonPropertyAttribute.Order">
            <summary>
            Gets or sets the order of serialization of a member.
            </summary>
        </member>
        <member name="P:Argon.JsonPropertyAttribute.Required">
            <summary>
            Gets or sets a value indicating whether this property is required.
            </summary>
        </member>
        <member name="P:Argon.JsonPropertyAttribute.PropertyName">
            <summary>
            Gets or sets the name of the property.
            </summary>
        </member>
        <member name="P:Argon.JsonPropertyAttribute.ItemReferenceLoopHandling">
            <summary>
            Gets or sets the reference loop handling used when serializing the property's collection items.
            </summary>
        </member>
        <member name="P:Argon.JsonPropertyAttribute.ItemTypeNameHandling">
            <summary>
            Gets or sets the type name handling used when serializing the property's collection items.
            </summary>
        </member>
        <member name="P:Argon.JsonPropertyAttribute.ItemIsReference">
            <summary>
            Gets or sets whether this property's collection items are serialized as a reference.
            </summary>
        </member>
        <member name="M:Argon.JsonPropertyAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Argon.JsonPropertyAttribute" /> class.
            </summary>
        </member>
        <member name="M:Argon.JsonPropertyAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Argon.JsonPropertyAttribute" /> class with the specified name.
            </summary>
            <param name="propertyName">Name of the property.</param>
        </member>
        <member name="T:Argon.JsonReader">
            <summary>
            Represents a reader that provides fast, non-cached, forward-only access to serialized JSON data.
            </summary>
        </member>
        <member name="T:Argon.JsonReader.State">
            <summary>
            Specifies the state of the reader.
            </summary>
        </member>
        <member name="F:Argon.JsonReader.State.Start">
            <summary>
            A <see cref="T:Argon.JsonReader" /> read method has not been called.
            </summary>
        </member>
        <member name="F:Argon.JsonReader.State.Property">
            <summary>
            Reader is at a property.
            </summary>
        </member>
        <member name="F:Argon.JsonReader.State.ObjectStart">
            <summary>
            Reader is at the start of an object.
            </summary>
        </member>
        <member name="F:Argon.JsonReader.State.Object">
            <summary>
            Reader is in an object.
            </summary>
        </member>
        <member name="F:Argon.JsonReader.State.ArrayStart">
            <summary>
            Reader is at the start of an array.
            </summary>
        </member>
        <member name="F:Argon.JsonReader.State.Array">
            <summary>
            Reader is in an array.
            </summary>
        </member>
        <member name="F:Argon.JsonReader.State.Closed">
            <summary>
            The <see cref="M:Argon.JsonReader.Close" /> method has been called.
            </summary>
        </member>
        <member name="F:Argon.JsonReader.State.PostValue">
            <summary>
            Reader has just read a value.
            </summary>
        </member>
        <member name="F:Argon.JsonReader.State.Finished">
            <summary>
            The end of the file has been reached successfully.
            </summary>
        </member>
        <member name="P:Argon.JsonReader.CurrentState">
            <summary>
            Gets the current reader state.
            </summary>
        </member>
        <member name="P:Argon.JsonReader.CloseInput">
            <summary>
            Gets or sets a value indicating whether the source should be closed when this reader is closed.
            </summary>
        </member>
        <member name="P:Argon.JsonReader.SupportMultipleContent">
            <summary>
            Gets or sets a value indicating whether multiple pieces of JSON content can
            be read from a continuous stream without erroring.
            </summary>
        </member>
        <member name="P:Argon.JsonReader.QuoteChar">
            <summary>
            Gets the quotation mark character used to enclose the value of a string.
            </summary>
        </member>
        <member name="P:Argon.JsonReader.FloatParseHandling">
            <summary>
            Gets or sets how floating point numbers, e.g. 1.0 and 9.9, are parsed when reading JSON text.
            </summary>
        </member>
        <member name="P:Argon.JsonReader.MaxDepth">
            <summary>
            Gets or sets the maximum depth allowed when reading JSON. Reading past this depth will throw a <see cref="T:Argon.JsonReaderException" />.
            A null value means there is no maximum.
            The default value is <c>64</c>.
            </summary>
        </member>
        <member name="P:Argon.JsonReader.TokenType">
            <summary>
            Gets the type of the current JSON token.
            </summary>
        </member>
        <member name="M:Argon.JsonReader.GetValue">
            <summary>
            Gets the underlying token value.
            </summary>
        </member>
        <member name="P:Argon.JsonReader.StringValue">
            <summary>
            Gets the underlying token value cast to a string.
            </summary>
        </member>
        <member name="P:Argon.JsonReader.Value">
            <summary>
            Gets the text value of the current JSON token.
            </summary>
        </member>
        <member name="M:Argon.JsonReader.GetValueType">
            <summary>
            Gets the underlying token value.
            </summary>
        </member>
        <member name="P:Argon.JsonReader.ValueType">
            <summary>
            Gets the .NET type for the current JSON token.
            </summary>
        </member>
        <member name="P:Argon.JsonReader.Depth">
            <summary>
            Gets the depth of the current token in the JSON document.
            </summary>
        </member>
        <member name="P:Argon.JsonReader.Path">
            <summary>
            Gets the path of the current JSON token.
            </summary>
        </member>
        <member name="M:Argon.JsonReader.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Argon.JsonReader" /> class.
            </summary>
        </member>
        <member name="M:Argon.JsonReader.Read">
            <summary>
            Reads the next JSON token from the source.
            </summary>
            <returns><c>true</c> if the next token was read successfully; <c>false</c> if there are no more tokens to read.</returns>
        </member>
        <member name="M:Argon.JsonReader.ReadAsInt32">
            <summary>
            Reads the next JSON token from the source as a <see cref="T:System.Nullable`1" /> of <see cref="T:System.Int32" />.
            </summary>
            <returns>A <see cref="T:System.Nullable`1" /> of <see cref="T:System.Int32" />. This method will return <c>null</c> at the end of an array.</returns>
        </member>
        <member name="M:Argon.JsonReader.ReadAsString">
            <summary>
            Reads the next JSON token from the source as a <see cref="T:System.String" />.
            </summary>
            <returns>A <see cref="T:System.String" />. This method will return <c>null</c> at the end of an array.</returns>
        </member>
        <member name="M:Argon.JsonReader.ReadAsBytes">
            <summary>
            Reads the next JSON token from the source as a <see cref="T:System.Byte" />[].
            </summary>
            <returns>A <see cref="T:System.Byte" />[] or <c>null</c> if the next JSON token is null. This method will return <c>null</c> at the end of an array.</returns>
        </member>
        <member name="M:Argon.JsonReader.ReadAsDouble">
            <summary>
            Reads the next JSON token from the source as a <see cref="T:System.Nullable`1" /> of <see cref="T:System.Double" />.
            </summary>
            <returns>A <see cref="T:System.Nullable`1" /> of <see cref="T:System.Double" />. This method will return <c>null</c> at the end of an array.</returns>
        </member>
        <member name="M:Argon.JsonReader.ReadAsBoolean">
            <summary>
            Reads the next JSON token from the source as a <see cref="T:System.Nullable`1" /> of <see cref="T:System.Boolean" />.
            </summary>
            <returns>A <see cref="T:System.Nullable`1" /> of <see cref="T:System.Boolean" />. This method will return <c>null</c> at the end of an array.</returns>
        </member>
        <member name="M:Argon.JsonReader.ReadAsDecimal">
            <summary>
            Reads the next JSON token from the source as a <see cref="T:System.Nullable`1" /> of <see cref="T:System.Decimal" />.
            </summary>
            <returns>A <see cref="T:System.Nullable`1" /> of <see cref="T:System.Decimal" />. This method will return <c>null</c> at the end of an array.</returns>
        </member>
        <member name="M:Argon.JsonReader.ReadAsDateTime">
            <summary>
            Reads the next JSON token from the source as a <see cref="T:System.Nullable`1" /> of <see cref="T:System.DateTime" />.
            </summary>
            <returns>A <see cref="T:System.Nullable`1" /> of <see cref="T:System.DateTime" />. This method will return <c>null</c> at the end of an array.</returns>
        </member>
        <member name="M:Argon.JsonReader.ReadAsDateTimeOffset">
            <summary>
            Reads the next JSON token from the source as a <see cref="T:System.Nullable`1" /> of <see cref="T:System.DateTimeOffset" />.
            </summary>
            <returns>A <see cref="T:System.Nullable`1" /> of <see cref="T:System.DateTimeOffset" />. This method will return <c>null</c> at the end of an array.</returns>
        </member>
        <member name="M:Argon.JsonReader.Skip">
            <summary>
            Skips the children of the current token.
            </summary>
        </member>
        <member name="M:Argon.JsonReader.SetToken(Argon.JsonToken)">
            <summary>
            Sets the current token.
            </summary>
        </member>
        <member name="M:Argon.JsonReader.SetToken(Argon.JsonToken,System.Object)">
            <summary>
            Sets the current token and value.
            </summary>
        </member>
        <member name="M:Argon.JsonReader.SetPropertyToken(System.String)">
            <summary>
            Sets the property token and value.
            </summary>
        </member>
        <member name="M:Argon.JsonReader.SetToken(Argon.JsonToken,System.Object,System.Boolean)">
            <summary>
            Sets the current token and value.
            </summary>
            <param name="updateIndex">A flag indicating whether the position index inside an array should be updated.</param>
        </member>
        <member name="M:Argon.JsonReader.SetNoneToken">
            <summary>
            Sets to <see cref="F:Argon.JsonToken.None"/> token and value.
            </summary>
        </member>
        <member name="M:Argon.JsonReader.SetUndefinedToken">
            <summary>
            Sets to <see cref="F:Argon.JsonToken.Undefined"/> token and value.
            </summary>
        </member>
        <member name="M:Argon.JsonReader.SetNullToken">
            <summary>
            Sets to <see cref="F:Argon.JsonToken.Null"/> token and value.
            </summary>
        </member>
        <member name="M:Argon.JsonReader.SetToken(System.Nullable{System.DateTime})">
            <summary>
            Sets to <see cref="F:Argon.JsonToken.Date"/> token and value.
            </summary>
        </member>
        <member name="M:Argon.JsonReader.SetToken(System.Nullable{System.DateTimeOffset})">
            <summary>
            Sets to <see cref="F:Argon.JsonToken.Date"/> token and value.
            </summary>
        </member>
        <member name="M:Argon.JsonReader.SetToken(System.Nullable{System.Boolean})">
            <summary>
            Sets to <see cref="F:Argon.JsonToken.Boolean"/> token and value.
            </summary>
        </member>
        <member name="M:Argon.JsonReader.SetToken(System.Nullable{System.Double})">
            <summary>
            Sets to <see cref="F:Argon.JsonToken.Float"/> token and value.
            </summary>
        </member>
        <member name="M:Argon.JsonReader.SetToken(System.Nullable{System.Single})">
            <summary>
            Sets to <see cref="F:Argon.JsonToken.Float"/> token and value.
            </summary>
        </member>
        <member name="M:Argon.JsonReader.SetToken(System.Nullable{System.Decimal})">
            <summary>
            Sets to <see cref="F:Argon.JsonToken.Float"/> token and value.
            </summary>
        </member>
        <member name="M:Argon.JsonReader.SetToken(System.String)">
            <summary>
            Sets to <see cref="F:Argon.JsonToken.String"/> token and value.
            </summary>
        </member>
        <member name="M:Argon.JsonReader.SetToken(System.Nullable{System.Int32})">
            <summary>
            Sets to <see cref="F:Argon.JsonToken.Integer"/> token and value.
            </summary>
        </member>
        <member name="M:Argon.JsonReader.SetToken(System.Byte[])">
            <summary>
            Sets to <see cref="F:Argon.JsonToken.Bytes"/> token and value.
            </summary>
        </member>
        <member name="M:Argon.JsonReader.SetStateBasedOnCurrent">
            <summary>
            Sets the state based on current token type.
            </summary>
        </member>
        <member name="M:Argon.JsonReader.Close">
            <summary>
            Changes the reader's state to <see cref="F:Argon.JsonReader.State.Closed" />.
            If <see cref="P:Argon.JsonReader.CloseInput" /> is set to <c>true</c>, the source is also closed.
            </summary>
        </member>
        <member name="T:Argon.JsonReaderException">
            <summary>
            The exception thrown when an error occurs while reading JSON text.
            </summary>
        </member>
        <member name="P:Argon.JsonReaderException.LineNumber">
            <summary>
            Gets the line number indicating where the error occurred.
            </summary>
        </member>
        <member name="P:Argon.JsonReaderException.LinePosition">
            <summary>
            Gets the line position indicating where the error occurred.
            </summary>
        </member>
        <member name="P:Argon.JsonReaderException.Path">
            <summary>
            Gets the path to the JSON where the error occurred.
            </summary>
        </member>
        <member name="M:Argon.JsonReaderException.#ctor(System.String,System.String,System.Int32,System.Int32,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Argon.JsonReaderException" /> class
            with a specified error message, JSON path, line number, line position, and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="path">The path to the JSON where the error occurred.</param>
            <param name="lineNumber">The line number indicating where the error occurred.</param>
            <param name="linePosition">The line position indicating where the error occurred.</param>
        </member>
        <member name="T:Argon.JsonRequiredAttribute">
            <summary>
            Instructs the <see cref="T:Argon.JsonSerializer" /> to always serialize the member, and to require that the member has a value.
            </summary>
        </member>
        <member name="T:Argon.JsonSerializationException">
            <summary>
            The exception thrown when an error occurs during JSON serialization or deserialization.
            </summary>
        </member>
        <member name="P:Argon.JsonSerializationException.LineNumber">
            <summary>
            Gets the line number indicating where the error occurred.
            </summary>
        </member>
        <member name="P:Argon.JsonSerializationException.LinePosition">
            <summary>
            Gets the line position indicating where the error occurred.
            </summary>
        </member>
        <member name="P:Argon.JsonSerializationException.Path">
            <summary>
            Gets the path to the JSON where the error occurred.
            </summary>
        </member>
        <member name="M:Argon.JsonSerializationException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Argon.JsonSerializationException" /> class
            with a specified error message.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
        </member>
        <member name="M:Argon.JsonSerializationException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Argon.JsonSerializationException" /> class
            with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
        </member>
        <member name="M:Argon.JsonSerializationException.#ctor(System.String,System.String,System.Int32,System.Int32,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Argon.JsonSerializationException" /> class
            with a specified error message, JSON path, line number, line position, and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="path">The path to the JSON where the error occurred.</param>
            <param name="lineNumber">The line number indicating where the error occurred.</param>
            <param name="linePosition">The line position indicating where the error occurred.</param>
        </member>
        <member name="T:Argon.JsonSerializer">
            <summary>
            Serializes and deserializes objects into and from the JSON format.
            The <see cref="T:Argon.JsonSerializer" /> enables you to control how objects are encoded into JSON.
            </summary>
        </member>
        <member name="P:Argon.JsonSerializer.DeserializeError">
            <summary>
            Occurs when the <see cref="T:Argon.JsonSerializer" /> errors during deserialization.
            </summary>
        </member>
        <member name="P:Argon.JsonSerializer.SerializeError">
            <summary>
            Occurs when the <see cref="T:Argon.JsonSerializer" /> errors during serialization.
            </summary>
        </member>
        <member name="P:Argon.JsonSerializer.ReferenceResolver">
            <summary>
            Gets or sets the <see cref="T:Argon.IReferenceResolver" /> used by the serializer when resolving references.
            </summary>
        </member>
        <member name="P:Argon.JsonSerializer.SerializationBinder">
            <summary>
            Gets or sets the <see cref="T:Argon.ISerializationBinder" /> used by the serializer when resolving type names.
            </summary>
        </member>
        <member name="P:Argon.JsonSerializer.EqualityComparer">
            <summary>
            Gets or sets the equality comparer used by the serializer when comparing references.
            </summary>
        </member>
        <member name="P:Argon.JsonSerializer.TypeNameHandling">
            <summary>
            Gets or sets how type name writing and reading is handled by the serializer.
            The default value is <see cref="F:Argon.TypeNameHandling.None" />.
            </summary>
            <remarks>
            <see cref="P:Argon.JsonSerializer.TypeNameHandling" /> should be used with caution when your application deserializes JSON from an external source.
            Incoming types should be validated with a custom <see cref="P:Argon.JsonSerializer.SerializationBinder" />
            when deserializing with a value other than <see cref="F:Argon.TypeNameHandling.None" />.
            </remarks>
        </member>
        <member name="P:Argon.JsonSerializer.TypeNameAssemblyFormatHandling">
            <summary>
            Gets or sets how a type name assembly is written and resolved by the serializer.
            The default value is <see cref="F:Argon.TypeNameAssemblyFormatHandling.Simple" />.
            </summary>
        </member>
        <member name="P:Argon.JsonSerializer.PreserveReferencesHandling">
            <summary>
            Gets or sets how object references are preserved by the serializer.
            The default value is <see cref="F:Argon.PreserveReferencesHandling.None" />.
            </summary>
        </member>
        <member name="P:Argon.JsonSerializer.ReferenceLoopHandling">
            <summary>
            Gets or sets how reference loops (e.g. a class referencing itself) is handled.
            The default value is <see cref="F:Argon.ReferenceLoopHandling.Error" />.
            </summary>
        </member>
        <member name="P:Argon.JsonSerializer.MissingMemberHandling">
            <summary>
            Gets or sets how missing members (e.g. JSON contains a property that isn't a member on the object) are handled during deserialization.
            The default value is <see cref="F:Argon.MissingMemberHandling.Ignore" />.
            </summary>
        </member>
        <member name="P:Argon.JsonSerializer.NullValueHandling">
            <summary>
            Gets or sets how null values are handled during serialization and deserialization.
            The default value is <see cref="F:Argon.NullValueHandling.Include" />.
            </summary>
        </member>
        <member name="P:Argon.JsonSerializer.DefaultValueHandling">
            <summary>
            Gets or sets how default values are handled during serialization and deserialization.
            The default value is <see cref="F:Argon.DefaultValueHandling.Include" />.
            </summary>
        </member>
        <member name="P:Argon.JsonSerializer.ObjectCreationHandling">
            <summary>
            Gets or sets how objects are created during deserialization.
            The default value is <see cref="F:Argon.ObjectCreationHandling.Auto" />.
            </summary>
        </member>
        <member name="P:Argon.JsonSerializer.ConstructorHandling">
            <summary>
            Gets or sets how constructors are used during deserialization.
            The default value is <see cref="F:Argon.ConstructorHandling.Default" />.
            </summary>
        </member>
        <member name="P:Argon.JsonSerializer.MetadataPropertyHandling">
            <summary>
            Gets or sets how metadata properties are used during deserialization.
            The default value is <see cref="F:Argon.MetadataPropertyHandling.Default" />.
            </summary>
        </member>
        <member name="P:Argon.JsonSerializer.Converters">
            <summary>
            Gets a collection <see cref="T:Argon.JsonConverter" /> that will be used during serialization.
            </summary>
        </member>
        <member name="P:Argon.JsonSerializer.ContractResolver">
            <summary>
            Gets or sets the contract resolver used by the serializer when
            serializing .NET objects to JSON and vice versa.
            </summary>
        </member>
        <member name="P:Argon.JsonSerializer.Formatting">
            <summary>
            Indicates how JSON text output is formatted.
            The default value is <see cref="F:Argon.Formatting.None" />.
            </summary>
        </member>
        <member name="P:Argon.JsonSerializer.FloatParseHandling">
            <summary>
            Gets or sets how floating point numbers, e.g. 1.0 and 9.9, are parsed when reading JSON text.
            The default value is <see cref="F:Argon.FloatParseHandling.Double" />.
            </summary>
        </member>
        <member name="P:Argon.JsonSerializer.FloatPrecision">
            <summary>
            Gets or sets how many decimal points to use when serializing floats and doubles.
            </summary>
        </member>
        <member name="P:Argon.JsonSerializer.FloatFormatHandling">
            <summary>
            Gets or sets how special floating point numbers, e.g. <see cref="F:System.Double.NaN" />,
            <see cref="F:System.Double.PositiveInfinity" /> and <see cref="F:System.Double.NegativeInfinity" />,
            are written as JSON text.
            The default value is <see cref="F:Argon.FloatFormatHandling.String" />.
            </summary>
        </member>
        <member name="P:Argon.JsonSerializer.EscapeHandling">
            <summary>
            Gets or sets how strings are escaped when writing JSON text.
            The default value is <see cref="F:Argon.EscapeHandling.Default" />.
            </summary>
        </member>
        <member name="P:Argon.JsonSerializer.MaxDepth">
            <summary>
            Gets or sets the maximum depth allowed when reading JSON. Reading past this depth will throw a <see cref="T:Argon.JsonReaderException" />.
            A null value means there is no maximum.
            The default value is <c>64</c>.
            </summary>
        </member>
        <member name="P:Argon.JsonSerializer.CheckAdditionalContent">
            <summary>
            Gets a value indicating whether there will be a check for additional JSON content after deserializing an object.
            The default value is <c>false</c>.
            </summary>
        </member>
        <member name="M:Argon.JsonSerializer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Argon.JsonSerializer" /> class.
            </summary>
        </member>
        <member name="M:Argon.JsonSerializer.Create">
            <summary>
            Creates a new <see cref="T:Argon.JsonSerializer" /> instance.
            The <see cref="T:Argon.JsonSerializer" /> will not use default settings
            from <see cref="P:Argon.JsonConvert.DefaultSettings" />.
            </summary>
            <returns>
            A new <see cref="T:Argon.JsonSerializer" /> instance.
            The <see cref="T:Argon.JsonSerializer" /> will not use default settings
            from <see cref="P:Argon.JsonConvert.DefaultSettings" />.
            </returns>
        </member>
        <member name="M:Argon.JsonSerializer.Create(Argon.JsonSerializerSettings)">
            <summary>
            Creates a new <see cref="T:Argon.JsonSerializer" /> instance using the specified <see cref="T:Argon.JsonSerializerSettings" />.
            The <see cref="T:Argon.JsonSerializer" /> will not use default settings
            from <see cref="P:Argon.JsonConvert.DefaultSettings" />.
            </summary>
            <returns>
            A new <see cref="T:Argon.JsonSerializer" /> instance using the specified <see cref="T:Argon.JsonSerializerSettings" />.
            The <see cref="T:Argon.JsonSerializer" /> will not use default settings
            from <see cref="P:Argon.JsonConvert.DefaultSettings" />.
            </returns>
        </member>
        <member name="M:Argon.JsonSerializer.CreateDefault">
            <summary>
            Creates a new <see cref="T:Argon.JsonSerializer" /> instance.
            The <see cref="T:Argon.JsonSerializer" /> will use default settings
            from <see cref="P:Argon.JsonConvert.DefaultSettings" />.
            </summary>
            <returns>
            A new <see cref="T:Argon.JsonSerializer" /> instance.
            The <see cref="T:Argon.JsonSerializer" /> will use default settings
            from <see cref="P:Argon.JsonConvert.DefaultSettings" />.
            </returns>
        </member>
        <member name="M:Argon.JsonSerializer.CreateDefault(Argon.JsonSerializerSettings)">
            <summary>
            Creates a new <see cref="T:Argon.JsonSerializer" /> instance using the specified <see cref="T:Argon.JsonSerializerSettings" />.
            The <see cref="T:Argon.JsonSerializer" /> will use default settings
            from <see cref="P:Argon.JsonConvert.DefaultSettings" /> as well as the specified <see cref="T:Argon.JsonSerializerSettings" />.
            </summary>
            <returns>
            A new <see cref="T:Argon.JsonSerializer" /> instance using the specified <see cref="T:Argon.JsonSerializerSettings" />.
            The <see cref="T:Argon.JsonSerializer" /> will use default settings
            from <see cref="P:Argon.JsonConvert.DefaultSettings" /> as well as the specified <see cref="T:Argon.JsonSerializerSettings" />.
            </returns>
        </member>
        <member name="M:Argon.JsonSerializer.Deserialize(Argon.JsonReader)">
            <summary>
            Deserializes the JSON structure contained by the specified <see cref="T:Argon.JsonReader" />.
            </summary>
            <returns>The <see cref="T:System.Object" /> being deserialized.</returns>
        </member>
        <member name="M:Argon.JsonSerializer.TryDeserialize(Argon.JsonReader)">
            <summary>
            Deserializes the JSON structure contained by the specified <see cref="T:Argon.JsonReader" />.
            </summary>
            <returns>The <see cref="T:System.Object" /> being deserialized.</returns>
        </member>
        <member name="M:Argon.JsonSerializer.Deserialize(System.IO.TextReader,System.Type)">
            <summary>
            Deserializes the JSON structure contained by the specified <see cref="T:System.IO.TextReader" />
            into an instance of the specified type.
            </summary>
        </member>
        <member name="M:Argon.JsonSerializer.TryDeserialize(System.IO.TextReader,System.Type)">
            <summary>
            Deserializes the JSON structure contained by the specified <see cref="T:System.IO.TextReader" />
            into an instance of the specified type.
            </summary>
        </member>
        <member name="M:Argon.JsonSerializer.Deserialize``1(Argon.JsonReader)">
            <summary>
            Deserializes the JSON structure contained by the specified <see cref="T:Argon.JsonReader" />
            into an instance of the specified type.
            </summary>
        </member>
        <member name="M:Argon.JsonSerializer.TryDeserialize``1(Argon.JsonReader)">
            <summary>
            Deserializes the JSON structure contained by the specified <see cref="T:Argon.JsonReader" />
            into an instance of the specified type.
            </summary>
        </member>
        <member name="M:Argon.JsonSerializer.Deserialize(Argon.JsonReader,System.Type)">
            <summary>
            Deserializes the JSON structure contained by the specified <see cref="T:Argon.JsonReader" />
            into an instance of the specified type.
            </summary>
        </member>
        <member name="M:Argon.JsonSerializer.TryDeserialize(Argon.JsonReader,System.Type)">
            <summary>
            Deserializes the JSON structure contained by the specified <see cref="T:Argon.JsonReader" />
            into an instance of the specified type.
            </summary>
        </member>
        <member name="M:Argon.JsonSerializer.Serialize(System.IO.TextWriter,System.Object)">
            <summary>
            Serializes the specified <see cref="T:System.Object" /> and writes the JSON structure
            using the specified <see cref="T:System.IO.TextWriter" />.
            </summary>
        </member>
        <member name="M:Argon.JsonSerializer.Serialize(Argon.JsonWriter,System.Object,System.Type)">
            <summary>
            Serializes the specified <see cref="T:System.Object" /> and writes the JSON structure
            using the specified <see cref="T:Argon.JsonWriter" />.
            </summary>
            <param name="type">
            The type of the value being serialized.
            This parameter is used when <see cref="P:Argon.JsonSerializer.TypeNameHandling" /> is <see cref="F:Argon.TypeNameHandling.Auto" /> to write out the type name if the type of the value does not match.
            Specifying the type is optional.
            </param>
        </member>
        <member name="M:Argon.JsonSerializer.Serialize(System.IO.TextWriter,System.Object,System.Type)">
            <summary>
            Serializes the specified <see cref="T:System.Object" /> and writes the JSON structure
            using the specified <see cref="T:System.IO.TextWriter" />.
            </summary>
            <param name="type">
            The type of the value being serialized.
            This parameter is used when <see cref="P:Argon.JsonSerializer.TypeNameHandling" /> is Auto to write out the type name if the type of the value does not match.
            Specifying the type is optional.
            </param>
        </member>
        <member name="M:Argon.JsonSerializer.Serialize(Argon.JsonWriter,System.Object)">
            <summary>
            Serializes the specified <see cref="T:System.Object" /> and writes the JSON structure
            using the specified <see cref="T:Argon.JsonWriter" />.
            </summary>
        </member>
        <member name="T:Argon.JsonSerializerSettings">
            <summary>
            Specifies the settings on a <see cref="T:Argon.JsonSerializer" /> object.
            </summary>
        </member>
        <member name="P:Argon.JsonSerializerSettings.ReferenceLoopHandling">
            <summary>
            Gets or sets how reference loops (e.g. a class referencing itself) are handled.
            The default value is <see cref="F:Argon.ReferenceLoopHandling.Error" />.
            </summary>
        </member>
        <member name="P:Argon.JsonSerializerSettings.MissingMemberHandling">
            <summary>
            Gets or sets how missing members (e.g. JSON contains a property that isn't a member on the object) are handled during deserialization.
            The default value is <see cref="F:Argon.MissingMemberHandling.Ignore" />.
            </summary>
        </member>
        <member name="P:Argon.JsonSerializerSettings.ObjectCreationHandling">
            <summary>
            Gets or sets how objects are created during deserialization.
            The default value is <see cref="F:Argon.ObjectCreationHandling.Auto" />.
            </summary>
        </member>
        <member name="P:Argon.JsonSerializerSettings.NullValueHandling">
            <summary>
            Gets or sets how null values are handled during serialization and deserialization.
            The default value is <see cref="F:Argon.NullValueHandling.Include" />.
            </summary>
        </member>
        <member name="P:Argon.JsonSerializerSettings.DefaultValueHandling">
            <summary>
            Gets or sets how default values are handled during serialization and deserialization.
            The default value is <see cref="F:Argon.DefaultValueHandling.Include" />.
            </summary>
        </member>
        <member name="P:Argon.JsonSerializerSettings.Converters">
            <summary>
            Gets or sets a <see cref="T:Argon.JsonConverter" /> collection that will be used during serialization.
            </summary>
        </member>
        <member name="P:Argon.JsonSerializerSettings.PreserveReferencesHandling">
            <summary>
            Gets or sets how object references are preserved by the serializer.
            The default value is <see cref="F:Argon.PreserveReferencesHandling.None" />.
            </summary>
        </member>
        <member name="P:Argon.JsonSerializerSettings.TypeNameHandling">
            <summary>
            Gets or sets how type name writing and reading is handled by the serializer.
            The default value is <see cref="F:Argon.TypeNameHandling.None" />.
            </summary>
            <remarks>
            <see cref="P:Argon.JsonSerializerSettings.TypeNameHandling" /> should be used with caution when your application deserializes JSON from an external source.
            Incoming types should be validated with a custom <see cref="P:Argon.JsonSerializerSettings.SerializationBinder" />
            when deserializing with a value other than <see cref="F:Argon.TypeNameHandling.None" />.
            </remarks>
        </member>
        <member name="P:Argon.JsonSerializerSettings.MetadataPropertyHandling">
            <summary>
            Gets or sets how metadata properties are used during deserialization.
            The default value is <see cref="F:Argon.MetadataPropertyHandling.Default" />.
            </summary>
        </member>
        <member name="P:Argon.JsonSerializerSettings.TypeNameAssemblyFormatHandling">
            <summary>
            Gets or sets how a type name assembly is written and resolved by the serializer.
            The default value is <see cref="F:Argon.TypeNameAssemblyFormatHandling.Simple" />.
            </summary>
        </member>
        <member name="P:Argon.JsonSerializerSettings.ConstructorHandling">
            <summary>
            Gets or sets how constructors are used during deserialization.
            The default value is <see cref="F:Argon.ConstructorHandling.Default" />.
            </summary>
        </member>
        <member name="P:Argon.JsonSerializerSettings.ContractResolver">
            <summary>
            Gets or sets the contract resolver used by the serializer when
            serializing .NET objects to JSON and vice versa.
            </summary>
        </member>
        <member name="P:Argon.JsonSerializerSettings.EqualityComparer">
            <summary>
            Gets or sets the equality comparer used by the serializer when comparing references.
            </summary>
        </member>
        <member name="P:Argon.JsonSerializerSettings.ReferenceResolverProvider">
            <summary>
            Gets or sets a function that creates the <see cref="T:Argon.IReferenceResolver" /> used by the serializer when resolving references.
            </summary>
        </member>
        <member name="P:Argon.JsonSerializerSettings.SerializationBinder">
            <summary>
            Gets or sets the <see cref="T:Argon.ISerializationBinder" /> used by the serializer when resolving type names.
            </summary>
        </member>
        <member name="P:Argon.JsonSerializerSettings.DeserializeError">
            <summary>
            Gets or sets the error handler called during deserialization.
            </summary>
        </member>
        <member name="P:Argon.JsonSerializerSettings.SerializeError">
            <summary>
            Gets or sets the error handler called during serialization.
            </summary>
        </member>
        <member name="P:Argon.JsonSerializerSettings.MaxDepth">
            <summary>
            Gets or sets the maximum depth allowed when reading JSON. Reading past this depth will throw a <see cref="T:Argon.JsonReaderException" />.
            A null value means there is no maximum.
            The default value is <c>64</c>.
            </summary>
        </member>
        <member name="P:Argon.JsonSerializerSettings.Formatting">
            <summary>
            Indicates how JSON text output is formatted.
            The default value is <see cref="F:Argon.Formatting.None" />.
            </summary>
        </member>
        <member name="P:Argon.JsonSerializerSettings.FloatFormatHandling">
            <summary>
            Gets or sets how special floating point numbers, e.g. <see cref="F:System.Double.NaN" />,
            <see cref="F:System.Double.PositiveInfinity" /> and <see cref="F:System.Double.NegativeInfinity" />,
            are written as JSON.
            The default value is <see cref="F:Argon.FloatFormatHandling.String" />.
            </summary>
        </member>
        <member name="P:Argon.JsonSerializerSettings.FloatParseHandling">
            <summary>
            Gets or sets how floating point numbers, e.g. 1.0 and 9.9, are parsed when reading JSON text.
            The default value is <see cref="F:Argon.FloatParseHandling.Double" />.
            </summary>
        </member>
        <member name="P:Argon.JsonSerializerSettings.FloatPrecision">
            <summary>
            Gets or sets how many decimal points to use when serializing floats and doubles.
            </summary>
        </member>
        <member name="P:Argon.JsonSerializerSettings.EscapeHandling">
            <summary>
            Gets or sets how strings are escaped when writing JSON text.
            The default value is <see cref="F:Argon.EscapeHandling.Default" />.
            </summary>
        </member>
        <member name="P:Argon.JsonSerializerSettings.CheckAdditionalContent">
            <summary>
            Gets a value indicating whether there will be a check for additional content after deserializing an object.
            The default value is <c>false</c>.
            </summary>
        </member>
        <member name="M:Argon.JsonSerializerSettings.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Argon.JsonSerializerSettings" /> class.
            </summary>
        </member>
        <member name="M:Argon.JsonSerializerSettings.#ctor(Argon.JsonSerializerSettings)">
            <summary>
            Initializes a new instance of the <see cref="T:Argon.JsonSerializerSettings"/> class
            using values copied from the passed in <see cref="T:Argon.JsonSerializerSettings"/>.
            </summary>
        </member>
        <member name="T:Argon.JsonTextReader">
            <summary>
            Represents a reader that provides fast, non-cached, forward-only access to JSON text data.
            </summary>
        </member>
        <member name="M:Argon.JsonTextReader.#ctor(System.IO.TextReader,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Argon.JsonTextReader" /> class with the specified <see cref="T:System.IO.TextReader" />.
            </summary>
        </member>
        <member name="P:Argon.JsonTextReader.PropertyNameTable">
            <summary>
            Gets or sets the reader's property name table.
            </summary>
        </member>
        <member name="M:Argon.JsonTextReader.Read">
            <summary>
            Reads the next JSON token from the underlying <see cref="T:System.IO.TextReader" />.
            </summary>
            <returns>
            <c>true</c> if the next token was read successfully; <c>false</c> if there are no more tokens to read.
            </returns>
        </member>
        <member name="M:Argon.JsonTextReader.ReadAsInt32">
            <summary>
            Reads the next JSON token from the underlying <see cref="T:System.IO.TextReader" /> as a <see cref="T:System.Nullable`1" /> of <see cref="T:System.Int32" />.
            </summary>
            <returns>A <see cref="T:System.Nullable`1" /> of <see cref="T:System.Int32" />. This method will return <c>null</c> at the end of an array.</returns>
        </member>
        <member name="M:Argon.JsonTextReader.ReadAsDateTime">
            <summary>
            Reads the next JSON token from the underlying <see cref="T:System.IO.TextReader" /> as a <see cref="T:System.Nullable`1" /> of <see cref="T:System.DateTime" />.
            </summary>
            <returns>A <see cref="T:System.Nullable`1" /> of <see cref="T:System.DateTime" />. This method will return <c>null</c> at the end of an array.</returns>
        </member>
        <member name="M:Argon.JsonTextReader.ReadAsString">
            <summary>
            Reads the next JSON token from the underlying <see cref="T:System.IO.TextReader" /> as a <see cref="T:System.String" />.
            </summary>
            <returns>A <see cref="T:System.String" />. This method will return <c>null</c> at the end of an array.</returns>
        </member>
        <member name="M:Argon.JsonTextReader.ReadAsBytes">
            <summary>
            Reads the next JSON token from the underlying <see cref="T:System.IO.TextReader" /> as a <see cref="T:System.Byte" />[].
            </summary>
            <returns>A <see cref="T:System.Byte" />[] or <c>null</c> if the next JSON token is null. This method will return <c>null</c> at the end of an array.</returns>
        </member>
        <member name="M:Argon.JsonTextReader.ReadAsBoolean">
            <summary>
            Reads the next JSON token from the underlying <see cref="T:System.IO.TextReader" /> as a <see cref="T:System.Nullable`1" /> of <see cref="T:System.Boolean" />.
            </summary>
            <returns>A <see cref="T:System.Nullable`1" /> of <see cref="T:System.Boolean" />. This method will return <c>null</c> at the end of an array.</returns>
        </member>
        <member name="M:Argon.JsonTextReader.ReadAsDateTimeOffset">
            <summary>
            Reads the next JSON token from the underlying <see cref="T:System.IO.TextReader" /> as a <see cref="T:System.Nullable`1" /> of <see cref="T:System.DateTimeOffset" />.
            </summary>
            <returns>A <see cref="T:System.Nullable`1" /> of <see cref="T:System.DateTimeOffset" />. This method will return <c>null</c> at the end of an array.</returns>
        </member>
        <member name="M:Argon.JsonTextReader.ReadAsDecimal">
            <summary>
            Reads the next JSON token from the underlying <see cref="T:System.IO.TextReader" /> as a <see cref="T:System.Nullable`1" /> of <see cref="T:System.Decimal" />.
            </summary>
            <returns>A <see cref="T:System.Nullable`1" /> of <see cref="T:System.Decimal" />. This method will return <c>null</c> at the end of an array.</returns>
        </member>
        <member name="M:Argon.JsonTextReader.ReadAsDouble">
            <summary>
            Reads the next JSON token from the underlying <see cref="T:System.IO.TextReader" /> as a <see cref="T:System.Nullable`1" /> of <see cref="T:System.Double" />.
            </summary>
            <returns>A <see cref="T:System.Nullable`1" /> of <see cref="T:System.Double" />. This method will return <c>null</c> at the end of an array.</returns>
        </member>
        <member name="M:Argon.JsonTextReader.Close">
            <summary>
            Changes the reader's state to <see cref="F:Argon.JsonReader.State.Closed" />.
            If <see cref="P:Argon.JsonReader.CloseInput" /> is set to <c>true</c>, the underlying <see cref="T:System.IO.TextReader" /> is also closed.
            </summary>
        </member>
        <member name="M:Argon.JsonTextReader.HasLineInfo">
            <summary>
            Gets a value indicating whether the class can return line information.
            </summary>
            <returns>
            <c>true</c> if <see cref="P:Argon.JsonTextReader.LineNumber" /> and <see cref="P:Argon.JsonTextReader.LinePosition" /> can be provided; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:Argon.JsonTextReader.LineNumber">
            <summary>
            Gets the current line number.
            </summary>
        </member>
        <member name="P:Argon.JsonTextReader.LinePosition">
            <summary>
            Gets the current line position.
            </summary>
        </member>
        <member name="T:Argon.JsonTextWriter">
            <summary>
            Represents a writer that provides a fast, non-cached, forward-only way of generating JSON data.
            </summary>
        </member>
        <member name="P:Argon.JsonTextWriter.QuoteChar">
            <summary>
            Gets or sets which character to use to quote attribute values.
            </summary>
        </member>
        <member name="P:Argon.JsonTextWriter.QuoteName">
            <summary>
            Gets or sets a value indicating whether object names will be surrounded with quotes.
            </summary>
        </member>
        <member name="P:Argon.JsonTextWriter.QuoteValue">
            <summary>
            Gets or sets a value indicating whether object values will be surrounded with quotes.
            </summary>
        </member>
        <member name="M:Argon.JsonTextWriter.#ctor(System.IO.TextWriter)">
            <summary>
            Initializes a new instance of the <see cref="T:Argon.JsonTextWriter" /> class using the specified <see cref="T:System.IO.TextWriter" />.
            </summary>
        </member>
        <member name="M:Argon.JsonTextWriter.Flush">
            <summary>
            Flushes whatever is in the buffer to the underlying <see cref="T:System.IO.TextWriter" /> and also flushes the underlying <see cref="T:System.IO.TextWriter" />.
            </summary>
        </member>
        <member name="M:Argon.JsonTextWriter.Close">
            <summary>
            Closes this writer.
            If <see cref="P:Argon.JsonWriter.CloseOutput" /> is set to <c>true</c>, the underlying <see cref="T:System.IO.TextWriter" /> is also closed.
            If <see cref="P:Argon.JsonWriter.AutoCompleteOnClose" /> is set to <c>true</c>, the JSON is auto-completed.
            </summary>
        </member>
        <member name="M:Argon.JsonTextWriter.WriteStartObject">
            <summary>
            Writes the beginning of a JSON object.
            </summary>
        </member>
        <member name="M:Argon.JsonTextWriter.WriteStartArray">
            <summary>
            Writes the beginning of a JSON array.
            </summary>
        </member>
        <member name="M:Argon.JsonTextWriter.WriteEnd(Argon.JsonToken)">
            <summary>
            Writes the specified end token.
            </summary>
        </member>
        <member name="M:Argon.JsonTextWriter.WritePropertyName(System.String)">
            <summary>
            Writes the property name of a name/value pair on a JSON object.
            </summary>
        </member>
        <member name="M:Argon.JsonTextWriter.WritePropertyName(System.ReadOnlySpan{System.Char})">
            <summary>
            Writes the property name of a name/value pair on a JSON object.
            </summary>
        </member>
        <member name="M:Argon.JsonTextWriter.WritePropertyName(System.String,System.Boolean)">
            <summary>
            Writes the property name of a name/value pair on a JSON object.
            </summary>
            <param name="escape">A flag to indicate whether the text should be escaped when it is written as a JSON property name.</param>
        </member>
        <member name="M:Argon.JsonTextWriter.WritePropertyName(System.ReadOnlySpan{System.Char},System.Boolean)">
            <summary>
            Writes the property name of a name/value pair on a JSON object.
            </summary>
            <param name="escape">A flag to indicate whether the text should be escaped when it is written as a JSON property name.</param>
        </member>
        <member name="M:Argon.JsonTextWriter.WriteIndent">
            <summary>
            Writes indent characters.
            </summary>
        </member>
        <member name="M:Argon.JsonTextWriter.WriteValueDelimiter">
            <summary>
            Writes the JSON value delimiter.
            </summary>
        </member>
        <member name="M:Argon.JsonTextWriter.WriteIndentSpace">
            <summary>
            Writes an indent space.
            </summary>
        </member>
        <member name="M:Argon.JsonTextWriter.WriteValue(System.Object)">
            <summary>
            Writes a <see cref="T:System.Object" /> value.
            An error will raised if the value cannot be written as a single JSON token.
            </summary>
        </member>
        <member name="M:Argon.JsonTextWriter.WriteNull">
            <summary>
            Writes a null value.
            </summary>
        </member>
        <member name="M:Argon.JsonTextWriter.WriteUndefined">
            <summary>
            Writes an undefined value.
            </summary>
        </member>
        <member name="M:Argon.JsonTextWriter.WriteRaw(System.String)">
            <summary>
            Writes raw JSON.
            </summary>
        </member>
        <member name="M:Argon.JsonTextWriter.WriteRaw(System.ReadOnlySpan{System.Char})">
            <summary>
            Writes raw JSON.
            </summary>
        </member>
        <member name="M:Argon.JsonTextWriter.WriteValue(System.String)">
            <summary>
            Writes a <see cref="T:System.String" /> value.
            </summary>
        </member>
        <member name="M:Argon.JsonTextWriter.WriteValue(System.ReadOnlySpan{System.Char})">
            <summary>
            Writes a <see cref="T:System.String" /> value.
            </summary>
        </member>
        <member name="M:Argon.JsonTextWriter.WriteValue(System.Int32)">
            <summary>
            Writes a <see cref="T:System.Int32" /> value.
            </summary>
        </member>
        <member name="M:Argon.JsonTextWriter.WriteValue(System.UInt32)">
            <summary>
            Writes a <see cref="T:System.UInt32" /> value.
            </summary>
        </member>
        <member name="M:Argon.JsonTextWriter.WriteValue(System.Int64)">
            <summary>
            Writes a <see cref="T:System.Int64" /> value.
            </summary>
        </member>
        <member name="M:Argon.JsonTextWriter.WriteValue(System.UInt64)">
            <summary>
            Writes a <see cref="T:System.UInt64" /> value.
            </summary>
        </member>
        <member name="M:Argon.JsonTextWriter.WriteValue(System.Single)">
            <summary>
            Writes a <see cref="T:System.Single" /> value.
            </summary>
        </member>
        <member name="M:Argon.JsonTextWriter.WriteValue(System.Nullable{System.Single})">
            <summary>
            Writes a <see cref="T:System.Nullable`1" /> of <see cref="T:System.Single" /> value.
            </summary>
        </member>
        <member name="M:Argon.JsonTextWriter.WriteValue(System.Double)">
            <summary>
            Writes a <see cref="T:System.Double" /> value.
            </summary>
        </member>
        <member name="M:Argon.JsonTextWriter.WriteValue(System.Nullable{System.Double})">
            <summary>
            Writes a <see cref="T:System.Nullable`1" /> of <see cref="T:System.Double" /> value.
            </summary>
        </member>
        <member name="M:Argon.JsonTextWriter.WriteValue(System.Boolean)">
            <summary>
            Writes a <see cref="T:System.Boolean" /> value.
            </summary>
        </member>
        <member name="M:Argon.JsonTextWriter.WriteValue(System.Int16)">
            <summary>
            Writes a <see cref="T:System.Int16" /> value.
            </summary>
        </member>
        <member name="M:Argon.JsonTextWriter.WriteValue(System.UInt16)">
            <summary>
            Writes a <see cref="T:System.UInt16" /> value.
            </summary>
        </member>
        <member name="M:Argon.JsonTextWriter.WriteValue(System.Char)">
            <summary>
            Writes a <see cref="T:System.Char" /> value.
            </summary>
        </member>
        <member name="M:Argon.JsonTextWriter.WriteValue(System.Byte)">
            <summary>
            Writes a <see cref="T:System.Byte" /> value.
            </summary>
        </member>
        <member name="M:Argon.JsonTextWriter.WriteValue(System.SByte)">
            <summary>
            Writes a <see cref="T:System.SByte" /> value.
            </summary>
        </member>
        <member name="M:Argon.JsonTextWriter.WriteValue(System.Decimal)">
            <summary>
            Writes a <see cref="T:System.Decimal" /> value.
            </summary>
        </member>
        <member name="M:Argon.JsonTextWriter.WriteValue(System.DateTime)">
            <summary>
            Writes a <see cref="T:System.DateTime" /> value.
            </summary>
        </member>
        <member name="M:Argon.JsonTextWriter.WriteValue(System.Byte[])">
            <summary>
            Writes a <see cref="T:System.Byte" />[] value.
            </summary>
        </member>
        <member name="M:Argon.JsonTextWriter.WriteValue(System.DateTimeOffset)">
            <summary>
            Writes a <see cref="T:System.DateTimeOffset" /> value.
            </summary>
        </member>
        <member name="M:Argon.JsonTextWriter.WriteValue(System.Guid)">
            <summary>
            Writes a <see cref="T:System.Guid" /> value.
            </summary>
        </member>
        <member name="M:Argon.JsonTextWriter.WriteValue(System.TimeSpan)">
            <summary>
            Writes a <see cref="T:System.TimeSpan" /> value.
            </summary>
        </member>
        <member name="M:Argon.JsonTextWriter.WriteValue(System.Uri)">
            <summary>
            Writes a <see cref="T:System.Uri" /> value.
            </summary>
        </member>
        <member name="M:Argon.JsonTextWriter.WriteComment(System.String)">
            <summary>
            Writes a comment <c>/*...*/</c> containing the specified text.
            </summary>
        </member>
        <member name="M:Argon.JsonTextWriter.WriteWhitespace(System.String)">
            <summary>
            Writes the given white space.
            </summary>
        </member>
        <member name="T:Argon.JsonToken">
            <summary>
            Specifies the type of JSON token.
            </summary>
        </member>
        <member name="F:Argon.JsonToken.None">
            <summary>
            This is returned by the <see cref="T:Argon.JsonReader" /> if a read method has not been called.
            </summary>
        </member>
        <member name="F:Argon.JsonToken.StartObject">
            <summary>
            An object start token.
            </summary>
        </member>
        <member name="F:Argon.JsonToken.StartArray">
            <summary>
            An array start token.
            </summary>
        </member>
        <member name="F:Argon.JsonToken.PropertyName">
            <summary>
            An object property name.
            </summary>
        </member>
        <member name="F:Argon.JsonToken.Comment">
            <summary>
            A comment.
            </summary>
        </member>
        <member name="F:Argon.JsonToken.Raw">
            <summary>
            Raw JSON.
            </summary>
        </member>
        <member name="F:Argon.JsonToken.Integer">
            <summary>
            An integer.
            </summary>
        </member>
        <member name="F:Argon.JsonToken.Float">
            <summary>
            A float.
            </summary>
        </member>
        <member name="F:Argon.JsonToken.String">
            <summary>
            A string.
            </summary>
        </member>
        <member name="F:Argon.JsonToken.Boolean">
            <summary>
            A boolean.
            </summary>
        </member>
        <member name="F:Argon.JsonToken.Null">
            <summary>
            A null token.
            </summary>
        </member>
        <member name="F:Argon.JsonToken.Undefined">
            <summary>
            An undefined token.
            </summary>
        </member>
        <member name="F:Argon.JsonToken.EndObject">
            <summary>
            An object end token.
            </summary>
        </member>
        <member name="F:Argon.JsonToken.EndArray">
            <summary>
            An array end token.
            </summary>
        </member>
        <member name="F:Argon.JsonToken.Date">
            <summary>
            A Date.
            </summary>
        </member>
        <member name="F:Argon.JsonToken.Bytes">
            <summary>
            Byte data.
            </summary>
        </member>
        <member name="T:Argon.JsonWriter">
            <summary>
            Represents a writer that provides a fast, non-cached, forward-only way of generating JSON data.
            </summary>
        </member>
        <member name="P:Argon.JsonWriter.CloseOutput">
            <summary>
            Gets or sets a value indicating whether the destination should be closed when this writer is closed.
            </summary>
        </member>
        <member name="P:Argon.JsonWriter.AutoCompleteOnClose">
            <summary>
            Gets or sets a value indicating whether the JSON should be auto-completed when this writer is closed.
            </summary>
        </member>
        <member name="P:Argon.JsonWriter.Top">
            <summary>
            Gets the top.
            </summary>
        </member>
        <member name="P:Argon.JsonWriter.WriteState">
            <summary>
            Gets the state of the writer.
            </summary>
        </member>
        <member name="P:Argon.JsonWriter.Path">
            <summary>
            Gets the path of the writer.
            </summary>
        </member>
        <member name="P:Argon.JsonWriter.Formatting">
            <summary>
            Gets or sets a value indicating how JSON text output should be formatted.
            </summary>
        </member>
        <member name="P:Argon.JsonWriter.EscapeHandling">
            <summary>
            Gets or sets how strings are escaped when writing JSON text.
            </summary>
        </member>
        <member name="P:Argon.JsonWriter.FloatFormatHandling">
            <summary>
            Gets or sets how special floating point numbers, e.g. <see cref="F:System.Double.NaN" />,
            <see cref="F:System.Double.PositiveInfinity" /> and <see cref="F:System.Double.NegativeInfinity" />,
            are written to JSON text.
            </summary>
        </member>
        <member name="P:Argon.JsonWriter.FloatPrecision">
            <summary>
            Gets or sets how many decimal points to use when serializing floats and doubles.
            </summary>
        </member>
        <member name="M:Argon.JsonWriter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Argon.JsonWriter" /> class.
            </summary>
        </member>
        <member name="M:Argon.JsonWriter.Flush">
            <summary>
            Flushes whatever is in the buffer to the destination and also flushes the destination.
            </summary>
        </member>
        <member name="M:Argon.JsonWriter.Close">
            <summary>
            Closes this writer.
            If <see cref="P:Argon.JsonWriter.CloseOutput" /> is set to <c>true</c>, the destination is also closed.
            If <see cref="P:Argon.JsonWriter.AutoCompleteOnClose" /> is set to <c>true</c>, the JSON is auto-completed.
            </summary>
        </member>
        <member name="M:Argon.JsonWriter.WriteStartObject">
            <summary>
            Writes the beginning of a JSON object.
            </summary>
        </member>
        <member name="M:Argon.JsonWriter.WriteEndObject">
            <summary>
            Writes the end of a JSON object.
            </summary>
        </member>
        <member name="M:Argon.JsonWriter.WriteStartArray">
            <summary>
            Writes the beginning of a JSON array.
            </summary>
        </member>
        <member name="M:Argon.JsonWriter.WriteEndArray">
            <summary>
            Writes the end of an array.
            </summary>
        </member>
        <member name="M:Argon.JsonWriter.WritePropertyName(System.String)">
            <summary>
            Writes the property name of a name/value pair of a JSON object.
            </summary>
        </member>
        <member name="M:Argon.JsonWriter.WritePropertyName(System.String,System.Boolean)">
            <summary>
            Writes the property name of a name/value pair of a JSON object.
            </summary>
            <param name="escape">A flag to indicate whether the text should be escaped when it is written as a JSON property name.</param>
        </member>
        <member name="M:Argon.JsonWriter.WritePropertyName(System.ReadOnlySpan{System.Char})">
            <summary>
            Writes the property name of a name/value pair of a JSON object.
            </summary>
        </member>
        <member name="M:Argon.JsonWriter.WritePropertyName(System.ReadOnlySpan{System.Char},System.Boolean)">
            <summary>
            Writes the property name of a name/value pair of a JSON object.
            </summary>
            <param name="escape">A flag to indicate whether the text should be escaped when it is written as a JSON property name.</param>
        </member>
        <member name="M:Argon.JsonWriter.WriteEnd">
            <summary>
            Writes the end of the current JSON object or array.
            </summary>
        </member>
        <member name="M:Argon.JsonWriter.WriteToken(Argon.JsonReader)">
            <summary>
            Writes the current <see cref="T:Argon.JsonReader" /> token and its children.
            </summary>
        </member>
        <member name="M:Argon.JsonWriter.WriteToken(Argon.JsonReader,System.Boolean)">
            <summary>
            Writes the current <see cref="T:Argon.JsonReader" /> token.
            </summary>
            <param name="writeChildren">A flag indicating whether the current token's children should be written.</param>
        </member>
        <member name="M:Argon.JsonWriter.WriteToken(Argon.JsonToken,System.Object)">
            <summary>
            Writes the <see cref="T:Argon.JsonToken" /> token and its value.
            </summary>
            <param name="value">
            The value to write.
            A value is only required for tokens that have an associated value, e.g. the <see cref="F:Argon.JsonToken.String" /> property name for <see cref="F:Argon.JsonToken.PropertyName" />.
            <c>null</c> can be passed to the method for tokens that don't have a value, e.g. <see cref="F:Argon.JsonToken.StartObject" />.
            </param>
        </member>
        <member name="M:Argon.JsonWriter.WriteToken(Argon.JsonToken)">
            <summary>
            Writes the <see cref="T:Argon.JsonToken" /> token.
            </summary>
        </member>
        <member name="M:Argon.JsonWriter.WriteEnd(Argon.JsonToken)">
            <summary>
            Writes the specified end token.
            </summary>
        </member>
        <member name="M:Argon.JsonWriter.WriteIndent">
            <summary>
            Writes indent characters.
            </summary>
        </member>
        <member name="M:Argon.JsonWriter.WriteValueDelimiter">
            <summary>
            Writes the JSON value delimiter.
            </summary>
        </member>
        <member name="M:Argon.JsonWriter.WriteIndentSpace">
            <summary>
            Writes an indent space.
            </summary>
        </member>
        <member name="M:Argon.JsonWriter.WriteNull">
            <summary>
            Writes a null value.
            </summary>
        </member>
        <member name="M:Argon.JsonWriter.WriteUndefined">
            <summary>
            Writes an undefined value.
            </summary>
        </member>
        <member name="M:Argon.JsonWriter.WriteRaw(System.String)">
            <summary>
            Writes raw JSON without changing the writer's state.
            </summary>
        </member>
        <member name="M:Argon.JsonWriter.WriteRaw(System.ReadOnlySpan{System.Char})">
            <summary>
            Writes raw JSON without changing the writer's state.
            </summary>
        </member>
        <member name="M:Argon.JsonWriter.WriteRawValue(System.ReadOnlySpan{System.Char})">
            <summary>
            Writes raw JSON where a value is expected and updates the writer's state.
            </summary>
        </member>
        <member name="M:Argon.JsonWriter.WriteRawValue(System.String)">
            <summary>
            Writes raw JSON where a value is expected and updates the writer's state.
            </summary>
        </member>
        <member name="M:Argon.JsonWriter.WriteValue(System.ReadOnlySpan{System.Char})">
            <summary>
            Writes a <see cref="F:Argon.JsonToken.String" /> value.
            </summary>
        </member>
        <member name="M:Argon.JsonWriter.WriteValue(System.Text.StringBuilder)">
            <summary>
            Writes a <see cref="T:System.Text.StringBuilder" /> value.
            </summary>
        </member>
        <member name="M:Argon.JsonWriter.WriteValue(System.String)">
            <summary>
            Writes a <see cref="F:Argon.JsonToken.String" /> value.
            </summary>
        </member>
        <member name="M:Argon.JsonWriter.WriteValue(System.Int32)">
            <summary>
            Writes a <see cref="T:System.Int32" /> value.
            </summary>
        </member>
        <member name="M:Argon.JsonWriter.WriteValue(System.UInt32)">
            <summary>
            Writes a <see cref="T:System.UInt32" /> value.
            </summary>
        </member>
        <member name="M:Argon.JsonWriter.WriteValue(System.Int64)">
            <summary>
            Writes a <see cref="T:System.Int64" /> value.
            </summary>
        </member>
        <member name="M:Argon.JsonWriter.WriteValue(System.UInt64)">
            <summary>
            Writes a <see cref="T:System.UInt64" /> value.
            </summary>
        </member>
        <member name="M:Argon.JsonWriter.WriteValue(System.Single)">
            <summary>
            Writes a <see cref="T:System.Single" /> value.
            </summary>
        </member>
        <member name="M:Argon.JsonWriter.WriteValue(System.Double)">
            <summary>
            Writes a <see cref="T:System.Double" /> value.
            </summary>
        </member>
        <member name="M:Argon.JsonWriter.WriteValue(System.Boolean)">
            <summary>
            Writes a <see cref="F:Argon.JsonToken.Boolean" /> value.
            </summary>
        </member>
        <member name="M:Argon.JsonWriter.WriteValue(System.Int16)">
            <summary>
            Writes a <see cref="T:System.Int16" /> value.
            </summary>
        </member>
        <member name="M:Argon.JsonWriter.WriteValue(System.UInt16)">
            <summary>
            Writes a <see cref="T:System.UInt16" /> value.
            </summary>
        </member>
        <member name="M:Argon.JsonWriter.WriteValue(System.Char)">
            <summary>
            Writes a <see cref="T:System.Char" /> value.
            </summary>
        </member>
        <member name="M:Argon.JsonWriter.WriteValue(System.Byte)">
            <summary>
            Writes a <see cref="T:System.Byte" /> value.
            </summary>
        </member>
        <member name="M:Argon.JsonWriter.WriteValue(System.SByte)">
            <summary>
            Writes a <see cref="T:System.SByte" /> value.
            </summary>
        </member>
        <member name="M:Argon.JsonWriter.WriteValue(System.Decimal)">
            <summary>
            Writes a <see cref="T:System.Decimal" /> value.
            </summary>
        </member>
        <member name="M:Argon.JsonWriter.WriteValue(System.DateTime)">
            <summary>
            Writes a <see cref="T:System.DateTime" /> value.
            </summary>
        </member>
        <member name="M:Argon.JsonWriter.WriteValue(System.DateTimeOffset)">
            <summary>
            Writes a <see cref="T:System.DateTimeOffset" /> value.
            </summary>
        </member>
        <member name="M:Argon.JsonWriter.WriteValue(System.Guid)">
            <summary>
            Writes a <see cref="T:System.Guid" /> value.
            </summary>
        </member>
        <member name="M:Argon.JsonWriter.WriteValue(System.TimeSpan)">
            <summary>
            Writes a <see cref="T:System.TimeSpan" /> value.
            </summary>
        </member>
        <member name="M:Argon.JsonWriter.WriteValue(System.Nullable{System.Int32})">
            <summary>
            Writes a <see cref="T:System.Nullable`1" /> of <see cref="T:System.Int32" /> value.
            </summary>
        </member>
        <member name="M:Argon.JsonWriter.WriteValue(System.Nullable{System.UInt32})">
            <summary>
            Writes a <see cref="T:System.Nullable`1" /> of <see cref="T:System.UInt32" /> value.
            </summary>
        </member>
        <member name="M:Argon.JsonWriter.WriteValue(System.Nullable{System.Int64})">
            <summary>
            Writes a <see cref="T:System.Nullable`1" /> of <see cref="T:System.Int64" /> value.
            </summary>
        </member>
        <member name="M:Argon.JsonWriter.WriteValue(System.Nullable{System.UInt64})">
            <summary>
            Writes a <see cref="T:System.Nullable`1" /> of <see cref="T:System.UInt64" /> value.
            </summary>
        </member>
        <member name="M:Argon.JsonWriter.WriteValue(System.Nullable{System.Single})">
            <summary>
            Writes a <see cref="T:System.Nullable`1" /> of <see cref="T:System.Single" /> value.
            </summary>
        </member>
        <member name="M:Argon.JsonWriter.WriteValue(System.Nullable{System.Double})">
            <summary>
            Writes a <see cref="T:System.Nullable`1" /> of <see cref="T:System.Double" /> value.
            </summary>
        </member>
        <member name="M:Argon.JsonWriter.WriteValue(System.Nullable{System.Boolean})">
            <summary>
            Writes a <see cref="T:System.Nullable`1" /> of <see cref="F:Argon.JsonToken.Boolean" /> value.
            </summary>
        </member>
        <member name="M:Argon.JsonWriter.WriteValue(System.Nullable{System.Int16})">
            <summary>
            Writes a <see cref="T:System.Nullable`1" /> of <see cref="T:System.Int16" /> value.
            </summary>
        </member>
        <member name="M:Argon.JsonWriter.WriteValue(System.Nullable{System.UInt16})">
            <summary>
            Writes a <see cref="T:System.Nullable`1" /> of <see cref="T:System.UInt16" /> value.
            </summary>
        </member>
        <member name="M:Argon.JsonWriter.WriteValue(System.Nullable{System.Char})">
            <summary>
            Writes a <see cref="T:System.Nullable`1" /> of <see cref="T:System.Char" /> value.
            </summary>
        </member>
        <member name="M:Argon.JsonWriter.WriteValue(System.Nullable{System.Byte})">
            <summary>
            Writes a <see cref="T:System.Nullable`1" /> of <see cref="T:System.Byte" /> value.
            </summary>
        </member>
        <member name="M:Argon.JsonWriter.WriteValue(System.Nullable{System.SByte})">
            <summary>
            Writes a <see cref="T:System.Nullable`1" /> of <see cref="T:System.SByte" /> value.
            </summary>
        </member>
        <member name="M:Argon.JsonWriter.WriteValue(System.Nullable{System.Decimal})">
            <summary>
            Writes a <see cref="T:System.Nullable`1" /> of <see cref="T:System.Decimal" /> value.
            </summary>
        </member>
        <member name="M:Argon.JsonWriter.WriteValue(System.Nullable{System.DateTime})">
            <summary>
            Writes a <see cref="T:System.Nullable`1" /> of <see cref="T:System.DateTime" /> value.
            </summary>
        </member>
        <member name="M:Argon.JsonWriter.WriteValue(System.Nullable{System.DateTimeOffset})">
            <summary>
            Writes a <see cref="T:System.Nullable`1" /> of <see cref="T:System.DateTimeOffset" /> value.
            </summary>
        </member>
        <member name="M:Argon.JsonWriter.WriteValue(System.Nullable{System.Guid})">
            <summary>
            Writes a <see cref="T:System.Nullable`1" /> of <see cref="T:System.Guid" /> value.
            </summary>
        </member>
        <member name="M:Argon.JsonWriter.WriteValue(System.Nullable{System.TimeSpan})">
            <summary>
            Writes a <see cref="T:System.Nullable`1" /> of <see cref="T:System.TimeSpan" /> value.
            </summary>
        </member>
        <member name="M:Argon.JsonWriter.WriteValue(System.Byte[])">
            <summary>
            Writes a <see cref="T:System.Byte" />[] value.
            </summary>
        </member>
        <member name="M:Argon.JsonWriter.WriteValue(System.Uri)">
            <summary>
            Writes a <see cref="T:System.Uri" /> value.
            </summary>
        </member>
        <member name="M:Argon.JsonWriter.WriteValue(System.Object)">
            <summary>
            Writes a <see cref="F:Argon.JsonWriter.State.Object" /> value.
            An error will raised if the value cannot be written as a single JSON token.
            </summary>
        </member>
        <member name="M:Argon.JsonWriter.WriteComment(System.String)">
            <summary>
            Writes a comment <c>/*...*/</c> containing the specified text.
            </summary>
        </member>
        <member name="M:Argon.JsonWriter.WriteComment(System.ReadOnlySpan{System.Char})">
            <summary>
            Writes a comment <c>/*...*/</c> containing the specified text.
            </summary>
        </member>
        <member name="M:Argon.JsonWriter.WriteWhitespace(System.String)">
            <summary>
            Writes the given white space.
            </summary>
        </member>
        <member name="M:Argon.JsonWriter.WriteWhitespace(System.ReadOnlySpan{System.Char})">
            <summary>
            Writes the given white space.
            </summary>
        </member>
        <member name="M:Argon.JsonWriter.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:Argon.JsonWriter.SetWriteState(Argon.JsonToken,System.Object)">
            <summary>
            Sets the state of the <see cref="T:Argon.JsonWriter" />.
            </summary>
        </member>
        <member name="T:Argon.JsonWriterException">
            <summary>
            The exception thrown when an error occurs while writing JSON text.
            </summary>
        </member>
        <member name="P:Argon.JsonWriterException.Path">
            <summary>
            Gets the path to the JSON where the error occurred.
            </summary>
        </member>
        <member name="M:Argon.JsonWriterException.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Argon.JsonWriterException" /> class
            with a specified error message, JSON path and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="path">The path to the JSON where the error occurred.</param>
        </member>
        <member name="T:Argon.CommentHandling">
            <summary>
            Specifies how JSON comments are handled when loading JSON.
            </summary>
        </member>
        <member name="F:Argon.CommentHandling.Ignore">
            <summary>
            Ignore comments.
            </summary>
        </member>
        <member name="F:Argon.CommentHandling.Load">
            <summary>
            Load comments as a <see cref="T:Argon.JValue" /> with type <see cref="F:Argon.JTokenType.Comment" />.
            </summary>
        </member>
        <member name="T:Argon.Extensions">
            <summary>
            Contains the LINQ to JSON extension methods.
            </summary>
        </member>
        <member name="M:Argon.Extensions.Ancestors``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns a collection of tokens that contains the ancestors of every token in the source collection.
            </summary>
            <typeparam name="T">The type of the objects in source, constrained to <see cref="T:Argon.JToken" />.</typeparam>
            <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:Argon.JToken" /> that contains the source collection.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:Argon.JToken" /> that contains the ancestors of every token in the source collection.</returns>
        </member>
        <member name="M:Argon.Extensions.AncestorsAndSelf``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns a collection of tokens that contains every token in the source collection, and the ancestors of every token in the source collection.
            </summary>
            <typeparam name="T">The type of the objects in source, constrained to <see cref="T:Argon.JToken" />.</typeparam>
            <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:Argon.JToken" /> that contains the source collection.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:Argon.JToken" /> that contains every token in the source collection, the ancestors of every token in the source collection.</returns>
        </member>
        <member name="M:Argon.Extensions.Descendants``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns a collection of tokens that contains the descendants of every token in the source collection.
            </summary>
            <typeparam name="T">The type of the objects in source, constrained to <see cref="T:Argon.JContainer" />.</typeparam>
            <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:Argon.JToken" /> that contains the source collection.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:Argon.JToken" /> that contains the descendants of every token in the source collection.</returns>
        </member>
        <member name="M:Argon.Extensions.DescendantsAndSelf``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns a collection of tokens that contains every token in the source collection, and the descendants of every token in the source collection.
            </summary>
            <typeparam name="T">The type of the objects in source, constrained to <see cref="T:Argon.JContainer" />.</typeparam>
            <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:Argon.JToken" /> that contains the source collection.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:Argon.JToken" /> that contains every token in the source collection, and the descendants of every token in the source collection.</returns>
        </member>
        <member name="M:Argon.Extensions.Properties(System.Collections.Generic.IEnumerable{Argon.JObject})">
            <summary>
            Returns a collection of child properties of every object in the source collection.
            </summary>
            <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:Argon.JObject" /> that contains the source collection.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:Argon.JProperty" /> that contains the properties of every object in the source collection.</returns>
        </member>
        <member name="M:Argon.Extensions.Values(System.Collections.Generic.IEnumerable{Argon.JToken},System.Object)">
            <summary>
            Returns a collection of child values of every object in the source collection with the given key.
            </summary>
            <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:Argon.JToken" /> that contains the source collection.</param>
            <param name="key">The token key.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:Argon.JToken" /> that contains the values of every token in the source collection with the given key.</returns>
        </member>
        <member name="M:Argon.Extensions.Values(System.Collections.Generic.IEnumerable{Argon.JToken})">
            <summary>
            Returns a collection of child values of every object in the source collection.
            </summary>
            <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:Argon.JToken" /> that contains the source collection.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:Argon.JToken" /> that contains the values of every token in the source collection.</returns>
        </member>
        <member name="M:Argon.Extensions.Values``1(System.Collections.Generic.IEnumerable{Argon.JToken},System.Object)">
            <summary>
            Returns a collection of converted child values of every object in the source collection with the given key.
            </summary>
            <typeparam name="U">The type to convert the values to.</typeparam>
            <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:Argon.JToken" /> that contains the source collection.</param>
            <param name="key">The token key.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains the converted values of every token in the source collection with the given key.</returns>
        </member>
        <member name="M:Argon.Extensions.Values``1(System.Collections.Generic.IEnumerable{Argon.JToken})">
            <summary>
            Returns a collection of converted child values of every object in the source collection.
            </summary>
            <typeparam name="U">The type to convert the values to.</typeparam>
            <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:Argon.JToken" /> that contains the source collection.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains the converted values of every token in the source collection.</returns>
        </member>
        <member name="M:Argon.Extensions.Value``1(System.Collections.Generic.IEnumerable{Argon.JToken})">
            <summary>
            Converts the value.
            </summary>
            <typeparam name="U">The type to convert the value to.</typeparam>
            <param name="value">A <see cref="T:Argon.JToken" /> cast as a <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:Argon.JToken" />.</param>
            <returns>A converted value.</returns>
        </member>
        <member name="M:Argon.Extensions.Value``2(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Converts the value.
            </summary>
            <typeparam name="T">The source collection type.</typeparam>
            <typeparam name="U">The type to convert the value to.</typeparam>
            <param name="value">A <see cref="T:Argon.JToken" /> cast as a <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:Argon.JToken" />.</param>
            <returns>A converted value.</returns>
        </member>
        <member name="M:Argon.Extensions.Children``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns a collection of child tokens of every array in the source collection.
            </summary>
            <typeparam name="T">The source collection type.</typeparam>
            <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:Argon.JToken" /> that contains the source collection.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:Argon.JToken" /> that contains the values of every token in the source collection.</returns>
        </member>
        <member name="M:Argon.Extensions.Children``2(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns a collection of converted child tokens of every array in the source collection.
            </summary>
            <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:Argon.JToken" /> that contains the source collection.</param>
            <typeparam name="U">The type to convert the values to.</typeparam>
            <typeparam name="T">The source collection type.</typeparam>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains the converted values of every token in the source collection.</returns>
        </member>
        <member name="M:Argon.Extensions.AsJEnumerable(System.Collections.Generic.IEnumerable{Argon.JToken})">
            <summary>
            Returns the input typed as <see cref="T:Argon.IJEnumerable`1" />.
            </summary>
            <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:Argon.JToken" /> that contains the source collection.</param>
            <returns>The input typed as <see cref="T:Argon.IJEnumerable`1" />.</returns>
        </member>
        <member name="M:Argon.Extensions.AsJEnumerable``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns the input typed as <see cref="T:Argon.IJEnumerable`1" />.
            </summary>
            <typeparam name="T">The source collection type.</typeparam>
            <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:Argon.JToken" /> that contains the source collection.</param>
            <returns>The input typed as <see cref="T:Argon.IJEnumerable`1" />.</returns>
        </member>
        <member name="T:Argon.IJEnumerable`1">
            <summary>
            Represents a collection of <see cref="T:Argon.JToken" /> objects.
            </summary>
            <typeparam name="T">The type of token.</typeparam>
        </member>
        <member name="P:Argon.IJEnumerable`1.Item(System.Object)">
            <summary>
            Gets the <see cref="T:Argon.IJEnumerable`1" /> of <see cref="T:Argon.JToken" /> with the specified key.
            </summary>
        </member>
        <member name="T:Argon.JArray">
            <summary>
            Represents a JSON array.
            </summary>
            <example>
            <code lang="cs" source="..\src\Tests\Documentation\LinqToJsonTests.cs" region="LinqToJsonCreateParseArray" title="Parsing a JSON Array from Text" />
            </example>
        </member>
        <member name="P:Argon.JArray.ChildrenTokens">
            <summary>
            Gets the container's children tokens.
            </summary>
        </member>
        <member name="P:Argon.JArray.Type">
            <summary>
            Gets the node type for this <see cref="T:Argon.JToken" />.
            </summary>
        </member>
        <member name="M:Argon.JArray.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Argon.JArray" /> class.
            </summary>
        </member>
        <member name="M:Argon.JArray.#ctor(Argon.JArray)">
            <summary>
            Initializes a new instance of the <see cref="T:Argon.JArray" /> class from another <see cref="T:Argon.JArray" /> object.
            </summary>
            <param name="other">A <see cref="T:Argon.JArray" /> object to copy from.</param>
        </member>
        <member name="M:Argon.JArray.#ctor(System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:Argon.JArray" /> class with the specified content.
            </summary>
        </member>
        <member name="M:Argon.JArray.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Argon.JArray" /> class with the specified content.
            </summary>
        </member>
        <member name="M:Argon.JArray.Load(Argon.JsonReader)">
            <summary>
            Loads an <see cref="T:Argon.JArray" /> from a <see cref="T:Argon.JsonReader" />.
            </summary>
            <param name="reader">A <see cref="T:Argon.JsonReader" /> that will be read for the content of the <see cref="T:Argon.JArray" />.</param>
            <returns>A <see cref="T:Argon.JArray" /> that contains the JSON that was read from the specified <see cref="T:Argon.JsonReader" />.</returns>
        </member>
        <member name="M:Argon.JArray.Load(Argon.JsonReader,Argon.JsonLoadSettings)">
            <summary>
            Loads an <see cref="T:Argon.JArray" /> from a <see cref="T:Argon.JsonReader" />.
            </summary>
            <param name="reader">A <see cref="T:Argon.JsonReader" /> that will be read for the content of the <see cref="T:Argon.JArray" />.</param>
            <param name="settings">
            The <see cref="T:Argon.JsonLoadSettings" /> used to load the JSON.
            If this is <c>null</c>, default load settings will be used.
            </param>
            <returns>A <see cref="T:Argon.JArray" /> that contains the JSON that was read from the specified <see cref="T:Argon.JsonReader" />.</returns>
        </member>
        <member name="M:Argon.JArray.Parse(System.String)">
            <summary>
            Load a <see cref="T:Argon.JArray" /> from a string that contains JSON.
            </summary>
            <param name="json">A <see cref="T:System.String" /> that contains JSON.</param>
            <returns>A <see cref="T:Argon.JArray" /> populated from the string that contains JSON.</returns>
            <example>
            <code lang="cs" source="..\src\Tests\Documentation\LinqToJsonTests.cs" region="LinqToJsonCreateParseArray" title="Parsing a JSON Array from Text" />
            </example>
        </member>
        <member name="M:Argon.JArray.Parse(System.String,Argon.JsonLoadSettings)">
            <summary>
            Load a <see cref="T:Argon.JArray" /> from a string that contains JSON.
            </summary>
            <param name="json">A <see cref="T:System.String" /> that contains JSON.</param>
            <param name="settings">
            The <see cref="T:Argon.JsonLoadSettings" /> used to load the JSON.
            If this is <c>null</c>, default load settings will be used.
            </param>
            <returns>A <see cref="T:Argon.JArray" /> populated from the string that contains JSON.</returns>
            <example>
            <code lang="cs" source="..\src\Tests\Documentation\LinqToJsonTests.cs" region="LinqToJsonCreateParseArray" title="Parsing a JSON Array from Text" />
            </example>
        </member>
        <member name="M:Argon.JArray.FromObject(System.Object)">
            <summary>
            Creates a <see cref="T:Argon.JArray" /> from an object.
            </summary>
            <param name="o">The object that will be used to create <see cref="T:Argon.JArray" />.</param>
            <returns>A <see cref="T:Argon.JArray" /> with the values of the specified object.</returns>
        </member>
        <member name="M:Argon.JArray.FromObject(System.Object,Argon.JsonSerializer)">
            <summary>
            Creates a <see cref="T:Argon.JArray" /> from an object.
            </summary>
            <param name="o">The object that will be used to create <see cref="T:Argon.JArray" />.</param>
            <param name="serializer">The <see cref="T:Argon.JsonSerializer" /> that will be used to read the object.</param>
            <returns>A <see cref="T:Argon.JArray" /> with the values of the specified object.</returns>
        </member>
        <member name="M:Argon.JArray.WriteTo(Argon.JsonWriter,Argon.JsonConverter[])">
            <summary>
            Writes this token to a <see cref="T:Argon.JsonWriter" />.
            </summary>
        </member>
        <member name="P:Argon.JArray.Item(System.Object)">
            <summary>
            Gets the <see cref="T:Argon.JToken" /> with the specified key.
            </summary>
        </member>
        <member name="P:Argon.JArray.Item(System.Int32)">
            <summary>
            Gets or sets the <see cref="T:Argon.JToken" /> at the specified index.
            </summary>
        </member>
        <member name="M:Argon.JArray.IndexOf(Argon.JToken)">
            <summary>
            Determines the index of a specific item in the <see cref="T:Argon.JArray" />.
            </summary>
            <param name="item">The object to locate in the <see cref="T:Argon.JArray" />.</param>
            <returns>
            The index of <paramref name="item" /> if found in the list; otherwise, -1.
            </returns>
        </member>
        <member name="M:Argon.JArray.Insert(System.Int32,Argon.JToken)">
            <summary>
            Inserts an item to the <see cref="T:Argon.JArray" /> at the specified index.
            </summary>
            <param name="index">The zero-based index at which <paramref name="item" /> should be inserted.</param>
            <param name="item">The object to insert into the <see cref="T:Argon.JArray" />.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index" /> is not a valid index in the <see cref="T:Argon.JArray" />.
            </exception>
        </member>
        <member name="M:Argon.JArray.RemoveAt(System.Int32)">
            <summary>
            Removes the <see cref="T:Argon.JArray" /> item at the specified index.
            </summary>
            <param name="index">The zero-based index of the item to remove.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index" /> is not a valid index in the <see cref="T:Argon.JArray" />.
            </exception>
        </member>
        <member name="M:Argon.JArray.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1" /> of <see cref="T:Argon.JToken" /> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Argon.JArray.Add(Argon.JToken)">
            <summary>
            Adds an item to the <see cref="T:Argon.JArray" />.
            </summary>
            <param name="item">The object to add to the <see cref="T:Argon.JArray" />.</param>
        </member>
        <member name="M:Argon.JArray.Clear">
            <summary>
            Removes all items from the <see cref="T:Argon.JArray" />.
            </summary>
        </member>
        <member name="M:Argon.JArray.Contains(Argon.JToken)">
            <summary>
            Determines whether the <see cref="T:Argon.JArray" /> contains a specific value.
            </summary>
            <param name="item">The object to locate in the <see cref="T:Argon.JArray" />.</param>
            <returns>
            <c>true</c> if <paramref name="item" /> is found in the <see cref="T:Argon.JArray" />; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Argon.JArray.CopyTo(Argon.JToken[],System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:Argon.JArray" /> to an array, starting at a particular array index.
            </summary>
        </member>
        <member name="P:Argon.JArray.IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:Argon.JArray" /> is read-only.
            </summary>
            <returns><c>true</c> if the <see cref="T:Argon.JArray" /> is read-only; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Argon.JArray.Remove(Argon.JToken)">
            <summary>
            Removes the first occurrence of a specific object from the <see cref="T:Argon.JArray" />.
            </summary>
            <param name="item">The object to remove from the <see cref="T:Argon.JArray" />.</param>
            <returns>
            <c>true</c> if <paramref name="item" /> was successfully removed from the <see cref="T:Argon.JArray" />; otherwise, <c>false</c>. This method also returns <c>false</c> if <paramref name="item" /> is not found in the original <see cref="T:Argon.JArray" />.
            </returns>
        </member>
        <member name="T:Argon.JContainer">
            <summary>
            Represents a token that can contain other tokens.
            </summary>
        </member>
        <member name="P:Argon.JContainer.ChildrenTokens">
            <summary>
            Gets the container's children tokens.
            </summary>
        </member>
        <member name="P:Argon.JContainer.HasValues">
            <summary>
            Gets a value indicating whether this token has child tokens.
            </summary>
        </member>
        <member name="P:Argon.JContainer.First">
            <summary>
            Get the first child token of this token.
            </summary>
        </member>
        <member name="P:Argon.JContainer.Last">
            <summary>
            Get the last child token of this token.
            </summary>
        </member>
        <member name="M:Argon.JContainer.Children">
            <summary>
            Returns a collection of the child tokens of this token, in document order.
            </summary>
            <returns>
            An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:Argon.JToken" /> containing the child tokens of this <see cref="T:Argon.JToken" />, in document order.
            </returns>
        </member>
        <member name="M:Argon.JContainer.Values``1">
            <summary>
            Returns a collection of the child values of this token, in document order.
            </summary>
            <typeparam name="T">The type to convert the values to.</typeparam>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerable`1" /> containing the child values of this <see cref="T:Argon.JToken" />, in document order.
            </returns>
        </member>
        <member name="M:Argon.JContainer.Descendants">
            <summary>
            Returns a collection of the descendant tokens for this token in document order.
            </summary>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:Argon.JToken" /> containing the descendant tokens of the <see cref="T:Argon.JToken" />.</returns>
        </member>
        <member name="M:Argon.JContainer.DescendantsAndSelf">
            <summary>
            Returns a collection of the tokens that contain this token, and all descendant tokens of this token, in document order.
            </summary>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:Argon.JToken" /> containing this token, and all the descendant tokens of the <see cref="T:Argon.JToken" />.</returns>
        </member>
        <member name="M:Argon.JContainer.Add(System.Object)">
            <summary>
            Adds the specified content as children of this <see cref="T:Argon.JToken" />.
            </summary>
            <param name="content">The content to be added.</param>
        </member>
        <member name="M:Argon.JContainer.AddFirst(System.Object)">
            <summary>
            Adds the specified content as the first children of this <see cref="T:Argon.JToken" />.
            </summary>
            <param name="content">The content to be added.</param>
        </member>
        <member name="M:Argon.JContainer.CreateWriter">
            <summary>
            Creates a <see cref="T:Argon.JsonWriter" /> that can be used to add tokens to the <see cref="T:Argon.JToken" />.
            </summary>
            <returns>A <see cref="T:Argon.JsonWriter" /> that is ready to have content written to it.</returns>
        </member>
        <member name="M:Argon.JContainer.ReplaceAll(System.Object)">
            <summary>
            Replaces the child nodes of this token with the specified content.
            </summary>
        </member>
        <member name="M:Argon.JContainer.RemoveAll">
            <summary>
            Removes the child nodes from this token.
            </summary>
        </member>
        <member name="P:Argon.JContainer.Count">
            <summary>
            Gets the count of child JSON tokens.
            </summary>
        </member>
        <member name="T:Argon.JEnumerable`1">
            <summary>
            Represents a collection of <see cref="T:Argon.JToken" /> objects.
            </summary>
            <typeparam name="T">The type of token.</typeparam>
        </member>
        <member name="F:Argon.JEnumerable`1.Empty">
            <summary>
            An empty collection of <see cref="T:Argon.JToken" /> objects.
            </summary>
        </member>
        <member name="M:Argon.JEnumerable`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Argon.JEnumerable`1" /> struct.
            </summary>
        </member>
        <member name="M:Argon.JEnumerable`1.GetEnumerator">
            <summary>
            Returns an enumerator that can be used to iterate through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="P:Argon.JEnumerable`1.Item(System.Object)">
            <summary>
            Gets the <see cref="T:Argon.IJEnumerable`1" /> of <see cref="T:Argon.JToken" /> with the specified key.
            </summary>
        </member>
        <member name="M:Argon.JEnumerable`1.Equals(Argon.JEnumerable{`0})">
            <summary>
            Determines whether the specified <see cref="T:Argon.JEnumerable`1" /> is equal to this instance.
            </summary>
            <param name="other">The <see cref="T:Argon.JEnumerable`1" /> to compare with this instance.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:Argon.JEnumerable`1" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Argon.JEnumerable`1.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object" /> to compare with this instance.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Argon.JObject">
            <summary>
            Represents a JSON object.
            </summary>
            <example>
            <code lang="cs" source="..\src\Tests\Documentation\LinqToJsonTests.cs" region="LinqToJsonCreateParse" title="Parsing a JSON Object from Text" />
            </example>
        </member>
        <member name="P:Argon.JObject.ChildrenTokens">
            <summary>
            Gets the container's children tokens.
            </summary>
        </member>
        <member name="M:Argon.JObject.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Argon.JObject" /> class.
            </summary>
        </member>
        <member name="M:Argon.JObject.#ctor(Argon.JObject)">
            <summary>
            Initializes a new instance of the <see cref="T:Argon.JObject" /> class from another <see cref="T:Argon.JObject" /> object.
            </summary>
            <param name="other">A <see cref="T:Argon.JObject" /> object to copy from.</param>
        </member>
        <member name="M:Argon.JObject.#ctor(System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:Argon.JObject" /> class with the specified content.
            </summary>
        </member>
        <member name="M:Argon.JObject.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Argon.JObject" /> class with the specified content.
            </summary>
        </member>
        <member name="P:Argon.JObject.Type">
            <summary>
            Gets the node type for this <see cref="T:Argon.JToken" />.
            </summary>
        </member>
        <member name="M:Argon.JObject.Properties">
            <summary>
            Gets an <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:Argon.JProperty" /> of this object's properties.
            </summary>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:Argon.JProperty" /> of this object's properties.</returns>
        </member>
        <member name="M:Argon.JObject.Property(System.String,System.StringComparison)">
            <summary>
            Gets the <see cref="T:Argon.JProperty" /> with the specified name.
            The exact name will be searched for first and if no matching property is found then
            the <see cref="T:System.StringComparison" /> will be used to match a property.
            </summary>
            <param name="comparison">One of the enumeration values that specifies how the strings will be compared.</param>
            <returns>A <see cref="T:Argon.JProperty" /> matched with the specified name.</returns>
        </member>
        <member name="M:Argon.JObject.PropertyOrNull(System.String,System.StringComparison)">
            <summary>
            Gets the <see cref="T:Argon.JProperty" /> with the specified name.
            The exact name will be searched for first and if no matching property is found then
            the <see cref="T:System.StringComparison" /> will be used to match a property.
            </summary>
            <param name="comparison">One of the enumeration values that specifies how the strings will be compared.</param>
            <returns>A <see cref="T:Argon.JProperty" /> matched with the specified name or <c>null</c>.</returns>
        </member>
        <member name="M:Argon.JObject.PropertyValues">
            <summary>
            Gets a <see cref="T:Argon.JEnumerable`1" /> of <see cref="T:Argon.JToken" /> of this object's property values.
            </summary>
            <returns>A <see cref="T:Argon.JEnumerable`1" /> of <see cref="T:Argon.JToken" /> of this object's property values.</returns>
        </member>
        <member name="P:Argon.JObject.Item(System.Object)">
            <summary>
            Gets the <see cref="T:Argon.JToken" /> with the specified key.
            </summary>
        </member>
        <member name="P:Argon.JObject.Item(System.String)">
            <summary>
            Gets or sets the <see cref="T:Argon.JToken" /> with the specified property name.
            </summary>
        </member>
        <member name="M:Argon.JObject.Load(Argon.JsonReader)">
            <summary>
            Loads a <see cref="T:Argon.JObject" /> from a <see cref="T:Argon.JsonReader" />.
            </summary>
            <param name="reader">A <see cref="T:Argon.JsonReader" /> that will be read for the content of the <see cref="T:Argon.JObject" />.</param>
            <returns>A <see cref="T:Argon.JObject" /> that contains the JSON that was read from the specified <see cref="T:Argon.JsonReader" />.</returns>
            <exception cref="T:Argon.JsonReaderException">
            <paramref name="reader" /> is not valid JSON.
            </exception>
        </member>
        <member name="M:Argon.JObject.Load(Argon.JsonReader,Argon.JsonLoadSettings)">
            <summary>
            Loads a <see cref="T:Argon.JObject" /> from a <see cref="T:Argon.JsonReader" />.
            </summary>
            <param name="reader">A <see cref="T:Argon.JsonReader" /> that will be read for the content of the <see cref="T:Argon.JObject" />.</param>
            <param name="settings">
            The <see cref="T:Argon.JsonLoadSettings" /> used to load the JSON.
            If this is <c>null</c>, default load settings will be used.
            </param>
            <returns>A <see cref="T:Argon.JObject" /> that contains the JSON that was read from the specified <see cref="T:Argon.JsonReader" />.</returns>
            <exception cref="T:Argon.JsonReaderException">
            <paramref name="reader" /> is not valid JSON.
            </exception>
        </member>
        <member name="M:Argon.JObject.Parse(System.String)">
            <summary>
            Load a <see cref="T:Argon.JObject" /> from a string that contains JSON.
            </summary>
            <param name="json">A <see cref="T:System.String" /> that contains JSON.</param>
            <returns>A <see cref="T:Argon.JObject" /> populated from the string that contains JSON.</returns>
            <exception cref="T:Argon.JsonReaderException">
            <paramref name="json" /> is not valid JSON.
            </exception>
            <example>
            <code lang="cs" source="..\src\Tests\Documentation\LinqToJsonTests.cs" region="LinqToJsonCreateParse" title="Parsing a JSON Object from Text" />
            </example>
        </member>
        <member name="M:Argon.JObject.Parse(System.String,Argon.JsonLoadSettings)">
            <summary>
            Load a <see cref="T:Argon.JObject" /> from a string that contains JSON.
            </summary>
            <param name="json">A <see cref="T:System.String" /> that contains JSON.</param>
            <param name="settings">
            The <see cref="T:Argon.JsonLoadSettings" /> used to load the JSON.
            If this is <c>null</c>, default load settings will be used.
            </param>
            <returns>A <see cref="T:Argon.JObject" /> populated from the string that contains JSON.</returns>
            <exception cref="T:Argon.JsonReaderException">
            <paramref name="json" /> is not valid JSON.
            </exception>
            <example>
            <code lang="cs" source="..\src\Tests\Documentation\LinqToJsonTests.cs" region="LinqToJsonCreateParse" title="Parsing a JSON Object from Text" />
            </example>
        </member>
        <member name="M:Argon.JObject.FromObject(System.Object)">
            <summary>
            Creates a <see cref="T:Argon.JObject" /> from an object.
            </summary>
            <param name="o">The object that will be used to create <see cref="T:Argon.JObject" />.</param>
            <returns>A <see cref="T:Argon.JObject" /> with the values of the specified object.</returns>
        </member>
        <member name="M:Argon.JObject.FromObject(System.Object,Argon.JsonSerializer)">
            <summary>
            Creates a <see cref="T:Argon.JObject" /> from an object.
            </summary>
            <param name="o">The object that will be used to create <see cref="T:Argon.JObject" />.</param>
            <param name="serializer">The <see cref="T:Argon.JsonSerializer" /> that will be used to read the object.</param>
            <returns>A <see cref="T:Argon.JObject" /> with the values of the specified object.</returns>
        </member>
        <member name="M:Argon.JObject.WriteTo(Argon.JsonWriter,Argon.JsonConverter[])">
            <summary>
            Writes this token to a <see cref="T:Argon.JsonWriter" />.
            </summary>
        </member>
        <member name="M:Argon.JObject.GetValue(System.String)">
            <summary>
            Gets the <see cref="T:Argon.JToken" /> with the specified property name.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <returns>The <see cref="T:Argon.JToken" /> with the specified property name.</returns>
        </member>
        <member name="M:Argon.JObject.GetValue(System.String,System.StringComparison)">
            <summary>
            Gets the <see cref="T:Argon.JToken" /> with the specified property name.
            The exact property name will be searched for first and if no matching property is found then
            the <see cref="T:System.StringComparison" /> will be used to match a property.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <param name="comparison">One of the enumeration values that specifies how the strings will be compared.</param>
            <returns>The <see cref="T:Argon.JToken" /> with the specified property name.</returns>
        </member>
        <member name="M:Argon.JObject.TryGetValue(System.String,System.StringComparison,Argon.JToken@)">
            <summary>
            Tries to get the <see cref="T:Argon.JToken" /> with the specified property name.
            The exact property name will be searched for first and if no matching property is found then
            the <see cref="T:System.StringComparison" /> will be used to match a property.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <param name="comparison">One of the enumeration values that specifies how the strings will be compared.</param>
            <returns><c>true</c> if a value was successfully retrieved; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Argon.JObject.Add(System.String,Argon.JToken)">
            <summary>
            Adds the specified property name.
            </summary>
            <param name="propertyName">Name of the property.</param>
        </member>
        <member name="M:Argon.JObject.ContainsKey(System.String)">
            <summary>
            Determines whether the JSON object has the specified property name.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <returns><c>true</c> if the JSON object has the specified property name; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Argon.JObject.Remove(System.String)">
            <summary>
            Removes the property with the specified name.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <returns><c>true</c> if item was successfully removed; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Argon.JObject.TryGetValue(System.String,Argon.JToken@)">
            <summary>
            Tries to get the <see cref="T:Argon.JToken" /> with the specified property name.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <returns><c>true</c> if a value was successfully retrieved; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Argon.JObject.GetEnumerator">
            <summary>
            Returns an enumerator that can be used to iterate through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Argon.JObject.GetMetaObject(System.Linq.Expressions.Expression)">
            <summary>
            Returns the <see cref="T:System.Dynamic.DynamicMetaObject" /> responsible for binding operations performed on this object.
            </summary>
            <param name="parameter">The expression tree representation of the runtime value.</param>
            <returns>
            The <see cref="T:System.Dynamic.DynamicMetaObject" /> to bind this object.
            </returns>
        </member>
        <member name="T:Argon.JProperty">
            <summary>
            Represents a JSON property.
            </summary>
        </member>
        <member name="P:Argon.JProperty.ChildrenTokens">
            <summary>
            Gets the container's children tokens.
            </summary>
        </member>
        <member name="P:Argon.JProperty.Name">
            <summary>
            Gets the property name.
            </summary>
        </member>
        <member name="P:Argon.JProperty.Value">
            <summary>
            Gets or sets the property value.
            </summary>
        </member>
        <member name="M:Argon.JProperty.#ctor(Argon.JProperty)">
            <summary>
            Initializes a new instance of the <see cref="T:Argon.JProperty" /> class from another <see cref="T:Argon.JProperty" /> object.
            </summary>
            <param name="other">A <see cref="T:Argon.JProperty" /> object to copy from.</param>
        </member>
        <member name="P:Argon.JProperty.Type">
            <summary>
            Gets the node type for this <see cref="T:Argon.JToken" />.
            </summary>
        </member>
        <member name="M:Argon.JProperty.#ctor(System.String,System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:Argon.JProperty" /> class.
            </summary>
        </member>
        <member name="M:Argon.JProperty.#ctor(System.String,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Argon.JProperty" /> class.
            </summary>
        </member>
        <member name="M:Argon.JProperty.WriteTo(Argon.JsonWriter,Argon.JsonConverter[])">
            <summary>
            Writes this token to a <see cref="T:Argon.JsonWriter" />.
            </summary>
        </member>
        <member name="M:Argon.JProperty.Load(Argon.JsonReader)">
            <summary>
            Loads a <see cref="T:Argon.JProperty" /> from a <see cref="T:Argon.JsonReader" />.
            </summary>
            <param name="reader">A <see cref="T:Argon.JsonReader" /> that will be read for the content of the <see cref="T:Argon.JProperty" />.</param>
            <returns>A <see cref="T:Argon.JProperty" /> that contains the JSON that was read from the specified <see cref="T:Argon.JsonReader" />.</returns>
        </member>
        <member name="M:Argon.JProperty.Load(Argon.JsonReader,Argon.JsonLoadSettings)">
            <summary>
            Loads a <see cref="T:Argon.JProperty" /> from a <see cref="T:Argon.JsonReader" />.
            </summary>
            <param name="reader">A <see cref="T:Argon.JsonReader" /> that will be read for the content of the <see cref="T:Argon.JProperty" />.</param>
            <param name="settings">
            The <see cref="T:Argon.JsonLoadSettings" /> used to load the JSON.
            If this is <c>null</c>, default load settings will be used.
            </param>
            <returns>A <see cref="T:Argon.JProperty" /> that contains the JSON that was read from the specified <see cref="T:Argon.JsonReader" />.</returns>
        </member>
        <member name="T:Argon.JRaw">
            <summary>
            Represents a raw JSON string.
            </summary>
        </member>
        <member name="M:Argon.JRaw.#ctor(Argon.JRaw)">
            <summary>
            Initializes a new instance of the <see cref="T:Argon.JRaw" /> class from another <see cref="T:Argon.JRaw" /> object.
            </summary>
            <param name="other">A <see cref="T:Argon.JRaw" /> object to copy from.</param>
        </member>
        <member name="M:Argon.JRaw.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Argon.JRaw" /> class.
            </summary>
        </member>
        <member name="M:Argon.JRaw.Create(Argon.JsonReader)">
            <summary>
            Creates an instance of <see cref="T:Argon.JRaw" /> with the content of the reader's current token.
            </summary>
            <param name="reader">The reader.</param>
            <returns>An instance of <see cref="T:Argon.JRaw" /> with the content of the reader's current token.</returns>
        </member>
        <member name="T:Argon.JsonLoadSettings">
            <summary>
            Specifies the settings used when loading JSON.
            </summary>
        </member>
        <member name="P:Argon.JsonLoadSettings.CommentHandling">
            <summary>
            Gets or sets how JSON comments are handled when loading JSON.
            The default value is <see cref="F:Argon.CommentHandling.Ignore" />.
            </summary>
        </member>
        <member name="P:Argon.JsonLoadSettings.LineInfoHandling">
            <summary>
            Gets or sets how JSON line info is handled when loading JSON.
            The default value is <see cref="F:Argon.LineInfoHandling.Load" />.
            </summary>
        </member>
        <member name="T:Argon.JsonSelectSettings">
            <summary>
            Specifies the settings used when selecting JSON.
            </summary>
        </member>
        <member name="P:Argon.JsonSelectSettings.RegexMatchTimeout">
            <summary>
            Gets or sets a timeout that will be used when executing regular expressions.
            </summary>
        </member>
        <member name="P:Argon.JsonSelectSettings.ErrorWhenNoMatch">
            <summary>
            Gets or sets a flag that indicates whether an error should be thrown if
            no tokens are found when evaluating part of the expression.
            </summary>
        </member>
        <member name="T:Argon.JToken">
            <summary>
            Represents an abstract JSON token.
            </summary>
        </member>
        <member name="P:Argon.JToken.EqualityComparer">
            <summary>
            Gets a comparer that can compare two tokens for value equality.
            </summary>
        </member>
        <member name="P:Argon.JToken.Parent">
            <summary>
            Gets or sets the parent.
            </summary>
        </member>
        <member name="P:Argon.JToken.Root">
            <summary>
            Gets the root <see cref="T:Argon.JToken" /> of this <see cref="T:Argon.JToken" />.
            </summary>
        </member>
        <member name="P:Argon.JToken.Type">
            <summary>
            Gets the node type for this <see cref="T:Argon.JToken" />.
            </summary>
        </member>
        <member name="P:Argon.JToken.HasValues">
            <summary>
            Gets a value indicating whether this token has child tokens.
            </summary>
        </member>
        <member name="M:Argon.JToken.DeepEquals(Argon.JToken,Argon.JToken)">
            <summary>
            Compares the values of two tokens, including the values of all descendant tokens.
            </summary>
            <param name="t1">The first <see cref="T:Argon.JToken" /> to compare.</param>
            <param name="t2">The second <see cref="T:Argon.JToken" /> to compare.</param>
            <returns><c>true</c> if the tokens are equal; otherwise <c>false</c>.</returns>
        </member>
        <member name="P:Argon.JToken.Next">
            <summary>
            Gets the next sibling token of this node.
            </summary>
        </member>
        <member name="P:Argon.JToken.Previous">
            <summary>
            Gets the previous sibling token of this node.
            </summary>
        </member>
        <member name="P:Argon.JToken.Path">
            <summary>
            Gets the path of the JSON token.
            </summary>
        </member>
        <member name="M:Argon.JToken.AddAfterSelf(System.Object)">
            <summary>
            Adds the specified content immediately after this token.
            </summary>
            <param name="content">A content object that contains simple content or a collection of content objects to be added after this token.</param>
        </member>
        <member name="M:Argon.JToken.AddBeforeSelf(System.Object)">
            <summary>
            Adds the specified content immediately before this token.
            </summary>
            <param name="content">A content object that contains simple content or a collection of content objects to be added before this token.</param>
        </member>
        <member name="M:Argon.JToken.Ancestors">
            <summary>
            Returns a collection of the ancestor tokens of this token.
            </summary>
            <returns>A collection of the ancestor tokens of this token.</returns>
        </member>
        <member name="M:Argon.JToken.AncestorsAndSelf">
            <summary>
            Returns a collection of tokens that contain this token, and the ancestors of this token.
            </summary>
            <returns>A collection of tokens that contain this token, and the ancestors of this token.</returns>
        </member>
        <member name="M:Argon.JToken.AfterSelf">
            <summary>
            Returns a collection of the sibling tokens after this token, in document order.
            </summary>
            <returns>A collection of the sibling tokens after this tokens, in document order.</returns>
        </member>
        <member name="M:Argon.JToken.BeforeSelf">
            <summary>
            Returns a collection of the sibling tokens before this token, in document order.
            </summary>
            <returns>A collection of the sibling tokens before this token, in document order.</returns>
        </member>
        <member name="P:Argon.JToken.Item(System.Object)">
            <summary>
            Gets the <see cref="T:Argon.JToken" /> with the specified key.
            </summary>
        </member>
        <member name="M:Argon.JToken.Value``1(System.Object)">
            <summary>
            Gets the <see cref="T:Argon.JToken" /> with the specified key converted to the specified type.
            </summary>
            <typeparam name="T">The type to convert the token to.</typeparam>
            <param name="key">The token key.</param>
            <returns>The converted token value.</returns>
        </member>
        <member name="P:Argon.JToken.First">
            <summary>
            Get the first child token of this token.
            </summary>
        </member>
        <member name="P:Argon.JToken.Last">
            <summary>
            Get the last child token of this token.
            </summary>
        </member>
        <member name="M:Argon.JToken.Children">
            <summary>
            Returns a collection of the child tokens of this token, in document order.
            </summary>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:Argon.JToken" /> containing the child tokens of this <see cref="T:Argon.JToken" />, in document order.</returns>
        </member>
        <member name="M:Argon.JToken.Children``1">
            <summary>
            Returns a collection of the child tokens of this token, in document order, filtered by the specified type.
            </summary>
            <typeparam name="T">The type to filter the child tokens on.</typeparam>
            <returns>A <see cref="T:Argon.JEnumerable`1" /> containing the child tokens of this <see cref="T:Argon.JToken" />, in document order.</returns>
        </member>
        <member name="M:Argon.JToken.Values``1">
            <summary>
            Returns a collection of the child values of this token, in document order.
            </summary>
            <typeparam name="T">The type to convert the values to.</typeparam>
            <returns>A <see cref="T:System.Collections.Generic.IEnumerable`1" /> containing the child values of this <see cref="T:Argon.JToken" />, in document order.</returns>
        </member>
        <member name="M:Argon.JToken.Remove">
            <summary>
            Removes this token from its parent.
            </summary>
        </member>
        <member name="M:Argon.JToken.Replace(Argon.JToken)">
            <summary>
            Replaces this token with the specified token.
            </summary>
        </member>
        <member name="M:Argon.JToken.WriteTo(Argon.JsonWriter,Argon.JsonConverter[])">
            <summary>
            Writes this token to a <see cref="T:Argon.JsonWriter" />.
            </summary>
        </member>
        <member name="M:Argon.JToken.ToString">
            <summary>
            Returns the indented JSON for this token.
            </summary>
            <remarks>
            <c>ToString()</c> returns a non-JSON string value for tokens with a type of <see cref="F:Argon.JTokenType.String" />.
            If you want the JSON for all token types then you should use <see cref="M:Argon.JToken.WriteTo(Argon.JsonWriter,Argon.JsonConverter[])" />.
            </remarks>
            <returns>
            The indented JSON for this token.
            </returns>
        </member>
        <member name="M:Argon.JToken.ToString(Argon.Formatting,Argon.JsonConverter[])">
            <summary>
            Returns the JSON for this token using the given formatting and converters.
            </summary>
            <param name="converters">A collection of <see cref="T:Argon.JsonConverter" />s which will be used when writing the token.</param>
            <returns>The JSON for this token using the given formatting and converters.</returns>
        </member>
        <member name="M:Argon.JToken.op_Explicit(Argon.JToken)~System.Boolean">
            <summary>
            Performs an explicit conversion from <see cref="T:Argon.JToken" /> to <see cref="T:System.Boolean" />.
            </summary>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Argon.JToken.op_Explicit(Argon.JToken)~System.DateTimeOffset">
            <summary>
            Performs an explicit conversion from <see cref="T:Argon.JToken" /> to <see cref="T:System.DateTimeOffset" />.
            </summary>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Argon.JToken.op_Explicit(Argon.JToken)~System.Nullable{System.Boolean}">
            <summary>
            Performs an explicit conversion from <see cref="T:Argon.JToken" /> to <see cref="T:System.Nullable`1" /> of <see cref="T:System.Boolean" />.
            </summary>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Argon.JToken.op_Explicit(Argon.JToken)~System.Int64">
            <summary>
            Performs an explicit conversion from <see cref="T:Argon.JToken" /> to <see cref="T:System.Nullable`1" /> of <see cref="T:System.Int64" />.
            </summary>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Argon.JToken.op_Explicit(Argon.JToken)~System.Nullable{System.DateTime}">
            <summary>
            Performs an explicit conversion from <see cref="T:Argon.JToken" /> to <see cref="T:System.Nullable`1" /> of <see cref="T:System.DateTime" />.
            </summary>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Argon.JToken.op_Explicit(Argon.JToken)~System.Nullable{System.DateTimeOffset}">
            <summary>
            Performs an explicit conversion from <see cref="T:Argon.JToken" /> to <see cref="T:System.Nullable`1" /> of <see cref="T:System.DateTimeOffset" />.
            </summary>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Argon.JToken.op_Explicit(Argon.JToken)~System.Nullable{System.Decimal}">
            <summary>
            Performs an explicit conversion from <see cref="T:Argon.JToken" /> to <see cref="T:System.Nullable`1" /> of <see cref="T:System.Decimal" />.
            </summary>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Argon.JToken.op_Explicit(Argon.JToken)~System.Nullable{System.Double}">
            <summary>
            Performs an explicit conversion from <see cref="T:Argon.JToken" /> to <see cref="T:System.Nullable`1" /> of <see cref="T:System.Double" />.
            </summary>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Argon.JToken.op_Explicit(Argon.JToken)~System.Nullable{System.Char}">
            <summary>
            Performs an explicit conversion from <see cref="T:Argon.JToken" /> to <see cref="T:System.Nullable`1" /> of <see cref="T:System.Char" />.
            </summary>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Argon.JToken.op_Explicit(Argon.JToken)~System.Int32">
            <summary>
            Performs an explicit conversion from <see cref="T:Argon.JToken" /> to <see cref="T:System.Int32" />.
            </summary>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Argon.JToken.op_Explicit(Argon.JToken)~System.Int16">
            <summary>
            Performs an explicit conversion from <see cref="T:Argon.JToken" /> to <see cref="T:System.Int16" />.
            </summary>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Argon.JToken.op_Explicit(Argon.JToken)~System.UInt16">
            <summary>
            Performs an explicit conversion from <see cref="T:Argon.JToken" /> to <see cref="T:System.UInt16" />.
            </summary>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Argon.JToken.op_Explicit(Argon.JToken)~System.Char">
            <summary>
            Performs an explicit conversion from <see cref="T:Argon.JToken" /> to <see cref="T:System.Char" />.
            </summary>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Argon.JToken.op_Explicit(Argon.JToken)~System.Byte">
            <summary>
            Performs an explicit conversion from <see cref="T:Argon.JToken" /> to <see cref="T:System.Byte" />.
            </summary>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Argon.JToken.op_Explicit(Argon.JToken)~System.SByte">
            <summary>
            Performs an explicit conversion from <see cref="T:Argon.JToken" /> to <see cref="T:System.SByte" />.
            </summary>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Argon.JToken.op_Explicit(Argon.JToken)~System.Nullable{System.Int32}">
            <summary>
            Performs an explicit conversion from <see cref="T:Argon.JToken" /> to <see cref="T:System.Nullable`1" /> of <see cref="T:System.Int32" /> .
            </summary>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Argon.JToken.op_Explicit(Argon.JToken)~System.Nullable{System.Int16}">
            <summary>
            Performs an explicit conversion from <see cref="T:Argon.JToken" /> to <see cref="T:System.Nullable`1" /> of <see cref="T:System.Int16" />.
            </summary>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Argon.JToken.op_Explicit(Argon.JToken)~System.Nullable{System.UInt16}">
            <summary>
            Performs an explicit conversion from <see cref="T:Argon.JToken" /> to <see cref="T:System.Nullable`1" /> of <see cref="T:System.UInt16" />.
            </summary>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Argon.JToken.op_Explicit(Argon.JToken)~System.Nullable{System.Byte}">
            <summary>
            Performs an explicit conversion from <see cref="T:Argon.JToken" /> to <see cref="T:System.Nullable`1" /> of <see cref="T:System.Byte" />.
            </summary>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Argon.JToken.op_Explicit(Argon.JToken)~System.Nullable{System.SByte}">
            <summary>
            Performs an explicit conversion from <see cref="T:Argon.JToken" /> to <see cref="T:System.Nullable`1" /> of <see cref="T:System.SByte" />.
            </summary>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Argon.JToken.op_Explicit(Argon.JToken)~System.DateTime">
            <summary>
            Performs an explicit conversion from <see cref="T:Argon.JToken" /> to <see cref="T:System.Nullable`1" /> of <see cref="T:System.DateTime" />.
            </summary>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Argon.JToken.op_Explicit(Argon.JToken)~System.Nullable{System.Int64}">
            <summary>
            Performs an explicit conversion from <see cref="T:Argon.JToken" /> to <see cref="T:System.Nullable`1" /> of <see cref="T:System.Int64" />.
            </summary>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Argon.JToken.op_Explicit(Argon.JToken)~System.Nullable{System.Single}">
            <summary>
            Performs an explicit conversion from <see cref="T:Argon.JToken" /> to <see cref="T:System.Nullable`1" /> of <see cref="T:System.Single" />.
            </summary>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Argon.JToken.op_Explicit(Argon.JToken)~System.Decimal">
            <summary>
            Performs an explicit conversion from <see cref="T:Argon.JToken" /> to <see cref="T:System.Decimal" />.
            </summary>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Argon.JToken.op_Explicit(Argon.JToken)~System.Nullable{System.UInt32}">
            <summary>
            Performs an explicit conversion from <see cref="T:Argon.JToken" /> to <see cref="T:System.Nullable`1" /> of <see cref="T:System.UInt32" />.
            </summary>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Argon.JToken.op_Explicit(Argon.JToken)~System.Nullable{System.UInt64}">
            <summary>
            Performs an explicit conversion from <see cref="T:Argon.JToken" /> to <see cref="T:System.Nullable`1" /> of <see cref="T:System.UInt64" />.
            </summary>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Argon.JToken.op_Explicit(Argon.JToken)~System.Double">
            <summary>
            Performs an explicit conversion from <see cref="T:Argon.JToken" /> to <see cref="T:System.Double" />.
            </summary>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Argon.JToken.op_Explicit(Argon.JToken)~System.Single">
            <summary>
            Performs an explicit conversion from <see cref="T:Argon.JToken" /> to <see cref="T:System.Single" />.
            </summary>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Argon.JToken.op_Explicit(Argon.JToken)~System.String">
            <summary>
            Performs an explicit conversion from <see cref="T:Argon.JToken" /> to <see cref="T:System.String" />.
            </summary>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Argon.JToken.op_Explicit(Argon.JToken)~System.UInt32">
            <summary>
            Performs an explicit conversion from <see cref="T:Argon.JToken" /> to <see cref="T:System.UInt32" />.
            </summary>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Argon.JToken.op_Explicit(Argon.JToken)~System.UInt64">
            <summary>
            Performs an explicit conversion from <see cref="T:Argon.JToken" /> to <see cref="T:System.UInt64" />.
            </summary>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Argon.JToken.op_Explicit(Argon.JToken)~System.Byte[]">
            <summary>
            Performs an explicit conversion from <see cref="T:Argon.JToken" /> to <see cref="T:System.Byte" />[].
            </summary>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Argon.JToken.op_Explicit(Argon.JToken)~System.Guid">
            <summary>
            Performs an explicit conversion from <see cref="T:Argon.JToken" /> to <see cref="T:System.Guid" />.
            </summary>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Argon.JToken.op_Explicit(Argon.JToken)~System.Nullable{System.Guid}">
            <summary>
            Performs an explicit conversion from <see cref="T:Argon.JToken" /> to <see cref="T:System.Nullable`1" /> of <see cref="T:System.Guid" /> .
            </summary>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Argon.JToken.op_Explicit(Argon.JToken)~System.TimeSpan">
            <summary>
            Performs an explicit conversion from <see cref="T:Argon.JToken" /> to <see cref="T:System.TimeSpan" />.
            </summary>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Argon.JToken.op_Explicit(Argon.JToken)~System.Nullable{System.TimeSpan}">
            <summary>
            Performs an explicit conversion from <see cref="T:Argon.JToken" /> to <see cref="T:System.Nullable`1" /> of <see cref="T:System.TimeSpan" />.
            </summary>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Argon.JToken.op_Explicit(Argon.JToken)~System.Uri">
            <summary>
            Performs an explicit conversion from <see cref="T:Argon.JToken" /> to <see cref="T:System.Uri" />.
            </summary>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Argon.JToken.op_Implicit(System.Boolean)~Argon.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Boolean" /> to <see cref="T:Argon.JToken" />.
            </summary>
        </member>
        <member name="M:Argon.JToken.op_Implicit(System.DateTimeOffset)~Argon.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.DateTimeOffset" /> to <see cref="T:Argon.JToken" />.
            </summary>
        </member>
        <member name="M:Argon.JToken.op_Implicit(System.Byte)~Argon.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Byte" /> to <see cref="T:Argon.JToken" />.
            </summary>
        </member>
        <member name="M:Argon.JToken.op_Implicit(System.Nullable{System.Byte})~Argon.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1" /> of <see cref="T:System.Byte" /> to <see cref="T:Argon.JToken" />.
            </summary>
        </member>
        <member name="M:Argon.JToken.op_Implicit(System.SByte)~Argon.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.SByte" /> to <see cref="T:Argon.JToken" />.
            </summary>
        </member>
        <member name="M:Argon.JToken.op_Implicit(System.Nullable{System.SByte})~Argon.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1" /> of <see cref="T:System.SByte" /> to <see cref="T:Argon.JToken" />.
            </summary>
        </member>
        <member name="M:Argon.JToken.op_Implicit(System.Nullable{System.Boolean})~Argon.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1" /> of <see cref="T:System.Boolean" /> to <see cref="T:Argon.JToken" />.
            </summary>
        </member>
        <member name="M:Argon.JToken.op_Implicit(System.Int64)~Argon.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1" /> of <see cref="T:System.Int64" /> to <see cref="T:Argon.JToken" />.
            </summary>
        </member>
        <member name="M:Argon.JToken.op_Implicit(System.Nullable{System.DateTime})~Argon.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1" /> of <see cref="T:System.DateTime" /> to <see cref="T:Argon.JToken" />.
            </summary>
        </member>
        <member name="M:Argon.JToken.op_Implicit(System.Nullable{System.DateTimeOffset})~Argon.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1" /> of <see cref="T:System.DateTimeOffset" /> to <see cref="T:Argon.JToken" />.
            </summary>
        </member>
        <member name="M:Argon.JToken.op_Implicit(System.Nullable{System.Decimal})~Argon.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1" /> of <see cref="T:System.Decimal" /> to <see cref="T:Argon.JToken" />.
            </summary>
        </member>
        <member name="M:Argon.JToken.op_Implicit(System.Nullable{System.Double})~Argon.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1" /> of <see cref="T:System.Double" /> to <see cref="T:Argon.JToken" />.
            </summary>
        </member>
        <member name="M:Argon.JToken.op_Implicit(System.Int16)~Argon.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Int16" /> to <see cref="T:Argon.JToken" />.
            </summary>
        </member>
        <member name="M:Argon.JToken.op_Implicit(System.UInt16)~Argon.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.UInt16" /> to <see cref="T:Argon.JToken" />.
            </summary>
        </member>
        <member name="M:Argon.JToken.op_Implicit(System.Int32)~Argon.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Int32" /> to <see cref="T:Argon.JToken" />.
            </summary>
        </member>
        <member name="M:Argon.JToken.op_Implicit(System.Nullable{System.Int32})~Argon.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1" /> of <see cref="T:System.Int32" /> to <see cref="T:Argon.JToken" />.
            </summary>
        </member>
        <member name="M:Argon.JToken.op_Implicit(System.DateTime)~Argon.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.DateTime" /> to <see cref="T:Argon.JToken" />.
            </summary>
        </member>
        <member name="M:Argon.JToken.op_Implicit(System.Nullable{System.Int64})~Argon.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1" /> of <see cref="T:System.Int64" /> to <see cref="T:Argon.JToken" />.
            </summary>
        </member>
        <member name="M:Argon.JToken.op_Implicit(System.Nullable{System.Single})~Argon.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1" /> of <see cref="T:System.Single" /> to <see cref="T:Argon.JToken" />.
            </summary>
        </member>
        <member name="M:Argon.JToken.op_Implicit(System.Decimal)~Argon.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Decimal" /> to <see cref="T:Argon.JToken" />.
            </summary>
        </member>
        <member name="M:Argon.JToken.op_Implicit(System.Nullable{System.Int16})~Argon.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1" /> of <see cref="T:System.Int16" /> to <see cref="T:Argon.JToken" />.
            </summary>
        </member>
        <member name="M:Argon.JToken.op_Implicit(System.Nullable{System.UInt16})~Argon.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1" /> of <see cref="T:System.UInt16" /> to <see cref="T:Argon.JToken" />.
            </summary>
        </member>
        <member name="M:Argon.JToken.op_Implicit(System.Nullable{System.UInt32})~Argon.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1" /> of <see cref="T:System.UInt32" /> to <see cref="T:Argon.JToken" />.
            </summary>
        </member>
        <member name="M:Argon.JToken.op_Implicit(System.Nullable{System.UInt64})~Argon.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1" /> of <see cref="T:System.UInt64" /> to <see cref="T:Argon.JToken" />.
            </summary>
        </member>
        <member name="M:Argon.JToken.op_Implicit(System.Double)~Argon.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Double" /> to <see cref="T:Argon.JToken" />.
            </summary>
        </member>
        <member name="M:Argon.JToken.op_Implicit(System.Single)~Argon.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Single" /> to <see cref="T:Argon.JToken" />.
            </summary>
        </member>
        <member name="M:Argon.JToken.op_Implicit(System.String)~Argon.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.String" /> to <see cref="T:Argon.JToken" />.
            </summary>
        </member>
        <member name="M:Argon.JToken.op_Implicit(System.UInt32)~Argon.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.UInt32" /> to <see cref="T:Argon.JToken" />.
            </summary>
        </member>
        <member name="M:Argon.JToken.op_Implicit(System.UInt64)~Argon.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.UInt64" /> to <see cref="T:Argon.JToken" />.
            </summary>
        </member>
        <member name="M:Argon.JToken.op_Implicit(System.Byte[])~Argon.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Byte" />[] to <see cref="T:Argon.JToken" />.
            </summary>
        </member>
        <member name="M:Argon.JToken.op_Implicit(System.Uri)~Argon.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Uri" /> to <see cref="T:Argon.JToken" />.
            </summary>
        </member>
        <member name="M:Argon.JToken.op_Implicit(System.TimeSpan)~Argon.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.TimeSpan" /> to <see cref="T:Argon.JToken" />.
            </summary>
        </member>
        <member name="M:Argon.JToken.op_Implicit(System.Nullable{System.TimeSpan})~Argon.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1" /> of <see cref="T:System.TimeSpan" /> to <see cref="T:Argon.JToken" />.
            </summary>
        </member>
        <member name="M:Argon.JToken.op_Implicit(System.Guid)~Argon.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Guid" /> to <see cref="T:Argon.JToken" />.
            </summary>
        </member>
        <member name="M:Argon.JToken.op_Implicit(System.Nullable{System.Guid})~Argon.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1" /> of <see cref="T:System.Guid" /> to <see cref="T:Argon.JToken" />.
            </summary>
        </member>
        <member name="M:Argon.JToken.CreateReader">
            <summary>
            Creates a <see cref="T:Argon.JsonReader" /> for this token.
            </summary>
            <returns>A <see cref="T:Argon.JsonReader" /> that can be used to read this token and its descendants.</returns>
        </member>
        <member name="M:Argon.JToken.FromObject(System.Object)">
            <summary>
            Creates a <see cref="T:Argon.JToken" /> from an object.
            </summary>
        </member>
        <member name="M:Argon.JToken.FromObject(System.Object,Argon.JsonSerializer)">
            <summary>
            Creates a <see cref="T:Argon.JToken" /> from an object using the specified <see cref="T:Argon.JsonSerializer" />.
            </summary>
            <param name="o">The object that will be used to create <see cref="T:Argon.JToken" />.</param>
            <param name="serializer">The <see cref="T:Argon.JsonSerializer" /> that will be used when reading the object.</param>
            <returns>A <see cref="T:Argon.JToken" /> with the value of the specified object.</returns>
        </member>
        <member name="M:Argon.JToken.ToObject``1">
            <summary>
            Creates an instance of the specified .NET type from the <see cref="T:Argon.JToken" />.
            </summary>
            <typeparam name="T">The object type that the token will be deserialized to.</typeparam>
            <returns>The new object created from the JSON value.</returns>
        </member>
        <member name="M:Argon.JToken.ToObject(System.Type)">
            <summary>
            Creates an instance of the specified .NET type from the <see cref="T:Argon.JToken" />.
            </summary>
            <param name="type">The object type that the token will be deserialized to.</param>
            <returns>The new object created from the JSON value.</returns>
        </member>
        <member name="M:Argon.JToken.ToObject``1(Argon.JsonSerializer)">
            <summary>
            Creates an instance of the specified .NET type from the <see cref="T:Argon.JToken" /> using the specified <see cref="T:Argon.JsonSerializer" />.
            </summary>
            <typeparam name="T">The object type that the token will be deserialized to.</typeparam>
            <param name="serializer">The <see cref="T:Argon.JsonSerializer" /> that will be used when creating the object.</param>
            <returns>The new object created from the JSON value.</returns>
        </member>
        <member name="M:Argon.JToken.ToObject(System.Type,Argon.JsonSerializer)">
            <summary>
            Creates an instance of the specified .NET type from the <see cref="T:Argon.JToken" /> using the specified <see cref="T:Argon.JsonSerializer" />.
            </summary>
            <param name="type">The object type that the token will be deserialized to.</param>
            <param name="serializer">The <see cref="T:Argon.JsonSerializer" /> that will be used when creating the object.</param>
            <returns>The new object created from the JSON value.</returns>
        </member>
        <member name="M:Argon.JToken.ReadFrom(Argon.JsonReader)">
            <summary>
            Creates a <see cref="T:Argon.JToken" /> from a <see cref="T:Argon.JsonReader" />.
            </summary>
            <param name="reader">A <see cref="T:Argon.JsonReader" /> positioned at the token to read into this <see cref="T:Argon.JToken" />.</param>
            <returns>
            A <see cref="T:Argon.JToken" /> that contains the token and its descendant tokens
            that were read from the reader. The runtime type of the token is determined
            by the token type of the first token encountered in the reader.
            </returns>
        </member>
        <member name="M:Argon.JToken.ReadFrom(Argon.JsonReader,Argon.JsonLoadSettings)">
            <summary>
            Creates a <see cref="T:Argon.JToken" /> from a <see cref="T:Argon.JsonReader" />.
            </summary>
            <param name="reader">An <see cref="T:Argon.JsonReader" /> positioned at the token to read into this <see cref="T:Argon.JToken" />.</param>
            <param name="settings">
            The <see cref="T:Argon.JsonLoadSettings" /> used to load the JSON.
            If this is <c>null</c>, default load settings will be used.
            </param>
            <returns>
            A <see cref="T:Argon.JToken" /> that contains the token and its descendant tokens
            that were read from the reader. The runtime type of the token is determined
            by the token type of the first token encountered in the reader.
            </returns>
        </member>
        <member name="M:Argon.JToken.Parse(System.String)">
            <summary>
            Load a <see cref="T:Argon.JToken" /> from a string that contains JSON.
            </summary>
            <param name="json">A <see cref="T:System.String" /> that contains JSON.</param>
            <returns>A <see cref="T:Argon.JToken" /> populated from the string that contains JSON.</returns>
        </member>
        <member name="M:Argon.JToken.Parse(System.String,Argon.JsonLoadSettings)">
            <summary>
            Load a <see cref="T:Argon.JToken" /> from a string that contains JSON.
            </summary>
            <param name="json">A <see cref="T:System.String" /> that contains JSON.</param>
            <param name="settings">
            The <see cref="T:Argon.JsonLoadSettings" /> used to load the JSON.
            If this is <c>null</c>, default load settings will be used.
            </param>
            <returns>A <see cref="T:Argon.JToken" /> populated from the string that contains JSON.</returns>
        </member>
        <member name="M:Argon.JToken.Load(Argon.JsonReader,Argon.JsonLoadSettings)">
            <summary>
            Creates a <see cref="T:Argon.JToken" /> from a <see cref="T:Argon.JsonReader" />.
            </summary>
            <param name="reader">A <see cref="T:Argon.JsonReader" /> positioned at the token to read into this <see cref="T:Argon.JToken" />.</param>
            <param name="settings">
            The <see cref="T:Argon.JsonLoadSettings" /> used to load the JSON.
            If this is <c>null</c>, default load settings will be used.
            </param>
            <returns>
            A <see cref="T:Argon.JToken" /> that contains the token and its descendant tokens
            that were read from the reader. The runtime type of the token is determined
            by the token type of the first token encountered in the reader.
            </returns>
        </member>
        <member name="M:Argon.JToken.Load(Argon.JsonReader)">
            <summary>
            Creates a <see cref="T:Argon.JToken" /> from a <see cref="T:Argon.JsonReader" />.
            </summary>
            <param name="reader">A <see cref="T:Argon.JsonReader" /> positioned at the token to read into this <see cref="T:Argon.JToken" />.</param>
            <returns>
            A <see cref="T:Argon.JToken" /> that contains the token and its descendant tokens
            that were read from the reader. The runtime type of the token is determined
            by the token type of the first token encountered in the reader.
            </returns>
        </member>
        <member name="M:Argon.JToken.GetMetaObject(System.Linq.Expressions.Expression)">
            <summary>
            Returns the <see cref="T:System.Dynamic.DynamicMetaObject" /> responsible for binding operations performed on this object.
            </summary>
            <param name="parameter">The expression tree representation of the runtime value.</param>
            <returns>
            The <see cref="T:System.Dynamic.DynamicMetaObject" /> to bind this object.
            </returns>
        </member>
        <member name="M:Argon.JToken.System#Dynamic#IDynamicMetaObjectProvider#GetMetaObject(System.Linq.Expressions.Expression)">
            <summary>
            Returns the <see cref="T:System.Dynamic.DynamicMetaObject" /> responsible for binding operations performed on this object.
            </summary>
            <param name="parameter">The expression tree representation of the runtime value.</param>
            <returns>
            The <see cref="T:System.Dynamic.DynamicMetaObject" /> to bind this object.
            </returns>
        </member>
        <member name="M:Argon.JToken.DeepClone">
            <summary>
            Creates a new instance of the <see cref="T:Argon.JToken" />. All child tokens are recursively cloned.
            </summary>
            <returns>A new instance of the <see cref="T:Argon.JToken" />.</returns>
        </member>
        <member name="T:Argon.JTokenEqualityComparer">
            <summary>
            Compares tokens to determine whether they are equal.
            </summary>
        </member>
        <member name="M:Argon.JTokenEqualityComparer.Equals(Argon.JToken,Argon.JToken)">
            <summary>
            Determines whether the specified objects are equal.
            </summary>
            <param name="x">The first object of type <see cref="T:Argon.JToken" /> to compare.</param>
            <param name="y">The second object of type <see cref="T:Argon.JToken" /> to compare.</param>
            <returns>
            <c>true</c> if the specified objects are equal; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Argon.JTokenEqualityComparer.GetHashCode(Argon.JToken)">
            <summary>
            Returns a hash code for the specified object.
            </summary>
            <param name="obj">The <see cref="T:System.Object" /> for which a hash code is to be returned.</param>
            <returns>A hash code for the specified object.</returns>
            <exception cref="T:System.ArgumentNullException">The type of <paramref name="obj" /> is a reference type and <paramref name="obj" /> is <c>null</c>.</exception>
        </member>
        <member name="T:Argon.JTokenReader">
            <summary>
            Represents a reader that provides fast, non-cached, forward-only access to serialized JSON data.
            </summary>
        </member>
        <member name="P:Argon.JTokenReader.CurrentToken">
            <summary>
            Gets the <see cref="T:Argon.JToken" /> at the reader's current position.
            </summary>
        </member>
        <member name="M:Argon.JTokenReader.#ctor(Argon.JToken)">
            <summary>
            Initializes a new instance of the <see cref="T:Argon.JTokenReader" /> class.
            </summary>
        </member>
        <member name="M:Argon.JTokenReader.#ctor(Argon.JToken,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Argon.JTokenReader" /> class.
            </summary>
            <param name="initialPath">The initial path of the token. It is prepended to the returned <see cref="P:Argon.JTokenReader.Path" />.</param>
        </member>
        <member name="M:Argon.JTokenReader.Read">
            <summary>
            Reads the next JSON token from the underlying <see cref="T:Argon.JToken" />.
            </summary>
            <returns>
            <c>true</c> if the next token was read successfully; <c>false</c> if there are no more tokens to read.
            </returns>
        </member>
        <member name="P:Argon.JTokenReader.Path">
            <summary>
            Gets the path of the current JSON token.
            </summary>
        </member>
        <member name="T:Argon.JTokenType">
            <summary>
            Specifies the type of token.
            </summary>
        </member>
        <member name="F:Argon.JTokenType.None">
            <summary>
            No token type has been set.
            </summary>
        </member>
        <member name="F:Argon.JTokenType.Object">
            <summary>
            A JSON object.
            </summary>
        </member>
        <member name="F:Argon.JTokenType.Array">
            <summary>
            A JSON array.
            </summary>
        </member>
        <member name="F:Argon.JTokenType.Property">
            <summary>
            A JSON object property.
            </summary>
        </member>
        <member name="F:Argon.JTokenType.Comment">
            <summary>
            A comment.
            </summary>
        </member>
        <member name="F:Argon.JTokenType.Integer">
            <summary>
            An integer value.
            </summary>
        </member>
        <member name="F:Argon.JTokenType.Float">
            <summary>
            A float value.
            </summary>
        </member>
        <member name="F:Argon.JTokenType.String">
            <summary>
            A string value.
            </summary>
        </member>
        <member name="F:Argon.JTokenType.Boolean">
            <summary>
            A boolean value.
            </summary>
        </member>
        <member name="F:Argon.JTokenType.Null">
            <summary>
            A null value.
            </summary>
        </member>
        <member name="F:Argon.JTokenType.Undefined">
            <summary>
            An undefined value.
            </summary>
        </member>
        <member name="F:Argon.JTokenType.Date">
            <summary>
            A date value.
            </summary>
        </member>
        <member name="F:Argon.JTokenType.Raw">
            <summary>
            A raw JSON value.
            </summary>
        </member>
        <member name="F:Argon.JTokenType.Bytes">
            <summary>
            A collection of bytes value.
            </summary>
        </member>
        <member name="F:Argon.JTokenType.Guid">
            <summary>
            A Guid value.
            </summary>
        </member>
        <member name="F:Argon.JTokenType.Uri">
            <summary>
            A Uri value.
            </summary>
        </member>
        <member name="F:Argon.JTokenType.TimeSpan">
            <summary>
            A TimeSpan value.
            </summary>
        </member>
        <member name="T:Argon.JTokenWriter">
            <summary>
            Represents a writer that provides a fast, non-cached, forward-only way of generating JSON data.
            </summary>
        </member>
        <member name="P:Argon.JTokenWriter.CurrentToken">
            <summary>
            Gets the <see cref="T:Argon.JToken" /> at the writer's current position.
            </summary>
        </member>
        <member name="P:Argon.JTokenWriter.Token">
            <summary>
            Gets the token being written.
            </summary>
        </member>
        <member name="M:Argon.JTokenWriter.#ctor(Argon.JContainer)">
            <summary>
            Initializes a new instance of the <see cref="T:Argon.JTokenWriter" /> class writing to the given <see cref="T:Argon.JContainer" />.
            </summary>
            <param name="container">The container being written to.</param>
        </member>
        <member name="M:Argon.JTokenWriter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Argon.JTokenWriter" /> class.
            </summary>
        </member>
        <member name="M:Argon.JTokenWriter.Flush">
            <summary>
            Flushes whatever is in the buffer to the underlying <see cref="T:Argon.JContainer" />.
            </summary>
        </member>
        <member name="M:Argon.JTokenWriter.WriteStartObject">
            <summary>
            Writes the beginning of a JSON object.
            </summary>
        </member>
        <member name="M:Argon.JTokenWriter.WriteStartArray">
            <summary>
            Writes the beginning of a JSON array.
            </summary>
        </member>
        <member name="M:Argon.JTokenWriter.WriteEnd(Argon.JsonToken)">
            <summary>
            Writes the end.
            </summary>
        </member>
        <member name="M:Argon.JTokenWriter.WritePropertyName(System.String)">
            <summary>
            Writes the property name of a name/value pair on a JSON object.
            </summary>
        </member>
        <member name="M:Argon.JTokenWriter.WriteValue(System.Object)">
            <summary>
            Writes a <see cref="T:System.Object" /> value.
            An error will be raised if the value cannot be written as a single JSON token.
            </summary>
        </member>
        <member name="M:Argon.JTokenWriter.WriteNull">
            <summary>
            Writes a null value.
            </summary>
        </member>
        <member name="M:Argon.JTokenWriter.WriteUndefined">
            <summary>
            Writes an undefined value.
            </summary>
        </member>
        <member name="M:Argon.JTokenWriter.WriteRaw(System.String)">
            <summary>
            Writes raw JSON.
            </summary>
        </member>
        <member name="M:Argon.JTokenWriter.WriteRaw(System.ReadOnlySpan{System.Char})">
            <summary>
            Writes raw JSON.
            </summary>
        </member>
        <member name="M:Argon.JTokenWriter.WriteComment(System.String)">
            <summary>
            Writes a comment <c>/*...*/</c> containing the specified text.
            </summary>
        </member>
        <member name="M:Argon.JTokenWriter.WriteComment(System.ReadOnlySpan{System.Char})">
            <summary>
            Writes a comment <c>/*...*/</c> containing the specified text.
            </summary>
        </member>
        <member name="M:Argon.JTokenWriter.WriteValue(System.String)">
            <summary>
            Writes a <see cref="T:System.String" /> value.
            </summary>
        </member>
        <member name="M:Argon.JTokenWriter.WriteValue(System.Int32)">
            <summary>
            Writes a <see cref="T:System.Int32" /> value.
            </summary>
        </member>
        <member name="M:Argon.JTokenWriter.WriteValue(System.UInt32)">
            <summary>
            Writes a <see cref="T:System.UInt32" /> value.
            </summary>
        </member>
        <member name="M:Argon.JTokenWriter.WriteValue(System.Int64)">
            <summary>
            Writes a <see cref="T:System.Int64" /> value.
            </summary>
        </member>
        <member name="M:Argon.JTokenWriter.WriteValue(System.UInt64)">
            <summary>
            Writes a <see cref="T:System.UInt64" /> value.
            </summary>
        </member>
        <member name="M:Argon.JTokenWriter.WriteValue(System.Single)">
            <summary>
            Writes a <see cref="T:System.Single" /> value.
            </summary>
        </member>
        <member name="M:Argon.JTokenWriter.WriteValue(System.Double)">
            <summary>
            Writes a <see cref="T:System.Double" /> value.
            </summary>
        </member>
        <member name="M:Argon.JTokenWriter.WriteValue(System.Boolean)">
            <summary>
            Writes a <see cref="T:System.Boolean" /> value.
            </summary>
        </member>
        <member name="M:Argon.JTokenWriter.WriteValue(System.Int16)">
            <summary>
            Writes a <see cref="T:System.Int16" /> value.
            </summary>
        </member>
        <member name="M:Argon.JTokenWriter.WriteValue(System.UInt16)">
            <summary>
            Writes a <see cref="T:System.UInt16" /> value.
            </summary>
        </member>
        <member name="M:Argon.JTokenWriter.WriteValue(System.Char)">
            <summary>
            Writes a <see cref="T:System.Char" /> value.
            </summary>
        </member>
        <member name="M:Argon.JTokenWriter.WriteValue(System.Byte)">
            <summary>
            Writes a <see cref="T:System.Byte" /> value.
            </summary>
        </member>
        <member name="M:Argon.JTokenWriter.WriteValue(System.SByte)">
            <summary>
            Writes a <see cref="T:System.SByte" /> value.
            </summary>
        </member>
        <member name="M:Argon.JTokenWriter.WriteValue(System.Decimal)">
            <summary>
            Writes a <see cref="T:System.Decimal" /> value.
            </summary>
        </member>
        <member name="M:Argon.JTokenWriter.WriteValue(System.DateTime)">
            <summary>
            Writes a <see cref="T:System.DateTime" /> value.
            </summary>
        </member>
        <member name="M:Argon.JTokenWriter.WriteValue(System.DateTimeOffset)">
            <summary>
            Writes a <see cref="T:System.DateTimeOffset" /> value.
            </summary>
        </member>
        <member name="M:Argon.JTokenWriter.WriteValue(System.Byte[])">
            <summary>
            Writes a <see cref="T:System.Byte" />[] value.
            </summary>
        </member>
        <member name="M:Argon.JTokenWriter.WriteValue(System.TimeSpan)">
            <summary>
            Writes a <see cref="T:System.TimeSpan" /> value.
            </summary>
        </member>
        <member name="M:Argon.JTokenWriter.WriteValue(System.Guid)">
            <summary>
            Writes a <see cref="T:System.Guid" /> value.
            </summary>
        </member>
        <member name="M:Argon.JTokenWriter.WriteValue(System.Uri)">
            <summary>
            Writes a <see cref="T:System.Uri" /> value.
            </summary>
        </member>
        <member name="T:Argon.JValue">
            <summary>
            Represents a value in JSON (string, integer, date, etc).
            </summary>
        </member>
        <member name="M:Argon.JValue.#ctor(Argon.JValue)">
            <summary>
            Initializes a new instance of the <see cref="T:Argon.JValue" /> class from another <see cref="T:Argon.JValue" /> object.
            </summary>
            <param name="other">A <see cref="T:Argon.JValue" /> object to copy from.</param>
        </member>
        <member name="M:Argon.JValue.#ctor(System.Int64)">
            <summary>
            Initializes a new instance of the <see cref="T:Argon.JValue" /> class with the given value.
            </summary>
        </member>
        <member name="M:Argon.JValue.#ctor(System.Decimal)">
            <summary>
            Initializes a new instance of the <see cref="T:Argon.JValue" /> class with the given value.
            </summary>
        </member>
        <member name="M:Argon.JValue.#ctor(System.Char)">
            <summary>
            Initializes a new instance of the <see cref="T:Argon.JValue" /> class with the given value.
            </summary>
        </member>
        <member name="M:Argon.JValue.#ctor(System.UInt64)">
            <summary>
            Initializes a new instance of the <see cref="T:Argon.JValue" /> class with the given value.
            </summary>
        </member>
        <member name="M:Argon.JValue.#ctor(System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Argon.JValue" /> class with the given value.
            </summary>
        </member>
        <member name="M:Argon.JValue.#ctor(System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:Argon.JValue" /> class with the given value.
            </summary>
        </member>
        <member name="M:Argon.JValue.#ctor(System.DateTime)">
            <summary>
            Initializes a new instance of the <see cref="T:Argon.JValue" /> class with the given value.
            </summary>
        </member>
        <member name="M:Argon.JValue.#ctor(System.DateTimeOffset)">
            <summary>
            Initializes a new instance of the <see cref="T:Argon.JValue" /> class with the given value.
            </summary>
        </member>
        <member name="M:Argon.JValue.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Argon.JValue" /> class with the given value.
            </summary>
        </member>
        <member name="M:Argon.JValue.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Argon.JValue" /> class with the given value.
            </summary>
        </member>
        <member name="M:Argon.JValue.#ctor(System.Guid)">
            <summary>
            Initializes a new instance of the <see cref="T:Argon.JValue" /> class with the given value.
            </summary>
        </member>
        <member name="M:Argon.JValue.#ctor(System.Uri)">
            <summary>
            Initializes a new instance of the <see cref="T:Argon.JValue" /> class with the given value.
            </summary>
        </member>
        <member name="M:Argon.JValue.#ctor(System.TimeSpan)">
            <summary>
            Initializes a new instance of the <see cref="T:Argon.JValue" /> class with the given value.
            </summary>
        </member>
        <member name="M:Argon.JValue.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Argon.JValue" /> class with the given value.
            </summary>
        </member>
        <member name="P:Argon.JValue.HasValues">
            <summary>
            Gets a value indicating whether this token has child tokens.
            </summary>
        </member>
        <member name="M:Argon.JValue.CreateComment(System.String)">
            <summary>
            Creates a <see cref="T:Argon.JValue" /> comment with the given value.
            </summary>
            <returns>A <see cref="T:Argon.JValue" /> comment with the given value.</returns>
        </member>
        <member name="M:Argon.JValue.CreateString(System.String)">
            <summary>
            Creates a <see cref="T:Argon.JValue" /> string with the given value.
            </summary>
            <returns>A <see cref="T:Argon.JValue" /> string with the given value.</returns>
        </member>
        <member name="M:Argon.JValue.CreateNull">
            <summary>
            Creates a <see cref="T:Argon.JValue" /> null value.
            </summary>
            <returns>A <see cref="T:Argon.JValue" /> null value.</returns>
        </member>
        <member name="M:Argon.JValue.CreateUndefined">
            <summary>
            Creates a <see cref="T:Argon.JValue" /> undefined value.
            </summary>
            <returns>A <see cref="T:Argon.JValue" /> undefined value.</returns>
        </member>
        <member name="P:Argon.JValue.Type">
            <summary>
            Gets the node type for this <see cref="T:Argon.JToken" />.
            </summary>
        </member>
        <member name="M:Argon.JValue.GetValue">
            <summary>
            Gets or sets the underlying token value.
            </summary>
        </member>
        <member name="P:Argon.JValue.Value">
            <summary>
            Gets or sets the underlying token value.
            </summary>
        </member>
        <member name="M:Argon.JValue.WriteTo(Argon.JsonWriter,Argon.JsonConverter[])">
            <summary>
            Writes this token to a <see cref="T:Argon.JsonWriter" />.
            </summary>
            <param name="converters">A collection of <see cref="T:Argon.JsonConverter" />s which will be used when writing the token.</param>
        </member>
        <member name="M:Argon.JValue.Equals(Argon.JValue)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <returns>
            <c>true</c> if the current object is equal to the <paramref name="other" /> parameter; otherwise, <c>false</c>.
            </returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="M:Argon.JValue.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" />.
            </summary>
            <param name="obj">The <see cref="T:System.Object" /> to compare with the current <see cref="T:System.Object" />.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" />; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Argon.JValue.GetHashCode">
            <summary>
            Serves as a hash function for a particular type.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object" />.
            </returns>
        </member>
        <member name="M:Argon.JValue.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <remarks>
            <c>ToString()</c> returns a non-JSON string value for tokens with a type of <see cref="F:Argon.JTokenType.String" />.
            If you want the JSON for all token types then you should use <see cref="M:Argon.JValue.WriteTo(Argon.JsonWriter,Argon.JsonConverter[])" />.
            </remarks>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:Argon.JValue.ToString(System.String)">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:Argon.JValue.ToString(System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:Argon.JValue.ToString(System.String,System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:Argon.JValue.GetMetaObject(System.Linq.Expressions.Expression)">
            <summary>
            Returns the <see cref="T:System.Dynamic.DynamicMetaObject" /> responsible for binding operations performed on this object.
            </summary>
            <param name="parameter">The expression tree representation of the runtime value.</param>
            <returns>
            The <see cref="T:System.Dynamic.DynamicMetaObject" /> to bind this object.
            </returns>
        </member>
        <member name="M:Argon.JValue.CompareTo(Argon.JValue)">
            <summary>
            Compares the current instance with another object of the same type and returns an integer that indicates whether the current instance precedes, follows, or occurs in the same position in the sort order as the other object.
            </summary>
            <param name="obj">An object to compare with this instance.</param>
            <returns>
            A 32-bit signed integer that indicates the relative order of the objects being compared. The return value has these meanings:
            Value
            Meaning
            Less than zero
            This instance is less than <paramref name="obj" />.
            Zero
            This instance is equal to <paramref name="obj" />.
            Greater than zero
            This instance is greater than <paramref name="obj" />.
            </returns>
            <exception cref="T:System.ArgumentException">
            <paramref name="obj" /> is not of the same type as this instance.
            </exception>
        </member>
        <member name="T:Argon.LineInfoHandling">
            <summary>
            Specifies how line information is handled when loading JSON.
            </summary>
        </member>
        <member name="F:Argon.LineInfoHandling.Ignore">
            <summary>
            Ignore line information.
            </summary>
        </member>
        <member name="F:Argon.LineInfoHandling.Load">
            <summary>
            Load line information.
            </summary>
        </member>
        <member name="T:Argon.MemberSerialization">
            <summary>
            Specifies the member serialization options for the <see cref="T:Argon.JsonSerializer" />.
            </summary>
        </member>
        <member name="F:Argon.MemberSerialization.OptOut">
            <summary>
            All public members are serialized by default. Members can be excluded using <see cref="T:Argon.JsonIgnoreAttribute" /> or <see cref="T:System.NonSerializedAttribute" />.
            This is the default member serialization mode.
            </summary>
        </member>
        <member name="F:Argon.MemberSerialization.OptIn">
            <summary>
            Only members marked with <see cref="T:Argon.JsonPropertyAttribute" /> or <see cref="T:System.Runtime.Serialization.DataMemberAttribute" /> are serialized.
            This member serialization mode can also be set by marking the class with <see cref="T:System.Runtime.Serialization.DataContractAttribute" />.
            </summary>
        </member>
        <member name="F:Argon.MemberSerialization.Fields">
            <summary>
            All public and private fields are serialized. Members can be excluded using <see cref="T:Argon.JsonIgnoreAttribute" /> or <see cref="T:System.NonSerializedAttribute" />.
            and setting IgnoreSerializableAttribute on <see cref="T:Argon.DefaultContractResolver" /> to <c>false</c>.
            </summary>
        </member>
        <member name="T:Argon.MetadataPropertyHandling">
            <summary>
            Specifies metadata property handling options for the <see cref="T:Argon.JsonSerializer" />.
            </summary>
        </member>
        <member name="F:Argon.MetadataPropertyHandling.Default">
            <summary>
            Read metadata properties located at the start of a JSON object.
            </summary>
        </member>
        <member name="F:Argon.MetadataPropertyHandling.ReadAhead">
            <summary>
            Read metadata properties located anywhere in a JSON object. Note that this setting will impact performance.
            </summary>
        </member>
        <member name="F:Argon.MetadataPropertyHandling.Ignore">
            <summary>
            Do not try to read metadata properties.
            </summary>
        </member>
        <member name="T:Argon.MissingMemberHandling">
            <summary>
            Specifies missing member handling options for the <see cref="T:Argon.JsonSerializer" />.
            </summary>
        </member>
        <member name="F:Argon.MissingMemberHandling.Ignore">
            <summary>
            Ignore a missing member and do not attempt to deserialize it.
            </summary>
        </member>
        <member name="F:Argon.MissingMemberHandling.Error">
            <summary>
            Throw a <see cref="T:Argon.JsonSerializationException" /> when a missing member is encountered during deserialization.
            </summary>
        </member>
        <member name="T:Argon.CamelCaseNamingStrategy">
            <summary>
            A camel case naming strategy.
            </summary>
        </member>
        <member name="M:Argon.CamelCaseNamingStrategy.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Argon.CamelCaseNamingStrategy" /> class.
            </summary>
            <param name="processDictionaryKeys">
            A flag indicating whether dictionary keys should be processed.
            </param>
            <param name="overrideSpecifiedNames">
            A flag indicating whether explicitly specified property names should be processed,
            e.g. a property name customized with a <see cref="T:Argon.JsonPropertyAttribute" />.
            </param>
        </member>
        <member name="M:Argon.CamelCaseNamingStrategy.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Argon.CamelCaseNamingStrategy" /> class.
            </summary>
        </member>
        <member name="M:Argon.CamelCaseNamingStrategy.ResolvePropertyName(System.String)">
            <summary>
            Resolves the specified property name.
            </summary>
        </member>
        <member name="T:Argon.CamelCasePropertyNamesContractResolver">
            <summary>
            Resolves member mappings for a type, camel casing property names.
            </summary>
        </member>
        <member name="M:Argon.CamelCasePropertyNamesContractResolver.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Argon.CamelCasePropertyNamesContractResolver" /> class.
            </summary>
        </member>
        <member name="M:Argon.CamelCasePropertyNamesContractResolver.ResolveContract(System.Type)">
            <summary>
            Resolves the contract for a given type.
            </summary>
            <param name="type">The type to resolve a contract for.</param>
            <returns>The contract for a given type.</returns>
        </member>
        <member name="T:Argon.DefaultNamingStrategy">
            <summary>
            The default naming strategy. Property names and dictionary keys are unchanged.
            </summary>
        </member>
        <member name="M:Argon.DefaultNamingStrategy.ResolvePropertyName(System.String)">
            <summary>
            Resolves the specified property name.
            </summary>
        </member>
        <member name="T:Argon.KebabCaseNamingStrategy">
            <summary>
            A kebab case naming strategy.
            </summary>
        </member>
        <member name="M:Argon.KebabCaseNamingStrategy.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Argon.KebabCaseNamingStrategy" /> class.
            </summary>
            <param name="processDictionaryKeys">
            A flag indicating whether dictionary keys should be processed.
            </param>
            <param name="overrideSpecifiedNames">
            A flag indicating whether explicitly specified property names should be processed,
            e.g. a property name customized with a <see cref="T:Argon.JsonPropertyAttribute" />.
            </param>
        </member>
        <member name="M:Argon.KebabCaseNamingStrategy.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Argon.KebabCaseNamingStrategy" /> class.
            </summary>
        </member>
        <member name="M:Argon.KebabCaseNamingStrategy.ResolvePropertyName(System.String)">
            <summary>
            Resolves the specified property name.
            </summary>
        </member>
        <member name="T:Argon.NamingStrategy">
            <summary>
            A base class for resolving how property names and dictionary keys are serialized.
            </summary>
        </member>
        <member name="P:Argon.NamingStrategy.ProcessDictionaryKeys">
            <summary>
            A flag indicating whether dictionary keys should be processed.
            Defaults to <c>false</c>.
            </summary>
        </member>
        <member name="P:Argon.NamingStrategy.OverrideSpecifiedNames">
            <summary>
            A flag indicating whether explicitly specified property names,
            e.g. a property name customized with a <see cref="T:Argon.JsonPropertyAttribute" />, should be processed.
            Defaults to <c>false</c>.
            </summary>
        </member>
        <member name="M:Argon.NamingStrategy.GetPropertyName(System.String,System.Boolean)">
            <summary>
            Gets the serialized name for a given property name.
            </summary>
            <param name="name">The initial property name.</param>
            <param name="hasSpecifiedName">A flag indicating whether the property has had a name explicitly specified.</param>
            <returns>The serialized property name.</returns>
        </member>
        <member name="M:Argon.NamingStrategy.GetDictionaryKey(System.String,System.Object)">
            <summary>
            Gets the serialized key for a given dictionary key.
            </summary>
            <param name="name">The initial dictionary key.</param>
            <returns>The serialized dictionary key.</returns>
        </member>
        <member name="M:Argon.NamingStrategy.ResolvePropertyName(System.String)">
            <summary>
            Resolves the specified property name.
            </summary>
        </member>
        <member name="M:Argon.NamingStrategy.GetHashCode">
            <summary>
            Hash code calculation
            </summary>
        </member>
        <member name="M:Argon.NamingStrategy.Equals(System.Object)">
            <summary>
            Object equality implementation
            </summary>
        </member>
        <member name="M:Argon.NamingStrategy.Equals(Argon.NamingStrategy)">
            <summary>
            Compare to another NamingStrategy
            </summary>
        </member>
        <member name="T:Argon.SnakeCaseNamingStrategy">
            <summary>
            A snake case naming strategy.
            </summary>
        </member>
        <member name="M:Argon.SnakeCaseNamingStrategy.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Argon.SnakeCaseNamingStrategy" /> class.
            </summary>
            <param name="processDictionaryKeys">
            A flag indicating whether dictionary keys should be processed.
            </param>
            <param name="overrideSpecifiedNames">
            A flag indicating whether explicitly specified property names should be processed,
            e.g. a property name customized with a <see cref="T:Argon.JsonPropertyAttribute" />.
            </param>
        </member>
        <member name="M:Argon.SnakeCaseNamingStrategy.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Argon.SnakeCaseNamingStrategy" /> class.
            </summary>
        </member>
        <member name="M:Argon.SnakeCaseNamingStrategy.ResolvePropertyName(System.String)">
            <summary>
            Resolves the specified property name.
            </summary>
        </member>
        <member name="T:Argon.NullValueHandling">
            <summary>
            Specifies null value handling options for the <see cref="T:Argon.JsonSerializer" />.
            </summary>
            <example>
            <code lang="cs" source="..\src\Tests\Documentation\SerializationTests.cs" region="ReducingSerializedJsonSizeNullValueHandlingObject" title="NullValueHandling Class" />
            <code lang="cs" source="..\src\Tests\Documentation\SerializationTests.cs" region="ReducingSerializedJsonSizeNullValueHandlingExample" title="NullValueHandling Ignore Example" />
            </example>
        </member>
        <member name="F:Argon.NullValueHandling.Include">
            <summary>
            Include null values when serializing and deserializing objects.
            </summary>
        </member>
        <member name="F:Argon.NullValueHandling.Ignore">
            <summary>
            Ignore null values when serializing and deserializing objects.
            </summary>
        </member>
        <member name="T:Argon.ObjectCreationHandling">
            <summary>
            Specifies how object creation is handled by the <see cref="T:Argon.JsonSerializer" />.
            </summary>
        </member>
        <member name="F:Argon.ObjectCreationHandling.Auto">
            <summary>
            Reuse existing objects, create new objects when needed.
            </summary>
        </member>
        <member name="F:Argon.ObjectCreationHandling.Reuse">
            <summary>
            Only reuse existing objects.
            </summary>
        </member>
        <member name="F:Argon.ObjectCreationHandling.Replace">
            <summary>
            Always create new objects.
            </summary>
        </member>
        <member name="T:Argon.PreserveReferencesHandling">
            <summary>
            Specifies reference handling options for the <see cref="T:Argon.JsonSerializer" />.
            </summary>
            <example>
            <code lang="cs" source="..\src\Tests\Documentation\SerializationTests.cs" region="PreservingObjectReferencesOn" title="Preserve Object References" />
            </example>
        </member>
        <member name="F:Argon.PreserveReferencesHandling.None">
            <summary>
            Do not preserve references when serializing types.
            </summary>
        </member>
        <member name="F:Argon.PreserveReferencesHandling.Objects">
            <summary>
            Preserve references when serializing into a JSON object structure.
            </summary>
        </member>
        <member name="F:Argon.PreserveReferencesHandling.Arrays">
            <summary>
            Preserve references when serializing into a JSON array structure.
            </summary>
        </member>
        <member name="F:Argon.PreserveReferencesHandling.All">
            <summary>
            Preserve references when serializing.
            </summary>
        </member>
        <member name="T:Argon.ReferenceLoopHandling">
            <summary>
            Specifies reference loop handling options for the <see cref="T:Argon.JsonSerializer" />.
            </summary>
        </member>
        <member name="F:Argon.ReferenceLoopHandling.Error">
            <summary>
            Throw a <see cref="T:Argon.JsonSerializationException" /> when a loop is encountered.
            </summary>
        </member>
        <member name="F:Argon.ReferenceLoopHandling.Ignore">
            <summary>
            Ignore loop references and do not serialize.
            </summary>
        </member>
        <member name="F:Argon.ReferenceLoopHandling.Serialize">
            <summary>
            Serialize loop references.
            </summary>
        </member>
        <member name="T:Argon.Required">
            <summary>
            Indicating whether a property is required.
            </summary>
        </member>
        <member name="F:Argon.Required.Default">
            <summary>
            The property is not required. The default state.
            </summary>
        </member>
        <member name="F:Argon.Required.AllowNull">
            <summary>
            The property must be defined in JSON but can be a null value.
            </summary>
        </member>
        <member name="F:Argon.Required.Always">
            <summary>
            The property must be defined in JSON and cannot be a null value.
            </summary>
        </member>
        <member name="F:Argon.Required.DisallowNull">
            <summary>
            The property is not required but it cannot be a null value.
            </summary>
        </member>
        <member name="T:Argon.DefaultContractResolver">
            <summary>
            Used by <see cref="T:Argon.JsonSerializer" /> to resolve a <see cref="T:Argon.JsonContract" /> for a given <see cref="T:System.Type" />.
            </summary>
        </member>
        <member name="P:Argon.DefaultContractResolver.SerializeCompilerGeneratedMembers">
            <summary>
            Gets or sets a value indicating whether compiler generated members should be serialized.
            </summary>
        </member>
        <member name="P:Argon.DefaultContractResolver.NamingStrategy">
            <summary>
            Gets or sets the naming strategy used to resolve how property names and dictionary keys are serialized.
            </summary>
        </member>
        <member name="M:Argon.DefaultContractResolver.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Argon.DefaultContractResolver" /> class.
            </summary>
        </member>
        <member name="M:Argon.DefaultContractResolver.ResolveContract(System.Type)">
            <summary>
            Resolves the contract for a given type.
            </summary>
            <param name="type">The type to resolve a contract for.</param>
            <returns>The contract for a given type.</returns>
        </member>
        <member name="M:Argon.DefaultContractResolver.GetSerializableMembers(System.Type)">
            <summary>
            Gets the serializable members for the type.
            </summary>
            <param name="type">The type to get serializable members for.</param>
            <returns>The serializable members for the type.</returns>
        </member>
        <member name="M:Argon.DefaultContractResolver.CreateObjectContract(System.Type)">
            <summary>
            Creates a <see cref="T:Argon.JsonObjectContract" /> for the given type.
            </summary>
            <returns>A <see cref="T:Argon.JsonObjectContract" /> for the given type.</returns>
        </member>
        <member name="M:Argon.DefaultContractResolver.CreateConstructorParameters(System.Reflection.ConstructorInfo,Argon.JsonPropertyCollection)">
            <summary>
            Creates the constructor parameters.
            </summary>
            <param name="constructor">The constructor to create properties for.</param>
            <param name="memberProperties">The type's member properties.</param>
            <returns>Properties for the given <see cref="T:System.Reflection.ConstructorInfo" />.</returns>
        </member>
        <member name="M:Argon.DefaultContractResolver.CreatePropertyFromConstructorParameter(Argon.JsonProperty,System.Reflection.ParameterInfo)">
            <summary>
            Creates a <see cref="T:Argon.JsonProperty" /> for the given <see cref="T:System.Reflection.ParameterInfo" />.
            </summary>
            <param name="matchingMemberProperty">The matching member property.</param>
            <param name="parameter">The constructor parameter.</param>
            <returns>A created <see cref="T:Argon.JsonProperty" /> for the given <see cref="T:System.Reflection.ParameterInfo" />.</returns>
        </member>
        <member name="M:Argon.DefaultContractResolver.ResolveContractConverter(System.Type)">
            <summary>
            Resolves the default <see cref="T:Argon.JsonConverter" /> for the contract.
            </summary>
            <returns>The contract's default <see cref="T:Argon.JsonConverter" />.</returns>
        </member>
        <member name="M:Argon.DefaultContractResolver.CreateDictionaryContract(System.Type)">
            <summary>
            Creates a <see cref="T:Argon.JsonDictionaryContract" /> for the given type.
            </summary>
            <returns>A <see cref="T:Argon.JsonDictionaryContract" /> for the given type.</returns>
        </member>
        <member name="M:Argon.DefaultContractResolver.CreateArrayContract(System.Type)">
            <summary>
            Creates a <see cref="T:Argon.JsonArrayContract" /> for the given type.
            </summary>
            <returns>A <see cref="T:Argon.JsonArrayContract" /> for the given type.</returns>
        </member>
        <member name="M:Argon.DefaultContractResolver.CreatePrimitiveContract(System.Type)">
            <summary>
            Creates a <see cref="T:Argon.JsonPrimitiveContract" /> for the given type.
            </summary>
            <returns>A <see cref="T:Argon.JsonPrimitiveContract" /> for the given type.</returns>
        </member>
        <member name="M:Argon.DefaultContractResolver.CreateLinqContract(System.Type)">
            <summary>
            Creates a <see cref="T:Argon.JsonLinqContract" /> for the given type.
            </summary>
            <returns>A <see cref="T:Argon.JsonLinqContract" /> for the given type.</returns>
        </member>
        <member name="M:Argon.DefaultContractResolver.CreateDynamicContract(System.Type)">
            <summary>
            Creates a <see cref="T:Argon.JsonDynamicContract" /> for the given type.
            </summary>
            <returns>A <see cref="T:Argon.JsonDynamicContract" /> for the given type.</returns>
        </member>
        <member name="M:Argon.DefaultContractResolver.CreateStringContract(System.Type)">
            <summary>
            Creates a <see cref="T:Argon.JsonStringContract" /> for the given type.
            </summary>
            <returns>A <see cref="T:Argon.JsonStringContract" /> for the given type.</returns>
        </member>
        <member name="M:Argon.DefaultContractResolver.CreateContract(System.Type)">
            <summary>
            Determines which contract type is created for the given type.
            </summary>
            <returns>A <see cref="T:Argon.JsonContract" /> for the given type.</returns>
        </member>
        <member name="M:Argon.DefaultContractResolver.CreateProperties(System.Type,Argon.MemberSerialization)">
            <summary>
            Creates properties for the given <see cref="T:Argon.JsonContract" />.
            </summary>
            <param name="type">The type to create properties for.</param>
            <param name="memberSerialization">The member serialization mode for the type.</param>
            <returns>Properties for the given <see cref="T:Argon.JsonContract" />.</returns>
        </member>
        <member name="M:Argon.DefaultContractResolver.CreateMemberValueProvider(System.Reflection.MemberInfo)">
            <summary>
            Creates the <see cref="T:Argon.IValueProvider" /> used by the serializer to get and set values from a member.
            </summary>
            <returns>The <see cref="T:Argon.IValueProvider" /> used by the serializer to get and set values from a member.</returns>
        </member>
        <member name="M:Argon.DefaultContractResolver.CreateProperty(System.Reflection.MemberInfo,Argon.MemberSerialization)">
            <summary>
            Creates a <see cref="T:Argon.JsonProperty" /> for the given <see cref="T:System.Reflection.MemberInfo" />.
            </summary>
            <param name="memberSerialization">The member's parent <see cref="T:Argon.MemberSerialization" />.</param>
            <param name="member">The member to create a <see cref="T:Argon.JsonProperty" /> for.</param>
            <returns>A created <see cref="T:Argon.JsonProperty" /> for the given <see cref="T:System.Reflection.MemberInfo" />.</returns>
        </member>
        <member name="M:Argon.DefaultContractResolver.ResolvePropertyName(System.String)">
            <summary>
            Resolves the name of the property.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <returns>Resolved name of the property.</returns>
        </member>
        <member name="M:Argon.DefaultContractResolver.ResolveDictionaryKey(System.String,System.Object)">
            <summary>
            Resolves the key of the dictionary. By default <see cref="M:Argon.DefaultContractResolver.ResolvePropertyName(System.String)" /> is used to resolve dictionary keys.
            </summary>
            <param name="name">Key of the dictionary.</param>
            <returns>Resolved key of the dictionary.</returns>
        </member>
        <member name="M:Argon.DefaultContractResolver.GetResolvedPropertyName(System.String)">
            <summary>
            Gets the resolved name of the property.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <returns>Name of the property.</returns>
        </member>
        <member name="T:Argon.DefaultSerializationBinder">
            <summary>
            The default serialization binder used when resolving and loading classes from type names.
            </summary>
        </member>
        <member name="M:Argon.DefaultSerializationBinder.BindToType(System.String,System.String)">
            <summary>
            When overridden in a derived class, controls the binding of a serialized object to a type.
            </summary>
            <param name="assemblyName">Specifies the <see cref="T:System.Reflection.Assembly" /> name of the serialized object.</param>
            <param name="typeName">Specifies the <see cref="T:System.Type" /> name of the serialized object.</param>
            <returns>
            The type of the object the formatter creates a new instance of.
            </returns>
        </member>
        <member name="M:Argon.DefaultSerializationBinder.BindToName(System.Type,System.String@,System.String@)">
            <summary>
            When overridden in a derived class, controls the binding of a serialized object to a type.
            </summary>
            <param name="serializedType">The type of the object the formatter creates a new instance of.</param>
            <param name="assemblyName">Specifies the <see cref="T:System.Reflection.Assembly" /> name of the serialized object.</param>
            <param name="typeName">Specifies the <see cref="T:System.Type" /> name of the serialized object.</param>
        </member>
        <member name="T:Argon.DynamicValueProvider">
            <summary>
            Get and set values for a <see cref="T:System.Reflection.MemberInfo" /> using dynamic methods.
            </summary>
        </member>
        <member name="M:Argon.DynamicValueProvider.#ctor(System.Reflection.MemberInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:Argon.DynamicValueProvider" /> class.
            </summary>
            <param name="member">The member info.</param>
        </member>
        <member name="M:Argon.DynamicValueProvider.SetValue(System.Object,System.Object)">
            <summary>
            Sets the value.
            </summary>
            <param name="target">The target to set the value on.</param>
            <param name="value">The value to set on the target.</param>
        </member>
        <member name="M:Argon.DynamicValueProvider.GetValue(System.Object)">
            <summary>
            Gets the value.
            </summary>
            <param name="target">The target to get the value from.</param>
            <returns>The value.</returns>
        </member>
        <member name="T:Argon.IContractResolver">
            <summary>
            Used by <see cref="T:Argon.JsonSerializer" /> to resolve a <see cref="T:Argon.JsonContract" /> for a given <see cref="T:System.Type" />.
            </summary>
            <example>
            <code lang="cs" source="..\src\Tests\Documentation\SerializationTests.cs" region="ReducingSerializedJsonSizeContractResolverObject" title="IContractResolver Class" />
            <code lang="cs" source="..\src\Tests\Documentation\SerializationTests.cs" region="ReducingSerializedJsonSizeContractResolverExample" title="IContractResolver Example" />
            </example>
        </member>
        <member name="M:Argon.IContractResolver.ResolveContract(System.Type)">
            <summary>
            Resolves the contract for a given type.
            </summary>
            <param name="type">The type to resolve a contract for.</param>
            <returns>The contract for a given type.</returns>
        </member>
        <member name="T:Argon.IReferenceResolver">
            <summary>
            Used to resolve references when serializing and deserializing JSON by the <see cref="T:Argon.JsonSerializer" />.
            </summary>
        </member>
        <member name="M:Argon.IReferenceResolver.ResolveReference(System.Object,System.String)">
            <summary>
            Resolves a reference to its object.
            </summary>
            <param name="context">The serialization context.</param>
            <param name="reference">The reference to resolve.</param>
            <returns>The object that was resolved from the reference.</returns>
        </member>
        <member name="M:Argon.IReferenceResolver.GetReference(System.Object,System.Object)">
            <summary>
            Gets the reference for the specified object.
            </summary>
            <param name="context">The serialization context.</param>
            <param name="value">The object to get a reference for.</param>
            <returns>The reference to the object.</returns>
        </member>
        <member name="M:Argon.IReferenceResolver.IsReferenced(System.Object,System.Object)">
            <summary>
            Determines whether the specified object is referenced.
            </summary>
            <param name="context">The serialization context.</param>
            <param name="value">The object to test for a reference.</param>
            <returns>
            <c>true</c> if the specified object is referenced; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Argon.IReferenceResolver.AddReference(System.Object,System.String,System.Object)">
            <summary>
            Adds a reference to the specified object.
            </summary>
            <param name="context">The serialization context.</param>
            <param name="value">The object to reference.</param>
        </member>
        <member name="T:Argon.ISerializationBinder">
            <summary>
            Allows users to control class loading and mandate what class to load.
            </summary>
        </member>
        <member name="M:Argon.ISerializationBinder.BindToType(System.String,System.String)">
            <summary>
            When implemented, controls the binding of a serialized object to a type.
            </summary>
            <param name="assemblyName">Specifies the <see cref="T:System.Reflection.Assembly" /> name of the serialized object.</param>
            <param name="typeName">Specifies the <see cref="T:System.Type" /> name of the serialized object</param>
            <returns>The type of the object the formatter creates a new instance of.</returns>
        </member>
        <member name="M:Argon.ISerializationBinder.BindToName(System.Type,System.String@,System.String@)">
            <summary>
            When implemented, controls the binding of a serialized object to a type.
            </summary>
            <param name="serializedType">The type of the object the formatter creates a new instance of.</param>
            <param name="assemblyName">Specifies the <see cref="T:System.Reflection.Assembly" /> name of the serialized object.</param>
            <param name="typeName">Specifies the <see cref="T:System.Type" /> name of the serialized object.</param>
        </member>
        <member name="T:Argon.IValueProvider">
            <summary>
            Provides methods to get and set values.
            </summary>
        </member>
        <member name="M:Argon.IValueProvider.SetValue(System.Object,System.Object)">
            <summary>
            Sets the value.
            </summary>
            <param name="target">The target to set the value on.</param>
            <param name="value">The value to set on the target.</param>
        </member>
        <member name="M:Argon.IValueProvider.GetValue(System.Object)">
            <summary>
            Gets the value.
            </summary>
            <param name="target">The target to get the value from.</param>
            <returns>The value.</returns>
        </member>
        <member name="T:Argon.JsonArrayContract">
            <summary>
            Contract details for a <see cref="T:System.Type" /> used by the <see cref="T:Argon.JsonSerializer" />.
            </summary>
        </member>
        <member name="P:Argon.JsonArrayContract.CollectionItemType">
            <summary>
            Gets the <see cref="T:System.Type" /> of the collection items.
            </summary>
        </member>
        <member name="P:Argon.JsonArrayContract.IsMultidimensionalArray">
            <summary>
            Gets a value indicating whether the collection type is a multidimensional array.
            </summary>
        </member>
        <member name="P:Argon.JsonArrayContract.OverrideCreator">
            <summary>
            Gets or sets the function used to create the object. When set this function will override <see cref="P:Argon.JsonContract.DefaultCreator" />.
            </summary>
        </member>
        <member name="P:Argon.JsonArrayContract.HasParameterizedCreator">
            <summary>
            Gets a value indicating whether the creator has a parameter with the collection values.
            </summary>
        </member>
        <member name="M:Argon.JsonArrayContract.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Argon.JsonArrayContract" /> class.
            </summary>
        </member>
        <member name="T:Argon.JsonContainerContract">
            <summary>
            Contract details for a <see cref="T:System.Type" /> used by the <see cref="T:Argon.JsonSerializer" />.
            </summary>
        </member>
        <member name="P:Argon.JsonContainerContract.ItemConverter">
            <summary>
            Gets or sets the default collection items <see cref="T:Argon.JsonConverter" />.
            </summary>
        </member>
        <member name="P:Argon.JsonContainerContract.ItemIsReference">
            <summary>
            Gets or sets a value indicating whether the collection items preserve object references.
            </summary>
        </member>
        <member name="P:Argon.JsonContainerContract.ItemReferenceLoopHandling">
            <summary>
            Gets or sets the collection item reference loop handling.
            </summary>
        </member>
        <member name="P:Argon.JsonContainerContract.ItemTypeNameHandling">
            <summary>
            Gets or sets the collection item type name handling.
            </summary>
        </member>
        <member name="M:Argon.JsonContainerContract.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Argon.JsonContainerContract" /> class.
            </summary>
        </member>
        <member name="T:Argon.JsonContract">
            <summary>
            Contract details for a <see cref="T:System.Type" /> used by the <see cref="T:Argon.JsonSerializer" />.
            </summary>
        </member>
        <member name="P:Argon.JsonContract.UnderlyingType">
            <summary>
            Gets the underlying type for the contract.
            </summary>
        </member>
        <member name="P:Argon.JsonContract.CreatedType">
            <summary>
            Gets or sets the type created during deserialization.
            </summary>
        </member>
        <member name="P:Argon.JsonContract.IsReference">
            <summary>
            Gets or sets whether this type contract is serialized as a reference.
            </summary>
        </member>
        <member name="P:Argon.JsonContract.Converter">
            <summary>
            Gets or sets the default <see cref="T:Argon.JsonConverter" /> for this contract.
            </summary>
        </member>
        <member name="P:Argon.JsonContract.InternalConverter">
            <summary>
            Gets the internally resolved <see cref="T:Argon.JsonConverter" /> for the contract's type.
            This converter is used as a fallback converter when no other converter is resolved.
            Setting <see cref="P:Argon.JsonContract.Converter" /> will always override this converter.
            </summary>
        </member>
        <member name="P:Argon.JsonContract.DefaultCreator">
            <summary>
            Gets or sets the default creator method used to create the object.
            </summary>
        </member>
        <member name="P:Argon.JsonContract.DefaultCreatorNonPublic">
            <summary>
            Gets or sets a value indicating whether the default creator is non-public.
            </summary>
        </member>
        <member name="T:Argon.JsonDictionaryContract">
            <summary>
            Contract details for a <see cref="T:System.Type" /> used by the <see cref="T:Argon.JsonSerializer" />.
            </summary>
        </member>
        <member name="P:Argon.JsonDictionaryContract.DictionaryKeyResolver">
            <summary>
            Gets or sets the dictionary key resolver.
            </summary>
        </member>
        <member name="P:Argon.JsonDictionaryContract.DictionaryKeyType">
            <summary>
            Gets the <see cref="T:System.Type" /> of the dictionary keys.
            </summary>
        </member>
        <member name="P:Argon.JsonDictionaryContract.DictionaryValueType">
            <summary>
            Gets the <see cref="T:System.Type" /> of the dictionary values.
            </summary>
        </member>
        <member name="P:Argon.JsonDictionaryContract.OverrideCreator">
            <summary>
            Gets or sets the function used to create the object. When set this function will override <see cref="P:Argon.JsonContract.DefaultCreator" />.
            </summary>
        </member>
        <member name="P:Argon.JsonDictionaryContract.HasParameterizedCreator">
            <summary>
            Gets a value indicating whether the creator has a parameter with the dictionary values.
            </summary>
        </member>
        <member name="M:Argon.JsonDictionaryContract.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Argon.JsonDictionaryContract" /> class.
            </summary>
        </member>
        <member name="T:Argon.JsonDynamicContract">
            <summary>
            Contract details for a <see cref="T:System.Type" /> used by the <see cref="T:Argon.JsonSerializer" />.
            </summary>
        </member>
        <member name="P:Argon.JsonDynamicContract.Properties">
            <summary>
            Gets the object's properties.
            </summary>
        </member>
        <member name="P:Argon.JsonDynamicContract.PropertyNameResolver">
            <summary>
            Gets or sets the property name resolver.
            </summary>
        </member>
        <member name="M:Argon.JsonDynamicContract.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Argon.JsonDynamicContract" /> class.
            </summary>
        </member>
        <member name="T:Argon.JsonLinqContract">
            <summary>
            Contract details for a <see cref="T:System.Type" /> used by the <see cref="T:Argon.JsonSerializer" />.
            </summary>
        </member>
        <member name="M:Argon.JsonLinqContract.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Argon.JsonLinqContract" /> class.
            </summary>
        </member>
        <member name="T:Argon.JsonObjectContract">
            <summary>
            Contract details for a <see cref="T:System.Type" /> used by the <see cref="T:Argon.JsonSerializer" />.
            </summary>
        </member>
        <member name="P:Argon.JsonObjectContract.MemberSerialization">
            <summary>
            Gets or sets the object member serialization.
            </summary>
        </member>
        <member name="P:Argon.JsonObjectContract.MissingMemberHandling">
            <summary>
            Gets or sets the missing member handling used when deserializing this object.
            </summary>
        </member>
        <member name="P:Argon.JsonObjectContract.ItemRequired">
            <summary>
            Gets or sets a value that indicates whether the object's properties are required.
            </summary>
        </member>
        <member name="P:Argon.JsonObjectContract.ItemNullValueHandling">
            <summary>
            Gets or sets how the object's properties with null values are handled during serialization and deserialization.
            </summary>
        </member>
        <member name="P:Argon.JsonObjectContract.Properties">
            <summary>
            Gets the object's properties.
            </summary>
        </member>
        <member name="P:Argon.JsonObjectContract.CreatorParameters">
            <summary>
            Gets a collection of <see cref="T:Argon.JsonProperty" /> instances that define the parameters used with <see cref="P:Argon.JsonObjectContract.OverrideCreator" />.
            </summary>
        </member>
        <member name="P:Argon.JsonObjectContract.OverrideCreator">
            <summary>
            Gets or sets the function used to create the object. When set this function will override <see cref="P:Argon.JsonContract.DefaultCreator" />.
            This function is called with a collection of arguments which are defined by the <see cref="P:Argon.JsonObjectContract.CreatorParameters" /> collection.
            </summary>
        </member>
        <member name="M:Argon.JsonObjectContract.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Argon.JsonObjectContract" /> class.
            </summary>
        </member>
        <member name="T:Argon.JsonPrimitiveContract">
            <summary>
            Contract details for a <see cref="T:System.Type" /> used by the <see cref="T:Argon.JsonSerializer" />.
            </summary>
        </member>
        <member name="M:Argon.JsonPrimitiveContract.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Argon.JsonPrimitiveContract" /> class.
            </summary>
        </member>
        <member name="T:Argon.JsonProperty">
            <summary>
            Maps a JSON property to a .NET member or constructor parameter.
            </summary>
        </member>
        <member name="M:Argon.JsonProperty.#ctor(System.Type,System.Type)">
            <summary>
            Maps a JSON property to a .NET member or constructor parameter.
            </summary>
        </member>
        <member name="P:Argon.JsonProperty.PropertyName">
            <summary>
            Gets or sets the name of the property.
            </summary>
        </member>
        <member name="P:Argon.JsonProperty.DeclaringType">
            <summary>
            Gets or sets the type that declared this property.
            </summary>
        </member>
        <member name="P:Argon.JsonProperty.Order">
            <summary>
            Gets or sets the order of serialization of a member.
            </summary>
        </member>
        <member name="P:Argon.JsonProperty.UnderlyingName">
            <summary>
            Gets or sets the name of the underlying member or parameter.
            </summary>
        </member>
        <member name="P:Argon.JsonProperty.ValueProvider">
            <summary>
            Gets the <see cref="T:Argon.IValueProvider" /> that will get and set the <see cref="T:Argon.JsonProperty" /> during serialization.
            </summary>
        </member>
        <member name="P:Argon.JsonProperty.PropertyType">
            <summary>
            Gets or sets the type of the property.
            </summary>
        </member>
        <member name="P:Argon.JsonProperty.Converter">
            <summary>
            Gets or sets the <see cref="T:Argon.JsonConverter" /> for the property.
            If set this converter takes precedence over the contract converter for the property type.
            </summary>
        </member>
        <member name="P:Argon.JsonProperty.Ignored">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Argon.JsonProperty" /> is ignored.
            </summary>
        </member>
        <member name="P:Argon.JsonProperty.Readable">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Argon.JsonProperty" /> is readable.
            </summary>
        </member>
        <member name="P:Argon.JsonProperty.Writable">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Argon.JsonProperty" /> is writable.
            </summary>
        </member>
        <member name="P:Argon.JsonProperty.HasMemberAttribute">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Argon.JsonProperty" /> has a member attribute.
            </summary>
        </member>
        <member name="P:Argon.JsonProperty.DefaultValue">
            <summary>
            Gets the default value.
            </summary>
        </member>
        <member name="P:Argon.JsonProperty.Required">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Argon.JsonProperty" /> is required.
            </summary>
        </member>
        <member name="P:Argon.JsonProperty.IsRequiredSpecified">
            <summary>
            Gets a value indicating whether <see cref="P:Argon.JsonProperty.Required" /> has a value specified.
            </summary>
        </member>
        <member name="P:Argon.JsonProperty.IsReference">
            <summary>
            Gets or sets a value indicating whether this property preserves object references.
            </summary>
        </member>
        <member name="P:Argon.JsonProperty.NullValueHandling">
            <summary>
            Gets or sets the property null value handling.
            </summary>
        </member>
        <member name="P:Argon.JsonProperty.DefaultValueHandling">
            <summary>
            Gets or sets the property default value handling.
            </summary>
        </member>
        <member name="P:Argon.JsonProperty.ReferenceLoopHandling">
            <summary>
            Gets or sets the property reference loop handling.
            </summary>
        </member>
        <member name="P:Argon.JsonProperty.ObjectCreationHandling">
            <summary>
            Gets or sets the property object creation handling.
            </summary>
        </member>
        <member name="P:Argon.JsonProperty.TypeNameHandling">
            <summary>
            Gets or sets or sets the type name handling.
            </summary>
        </member>
        <member name="M:Argon.JsonProperty.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="P:Argon.JsonProperty.ItemConverter">
            <summary>
            Gets or sets the converter used when serializing the property's collection items.
            </summary>
        </member>
        <member name="P:Argon.JsonProperty.ItemIsReference">
            <summary>
            Gets or sets whether this property's collection items are serialized as a reference.
            </summary>
        </member>
        <member name="P:Argon.JsonProperty.ItemTypeNameHandling">
            <summary>
            Gets or sets the type name handling used when serializing the property's collection items.
            </summary>
        </member>
        <member name="P:Argon.JsonProperty.ItemReferenceLoopHandling">
            <summary>
            Gets or sets the reference loop handling used when serializing the property's collection items.
            </summary>
        </member>
        <member name="T:Argon.JsonPropertyCollection">
            <summary>
            A collection of <see cref="T:Argon.JsonProperty" /> objects.
            </summary>
        </member>
        <member name="M:Argon.JsonPropertyCollection.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Argon.JsonPropertyCollection" /> class.
            </summary>
            <param name="type">The type.</param>
        </member>
        <member name="M:Argon.JsonPropertyCollection.GetKeyForItem(Argon.JsonProperty)">
            <summary>
            When implemented in a derived class, extracts the key from the specified element.
            </summary>
            <param name="item">The element from which to extract the key.</param>
            <returns>The key for the specified element.</returns>
        </member>
        <member name="M:Argon.JsonPropertyCollection.AddProperty(Argon.JsonProperty)">
            <summary>
            Adds a <see cref="T:Argon.JsonProperty" /> object.
            </summary>
            <param name="property">The property to add to the collection.</param>
        </member>
        <member name="M:Argon.JsonPropertyCollection.GetClosestMatchProperty(System.String)">
            <summary>
            Gets the closest matching <see cref="T:Argon.JsonProperty" /> object.
            First attempts to get an exact case match of <paramref name="name" /> and then
            a case insensitive match.
            </summary>
            <param name="name">Name of the property.</param>
            <returns>A matching property if found.</returns>
        </member>
        <member name="M:Argon.JsonPropertyCollection.GetClosestMatchProperty(System.String,System.Type)">
            <summary>
            Gets the closest matching <see cref="T:Argon.JsonProperty" /> object.
            First attempts to get an exact case match of <paramref name="name" /> and then
            a case insensitive match.
            </summary>
            <param name="name">Name of the property.</param>
            <param name="type">Type of the property.</param>
            <returns>A matching property if found.</returns>
        </member>
        <member name="T:Argon.JsonStringContract">
            <summary>
            Contract details for a <see cref="T:System.Type" /> used by the <see cref="T:Argon.JsonSerializer" />.
            </summary>
        </member>
        <member name="M:Argon.JsonStringContract.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Argon.JsonStringContract" /> class.
            </summary>
        </member>
        <member name="T:Argon.ObjectConstructor">
            <summary>
            Represents a method that constructs an object.
            </summary>
        </member>
        <member name="T:Argon.TypeNameAssemblyFormatHandling">
            <summary>
            Indicates the method that will be used during deserialization for locating and loading assemblies.
            </summary>
        </member>
        <member name="F:Argon.TypeNameAssemblyFormatHandling.Simple">
            <summary>
            In simple mode, the assembly used during deserialization need not match exactly the assembly used during serialization. Specifically, the version numbers need not match as the <c>LoadWithPartialName</c> method of the <see cref="T:System.Reflection.Assembly" /> class is used to load the assembly.
            </summary>
        </member>
        <member name="F:Argon.TypeNameAssemblyFormatHandling.Full">
            <summary>
            In full mode, the assembly used during deserialization must match exactly the assembly used during serialization. The <c>Load</c> method of the <see cref="T:System.Reflection.Assembly" /> class is used to load the assembly.
            </summary>
        </member>
        <member name="T:Argon.TypeNameHandling">
            <summary>
            Specifies type name handling options for the <see cref="T:Argon.JsonSerializer" />.
            </summary>
            <remarks>
            <see cref="P:Argon.JsonSerializer.TypeNameHandling" /> should be used with caution when your application deserializes JSON from an external source.
            Incoming types should be validated with a custom <see cref="P:Argon.JsonSerializer.SerializationBinder" />
            when deserializing with a value other than <see cref="F:Argon.TypeNameHandling.None" />.
            </remarks>
        </member>
        <member name="F:Argon.TypeNameHandling.None">
            <summary>
            Do not include the .NET type name when serializing types.
            </summary>
        </member>
        <member name="F:Argon.TypeNameHandling.Objects">
            <summary>
            Include the .NET type name when serializing into a JSON object structure.
            </summary>
        </member>
        <member name="F:Argon.TypeNameHandling.Arrays">
            <summary>
            Include the .NET type name when serializing into a JSON array structure.
            </summary>
        </member>
        <member name="F:Argon.TypeNameHandling.All">
            <summary>
            Always include the .NET type name when serializing.
            </summary>
        </member>
        <member name="F:Argon.TypeNameHandling.Auto">
            <summary>
            Include the .NET type name when the type of the object being serialized is not the same as its declared type.
            Note that this doesn't include the root serialized object by default. To include the root object's type name in JSON
            you must specify a root type object with <see cref="M:Argon.JsonConvert.SerializeObject(System.Object,System.Type,Argon.JsonSerializerSettings)" />
            or <see cref="M:Argon.JsonSerializer.Serialize(Argon.JsonWriter,System.Object,System.Type)" />.
            </summary>
        </member>
        <member name="T:Argon.WriteState">
            <summary>
            Specifies the state of the <see cref="T:Argon.JsonWriter" />.
            </summary>
        </member>
        <member name="F:Argon.WriteState.Error">
            <summary>
            An exception has been thrown, which has left the <see cref="T:Argon.JsonWriter" /> in an invalid state.
            You may call the <see cref="M:Argon.JsonWriter.Close" /> method to put the <see cref="T:Argon.JsonWriter" /> in the <c>Closed</c> state.
            Any other <see cref="T:Argon.JsonWriter" /> method calls result in an <see cref="T:System.InvalidOperationException" /> being thrown.
            </summary>
        </member>
        <member name="F:Argon.WriteState.Closed">
            <summary>
            The <see cref="M:Argon.JsonWriter.Close" /> method has been called.
            </summary>
        </member>
        <member name="F:Argon.WriteState.Object">
            <summary>
            An object is being written.
            </summary>
        </member>
        <member name="F:Argon.WriteState.Array">
            <summary>
            An array is being written.
            </summary>
        </member>
        <member name="F:Argon.WriteState.Property">
            <summary>
            A property is being written.
            </summary>
        </member>
        <member name="F:Argon.WriteState.Start">
            <summary>
            A <see cref="T:Argon.JsonWriter" /> write method has not been called.
            </summary>
        </member>
        <member name="M:JsonTypeReflector.CreateJsonConverterInstance(System.Type)">
            <summary>
            Lookup and create an instance of the <see cref="T:Argon.JsonConverter" /> type described by the argument.
            </summary>
            <param name="converterType">The <see cref="T:Argon.JsonConverter" /> type to create.</param>
        </member>
        <member name="M:ConvertUtils.ConvertOrCast(System.Object,System.Type)">
            <summary>
            Converts the value to the specified type. If the value is unable to be converted, the
            value is checked whether it assignable to the specified type.
            </summary>
            <param name="initialValue">The value to convert.</param>
            <param name="targetType">The type to convert or cast the value to.</param>
            <returns>
            The converted type. If conversion was unsuccessful, the initial value
            is returned if assignable to the target type.
            </returns>
        </member>
        <member name="M:DynamicProxyMetaObject`1.CallMethodWithResult(System.String,System.Dynamic.DynamicMetaObjectBinder,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression},DynamicProxyMetaObject{`0}.Fallback,DynamicProxyMetaObject{`0}.Fallback)">
            <summary>
            Helper method for generating a MetaObject which calls a
            specific method on Dynamic that returns a result
            </summary>
        </member>
        <member name="M:DynamicProxyMetaObject`1.CallMethodReturnLast(System.String,System.Dynamic.DynamicMetaObjectBinder,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression},DynamicProxyMetaObject{`0}.Fallback)">
            <summary>
            Helper method for generating a MetaObject which calls a
            specific method on Dynamic, but uses one of the arguments for
            the result.
            </summary>
        </member>
        <member name="M:DynamicProxyMetaObject`1.CallMethodNoResult(System.String,System.Dynamic.DynamicMetaObjectBinder,System.Linq.Expressions.Expression[],DynamicProxyMetaObject{`0}.Fallback)">
            <summary>
            Helper method for generating a MetaObject which calls a
            specific method on Dynamic, but uses one of the arguments for
            the result.
            </summary>
        </member>
        <member name="M:DynamicProxyMetaObject`1.GetRestrictions">
            <summary>
            Returns a Restrictions object which includes our current restrictions merged
            with a restriction limiting our type
            </summary>
        </member>
        <member name="T:ImmutableCollectionsUtils">
            <summary>
            Helper class for serializing immutable collections.
            Note that this is used by all builds, even those that don't support immutable collections, in case the DLL is GACed
            https://github.com/JamesNK/Newtonsoft.Json/issues/652
            </summary>
        </member>
        <member name="M:ReflectionUtils.GetCollectionItemType(System.Type)">
            <summary>
            Gets the type of the typed collection's items.
            </summary>
            <param name="type">The type.</param>
            <returns>The type of the typed collection's items.</returns>
        </member>
        <member name="M:ReflectionUtils.GetMemberUnderlyingType(System.Reflection.MemberInfo)">
            <summary>
            Gets the member's underlying type.
            </summary>
            <returns>The underlying type of the member.</returns>
        </member>
        <member name="M:ReflectionUtils.IsIndexedProperty(System.Reflection.PropertyInfo)">
            <summary>
            Determines whether the property is an indexed property.
            </summary>
            <param name="property">The property.</param>
            <returns>
            <c>true</c> if the property is an indexed property; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ReflectionUtils.CanReadMemberValue(System.Reflection.MemberInfo,System.Boolean)">
            <summary>
            Determines whether the specified MemberInfo can be read.
            </summary>
            <param name="member">The MemberInfo to determine whether can be read.</param>
            <param name="nonPublic">if set to <c>true</c> then allow the member to be gotten non-publicly.</param>
            <returns>
            <c>true</c> if the specified MemberInfo can be read; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ReflectionUtils.CanSetMemberValue(System.Reflection.MemberInfo,System.Boolean,System.Boolean)">
            <summary>
            Determines whether the specified MemberInfo can be set.
            </summary>
            <param name="member">The MemberInfo to determine whether can be set.</param>
            <param name="nonPublic">if set to <c>true</c> then allow the member to be set non-publicly.</param>
            <param name="canSetReadOnly">if set to <c>true</c> then allow the member to be set if read-only.</param>
            <returns>
            <c>true</c> if the specified MemberInfo can be set; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:StringBuffer">
            <summary>
            Builds a string. Unlike <see cref="T:System.Text.StringBuilder" /> this class lets you reuse its internal buffer.
            </summary>
        </member>
    </members>
</doc>
